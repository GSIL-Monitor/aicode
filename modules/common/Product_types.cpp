/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Product_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Product { namespace Service {


ProductRTInfo::~ProductRTInfo() throw() {
}


void ProductRTInfo::__set_iRtCode(const int32_t val) {
  this->iRtCode = val;
__isset.iRtCode = true;
}

void ProductRTInfo::__set_strRtMsg(const std::string& val) {
  this->strRtMsg = val;
__isset.strRtMsg = true;
}
std::ostream& operator<<(std::ostream& out, const ProductRTInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProductRTInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iRtCode);
          this->__isset.iRtCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strRtMsg);
          this->__isset.strRtMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductRTInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductRTInfo");

  if (this->__isset.iRtCode) {
    xfer += oprot->writeFieldBegin("iRtCode", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->iRtCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strRtMsg) {
    xfer += oprot->writeFieldBegin("strRtMsg", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strRtMsg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductRTInfo &a, ProductRTInfo &b) {
  using ::std::swap;
  swap(a.iRtCode, b.iRtCode);
  swap(a.strRtMsg, b.strRtMsg);
  swap(a.__isset, b.__isset);
}

ProductRTInfo::ProductRTInfo(const ProductRTInfo& other0) {
  iRtCode = other0.iRtCode;
  strRtMsg = other0.strRtMsg;
  __isset = other0.__isset;
}
ProductRTInfo& ProductRTInfo::operator=(const ProductRTInfo& other1) {
  iRtCode = other1.iRtCode;
  strRtMsg = other1.strRtMsg;
  __isset = other1.__isset;
  return *this;
}
void ProductRTInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductRTInfo(";
  out << "iRtCode="; (__isset.iRtCode ? (out << to_string(iRtCode)) : (out << "<null>"));
  out << ", " << "strRtMsg="; (__isset.strRtMsg ? (out << to_string(strRtMsg)) : (out << "<null>"));
  out << ")";
}


SaleCompanyInfo::~SaleCompanyInfo() throw() {
}


void SaleCompanyInfo::__set_strID(const std::string& val) {
  this->strID = val;
__isset.strID = true;
}

void SaleCompanyInfo::__set_strName(const std::string& val) {
  this->strName = val;
__isset.strName = true;
}

void SaleCompanyInfo::__set_strEmail(const std::string& val) {
  this->strEmail = val;
__isset.strEmail = true;
}

void SaleCompanyInfo::__set_strPhone(const std::string& val) {
  this->strPhone = val;
__isset.strPhone = true;
}

void SaleCompanyInfo::__set_strBackReceiver(const std::string& val) {
  this->strBackReceiver = val;
__isset.strBackReceiver = true;
}

void SaleCompanyInfo::__set_strBackPhone(const std::string& val) {
  this->strBackPhone = val;
__isset.strBackPhone = true;
}

void SaleCompanyInfo::__set_strExtend(const std::string& val) {
  this->strExtend = val;
__isset.strExtend = true;
}
std::ostream& operator<<(std::ostream& out, const SaleCompanyInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SaleCompanyInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strID);
          this->__isset.strID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strName);
          this->__isset.strName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strEmail);
          this->__isset.strEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strPhone);
          this->__isset.strPhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strBackReceiver);
          this->__isset.strBackReceiver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strBackPhone);
          this->__isset.strBackPhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strExtend);
          this->__isset.strExtend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SaleCompanyInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SaleCompanyInfo");

  if (this->__isset.strID) {
    xfer += oprot->writeFieldBegin("strID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->strID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strName) {
    xfer += oprot->writeFieldBegin("strName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strEmail) {
    xfer += oprot->writeFieldBegin("strEmail", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->strEmail);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strPhone) {
    xfer += oprot->writeFieldBegin("strPhone", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->strPhone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strBackReceiver) {
    xfer += oprot->writeFieldBegin("strBackReceiver", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->strBackReceiver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strBackPhone) {
    xfer += oprot->writeFieldBegin("strBackPhone", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->strBackPhone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strExtend) {
    xfer += oprot->writeFieldBegin("strExtend", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->strExtend);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SaleCompanyInfo &a, SaleCompanyInfo &b) {
  using ::std::swap;
  swap(a.strID, b.strID);
  swap(a.strName, b.strName);
  swap(a.strEmail, b.strEmail);
  swap(a.strPhone, b.strPhone);
  swap(a.strBackReceiver, b.strBackReceiver);
  swap(a.strBackPhone, b.strBackPhone);
  swap(a.strExtend, b.strExtend);
  swap(a.__isset, b.__isset);
}

SaleCompanyInfo::SaleCompanyInfo(const SaleCompanyInfo& other2) {
  strID = other2.strID;
  strName = other2.strName;
  strEmail = other2.strEmail;
  strPhone = other2.strPhone;
  strBackReceiver = other2.strBackReceiver;
  strBackPhone = other2.strBackPhone;
  strExtend = other2.strExtend;
  __isset = other2.__isset;
}
SaleCompanyInfo& SaleCompanyInfo::operator=(const SaleCompanyInfo& other3) {
  strID = other3.strID;
  strName = other3.strName;
  strEmail = other3.strEmail;
  strPhone = other3.strPhone;
  strBackReceiver = other3.strBackReceiver;
  strBackPhone = other3.strBackPhone;
  strExtend = other3.strExtend;
  __isset = other3.__isset;
  return *this;
}
void SaleCompanyInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SaleCompanyInfo(";
  out << "strID="; (__isset.strID ? (out << to_string(strID)) : (out << "<null>"));
  out << ", " << "strName="; (__isset.strName ? (out << to_string(strName)) : (out << "<null>"));
  out << ", " << "strEmail="; (__isset.strEmail ? (out << to_string(strEmail)) : (out << "<null>"));
  out << ", " << "strPhone="; (__isset.strPhone ? (out << to_string(strPhone)) : (out << "<null>"));
  out << ", " << "strBackReceiver="; (__isset.strBackReceiver ? (out << to_string(strBackReceiver)) : (out << "<null>"));
  out << ", " << "strBackPhone="; (__isset.strBackPhone ? (out << to_string(strBackPhone)) : (out << "<null>"));
  out << ", " << "strExtend="; (__isset.strExtend ? (out << to_string(strExtend)) : (out << "<null>"));
  out << ")";
}


ProductProperty::~ProductProperty() throw() {
}


void ProductProperty::__set_strID(const std::string& val) {
  this->strID = val;
__isset.strID = true;
}

void ProductProperty::__set_strPdtID(const std::string& val) {
  this->strPdtID = val;
__isset.strPdtID = true;
}

void ProductProperty::__set_iType(const int32_t val) {
  this->iType = val;
__isset.iType = true;
}

void ProductProperty::__set_strName(const std::string& val) {
  this->strName = val;
__isset.strName = true;
}

void ProductProperty::__set_strValue(const std::string& val) {
  this->strValue = val;
__isset.strValue = true;
}

void ProductProperty::__set_strExtend(const std::string& val) {
  this->strExtend = val;
__isset.strExtend = true;
}
std::ostream& operator<<(std::ostream& out, const ProductProperty& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProductProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strID);
          this->__isset.strID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strPdtID);
          this->__isset.strPdtID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iType);
          this->__isset.iType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strName);
          this->__isset.strName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strValue);
          this->__isset.strValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strExtend);
          this->__isset.strExtend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductProperty");

  if (this->__isset.strID) {
    xfer += oprot->writeFieldBegin("strID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->strID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strPdtID) {
    xfer += oprot->writeFieldBegin("strPdtID", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strPdtID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.iType) {
    xfer += oprot->writeFieldBegin("iType", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->iType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strName) {
    xfer += oprot->writeFieldBegin("strName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->strName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strValue) {
    xfer += oprot->writeFieldBegin("strValue", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->strValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strExtend) {
    xfer += oprot->writeFieldBegin("strExtend", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->strExtend);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductProperty &a, ProductProperty &b) {
  using ::std::swap;
  swap(a.strID, b.strID);
  swap(a.strPdtID, b.strPdtID);
  swap(a.iType, b.iType);
  swap(a.strName, b.strName);
  swap(a.strValue, b.strValue);
  swap(a.strExtend, b.strExtend);
  swap(a.__isset, b.__isset);
}

ProductProperty::ProductProperty(const ProductProperty& other4) {
  strID = other4.strID;
  strPdtID = other4.strPdtID;
  iType = other4.iType;
  strName = other4.strName;
  strValue = other4.strValue;
  strExtend = other4.strExtend;
  __isset = other4.__isset;
}
ProductProperty& ProductProperty::operator=(const ProductProperty& other5) {
  strID = other5.strID;
  strPdtID = other5.strPdtID;
  iType = other5.iType;
  strName = other5.strName;
  strValue = other5.strValue;
  strExtend = other5.strExtend;
  __isset = other5.__isset;
  return *this;
}
void ProductProperty::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductProperty(";
  out << "strID="; (__isset.strID ? (out << to_string(strID)) : (out << "<null>"));
  out << ", " << "strPdtID="; (__isset.strPdtID ? (out << to_string(strPdtID)) : (out << "<null>"));
  out << ", " << "iType="; (__isset.iType ? (out << to_string(iType)) : (out << "<null>"));
  out << ", " << "strName="; (__isset.strName ? (out << to_string(strName)) : (out << "<null>"));
  out << ", " << "strValue="; (__isset.strValue ? (out << to_string(strValue)) : (out << "<null>"));
  out << ", " << "strExtend="; (__isset.strExtend ? (out << to_string(strExtend)) : (out << "<null>"));
  out << ")";
}


ProductInfo::~ProductInfo() throw() {
}


void ProductInfo::__set_strID(const std::string& val) {
  this->strID = val;
__isset.strID = true;
}

void ProductInfo::__set_strName(const std::string& val) {
  this->strName = val;
__isset.strName = true;
}

void ProductInfo::__set_iType(const int32_t val) {
  this->iType = val;
__isset.iType = true;
}

void ProductInfo::__set_strAliasName(const std::string& val) {
  this->strAliasName = val;
__isset.strAliasName = true;
}

void ProductInfo::__set_dlPrice(const double val) {
  this->dlPrice = val;
__isset.dlPrice = true;
}

void ProductInfo::__set_strPic(const std::string& val) {
  this->strPic = val;
__isset.strPic = true;
}

void ProductInfo::__set_strExtend(const std::string& val) {
  this->strExtend = val;
__isset.strExtend = true;
}

void ProductInfo::__set_pptList(const std::vector<ProductProperty> & val) {
  this->pptList = val;
}
std::ostream& operator<<(std::ostream& out, const ProductInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProductInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strID);
          this->__isset.strID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strName);
          this->__isset.strName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iType);
          this->__isset.iType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strAliasName);
          this->__isset.strAliasName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dlPrice);
          this->__isset.dlPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strPic);
          this->__isset.strPic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strExtend);
          this->__isset.strExtend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pptList.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->pptList.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->pptList[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pptList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProductInfo");

  if (this->__isset.strID) {
    xfer += oprot->writeFieldBegin("strID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->strID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strName) {
    xfer += oprot->writeFieldBegin("strName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.iType) {
    xfer += oprot->writeFieldBegin("iType", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->iType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strAliasName) {
    xfer += oprot->writeFieldBegin("strAliasName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->strAliasName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dlPrice) {
    xfer += oprot->writeFieldBegin("dlPrice", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->dlPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strPic) {
    xfer += oprot->writeFieldBegin("strPic", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->strPic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strExtend) {
    xfer += oprot->writeFieldBegin("strExtend", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->strExtend);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("pptList", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pptList.size()));
    std::vector<ProductProperty> ::const_iterator _iter11;
    for (_iter11 = this->pptList.begin(); _iter11 != this->pptList.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductInfo &a, ProductInfo &b) {
  using ::std::swap;
  swap(a.strID, b.strID);
  swap(a.strName, b.strName);
  swap(a.iType, b.iType);
  swap(a.strAliasName, b.strAliasName);
  swap(a.dlPrice, b.dlPrice);
  swap(a.strPic, b.strPic);
  swap(a.strExtend, b.strExtend);
  swap(a.pptList, b.pptList);
  swap(a.__isset, b.__isset);
}

ProductInfo::ProductInfo(const ProductInfo& other12) {
  strID = other12.strID;
  strName = other12.strName;
  iType = other12.iType;
  strAliasName = other12.strAliasName;
  dlPrice = other12.dlPrice;
  strPic = other12.strPic;
  strExtend = other12.strExtend;
  pptList = other12.pptList;
  __isset = other12.__isset;
}
ProductInfo& ProductInfo::operator=(const ProductInfo& other13) {
  strID = other13.strID;
  strName = other13.strName;
  iType = other13.iType;
  strAliasName = other13.strAliasName;
  dlPrice = other13.dlPrice;
  strPic = other13.strPic;
  strExtend = other13.strExtend;
  pptList = other13.pptList;
  __isset = other13.__isset;
  return *this;
}
void ProductInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProductInfo(";
  out << "strID="; (__isset.strID ? (out << to_string(strID)) : (out << "<null>"));
  out << ", " << "strName="; (__isset.strName ? (out << to_string(strName)) : (out << "<null>"));
  out << ", " << "iType="; (__isset.iType ? (out << to_string(iType)) : (out << "<null>"));
  out << ", " << "strAliasName="; (__isset.strAliasName ? (out << to_string(strAliasName)) : (out << "<null>"));
  out << ", " << "dlPrice="; (__isset.dlPrice ? (out << to_string(dlPrice)) : (out << "<null>"));
  out << ", " << "strPic="; (__isset.strPic ? (out << to_string(strPic)) : (out << "<null>"));
  out << ", " << "strExtend="; (__isset.strExtend ? (out << to_string(strExtend)) : (out << "<null>"));
  out << ", " << "pptList=" << to_string(pptList);
  out << ")";
}


OrderDetail::~OrderDetail() throw() {
}


void OrderDetail::__set_strID(const std::string& val) {
  this->strID = val;
__isset.strID = true;
}

void OrderDetail::__set_strOrdID(const std::string& val) {
  this->strOrdID = val;
__isset.strOrdID = true;
}

void OrderDetail::__set_strPdtID(const std::string& val) {
  this->strPdtID = val;
__isset.strPdtID = true;
}

void OrderDetail::__set_iNumber(const int32_t val) {
  this->iNumber = val;
__isset.iNumber = true;
}

void OrderDetail::__set_dlPrice(const double val) {
  this->dlPrice = val;
__isset.dlPrice = true;
}

void OrderDetail::__set_dlTotalPrice(const double val) {
  this->dlTotalPrice = val;
__isset.dlTotalPrice = true;
}

void OrderDetail::__set_strExtend(const std::string& val) {
  this->strExtend = val;
__isset.strExtend = true;
}
std::ostream& operator<<(std::ostream& out, const OrderDetail& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OrderDetail::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strID);
          this->__isset.strID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strOrdID);
          this->__isset.strOrdID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strPdtID);
          this->__isset.strPdtID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iNumber);
          this->__isset.iNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dlPrice);
          this->__isset.dlPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dlTotalPrice);
          this->__isset.dlTotalPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strExtend);
          this->__isset.strExtend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderDetail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OrderDetail");

  if (this->__isset.strID) {
    xfer += oprot->writeFieldBegin("strID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->strID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strOrdID) {
    xfer += oprot->writeFieldBegin("strOrdID", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strOrdID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strPdtID) {
    xfer += oprot->writeFieldBegin("strPdtID", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->strPdtID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.iNumber) {
    xfer += oprot->writeFieldBegin("iNumber", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->iNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dlPrice) {
    xfer += oprot->writeFieldBegin("dlPrice", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->dlPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dlTotalPrice) {
    xfer += oprot->writeFieldBegin("dlTotalPrice", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->dlTotalPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strExtend) {
    xfer += oprot->writeFieldBegin("strExtend", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->strExtend);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderDetail &a, OrderDetail &b) {
  using ::std::swap;
  swap(a.strID, b.strID);
  swap(a.strOrdID, b.strOrdID);
  swap(a.strPdtID, b.strPdtID);
  swap(a.iNumber, b.iNumber);
  swap(a.dlPrice, b.dlPrice);
  swap(a.dlTotalPrice, b.dlTotalPrice);
  swap(a.strExtend, b.strExtend);
  swap(a.__isset, b.__isset);
}

OrderDetail::OrderDetail(const OrderDetail& other14) {
  strID = other14.strID;
  strOrdID = other14.strOrdID;
  strPdtID = other14.strPdtID;
  iNumber = other14.iNumber;
  dlPrice = other14.dlPrice;
  dlTotalPrice = other14.dlTotalPrice;
  strExtend = other14.strExtend;
  __isset = other14.__isset;
}
OrderDetail& OrderDetail::operator=(const OrderDetail& other15) {
  strID = other15.strID;
  strOrdID = other15.strOrdID;
  strPdtID = other15.strPdtID;
  iNumber = other15.iNumber;
  dlPrice = other15.dlPrice;
  dlTotalPrice = other15.dlTotalPrice;
  strExtend = other15.strExtend;
  __isset = other15.__isset;
  return *this;
}
void OrderDetail::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OrderDetail(";
  out << "strID="; (__isset.strID ? (out << to_string(strID)) : (out << "<null>"));
  out << ", " << "strOrdID="; (__isset.strOrdID ? (out << to_string(strOrdID)) : (out << "<null>"));
  out << ", " << "strPdtID="; (__isset.strPdtID ? (out << to_string(strPdtID)) : (out << "<null>"));
  out << ", " << "iNumber="; (__isset.iNumber ? (out << to_string(iNumber)) : (out << "<null>"));
  out << ", " << "dlPrice="; (__isset.dlPrice ? (out << to_string(dlPrice)) : (out << "<null>"));
  out << ", " << "dlTotalPrice="; (__isset.dlTotalPrice ? (out << to_string(dlTotalPrice)) : (out << "<null>"));
  out << ", " << "strExtend="; (__isset.strExtend ? (out << to_string(strExtend)) : (out << "<null>"));
  out << ")";
}


OrderInfo::~OrderInfo() throw() {
}


void OrderInfo::__set_strID(const std::string& val) {
  this->strID = val;
__isset.strID = true;
}

void OrderInfo::__set_strName(const std::string& val) {
  this->strName = val;
__isset.strName = true;
}

void OrderInfo::__set_iType(const int32_t val) {
  this->iType = val;
__isset.iType = true;
}

void OrderInfo::__set_strUserID(const std::string& val) {
  this->strUserID = val;
__isset.strUserID = true;
}

void OrderInfo::__set_dlTotalPrice(const double val) {
  this->dlTotalPrice = val;
__isset.dlTotalPrice = true;
}

void OrderInfo::__set_iOrdStatus(const int32_t val) {
  this->iOrdStatus = val;
__isset.iOrdStatus = true;
}

void OrderInfo::__set_strExpressInfo(const std::string& val) {
  this->strExpressInfo = val;
__isset.strExpressInfo = true;
}

void OrderInfo::__set_strHisOrdStatus(const std::string& val) {
  this->strHisOrdStatus = val;
__isset.strHisOrdStatus = true;
}

void OrderInfo::__set_strAddress(const std::string& val) {
  this->strAddress = val;
__isset.strAddress = true;
}

void OrderInfo::__set_strReceiver(const std::string& val) {
  this->strReceiver = val;
__isset.strReceiver = true;
}

void OrderInfo::__set_strPhone(const std::string& val) {
  this->strPhone = val;
__isset.strPhone = true;
}

void OrderInfo::__set_strBackReceiver(const std::string& val) {
  this->strBackReceiver = val;
__isset.strBackReceiver = true;
}

void OrderInfo::__set_strBackPhone(const std::string& val) {
  this->strBackPhone = val;
__isset.strBackPhone = true;
}

void OrderInfo::__set_strBackExpressInfo(const std::string& val) {
  this->strBackExpressInfo = val;
__isset.strBackExpressInfo = true;
}

void OrderInfo::__set_strCreateDate(const std::string& val) {
  this->strCreateDate = val;
__isset.strCreateDate = true;
}

void OrderInfo::__set_strExtend(const std::string& val) {
  this->strExtend = val;
__isset.strExtend = true;
}

void OrderInfo::__set_orddtList(const std::vector<OrderDetail> & val) {
  this->orddtList = val;
}
std::ostream& operator<<(std::ostream& out, const OrderInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OrderInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strID);
          this->__isset.strID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strName);
          this->__isset.strName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iType);
          this->__isset.iType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strUserID);
          this->__isset.strUserID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dlTotalPrice);
          this->__isset.dlTotalPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iOrdStatus);
          this->__isset.iOrdStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strExpressInfo);
          this->__isset.strExpressInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strHisOrdStatus);
          this->__isset.strHisOrdStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strAddress);
          this->__isset.strAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strReceiver);
          this->__isset.strReceiver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strPhone);
          this->__isset.strPhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strBackReceiver);
          this->__isset.strBackReceiver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strBackPhone);
          this->__isset.strBackPhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strBackExpressInfo);
          this->__isset.strBackExpressInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strCreateDate);
          this->__isset.strCreateDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strExtend);
          this->__isset.strExtend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->orddtList.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->orddtList.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += this->orddtList[_i20].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.orddtList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OrderInfo");

  if (this->__isset.strID) {
    xfer += oprot->writeFieldBegin("strID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->strID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strName) {
    xfer += oprot->writeFieldBegin("strName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.iType) {
    xfer += oprot->writeFieldBegin("iType", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->iType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strUserID) {
    xfer += oprot->writeFieldBegin("strUserID", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->strUserID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dlTotalPrice) {
    xfer += oprot->writeFieldBegin("dlTotalPrice", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->dlTotalPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.iOrdStatus) {
    xfer += oprot->writeFieldBegin("iOrdStatus", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->iOrdStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strExpressInfo) {
    xfer += oprot->writeFieldBegin("strExpressInfo", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->strExpressInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strHisOrdStatus) {
    xfer += oprot->writeFieldBegin("strHisOrdStatus", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->strHisOrdStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strAddress) {
    xfer += oprot->writeFieldBegin("strAddress", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->strAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strReceiver) {
    xfer += oprot->writeFieldBegin("strReceiver", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->strReceiver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strPhone) {
    xfer += oprot->writeFieldBegin("strPhone", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->strPhone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strBackReceiver) {
    xfer += oprot->writeFieldBegin("strBackReceiver", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->strBackReceiver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strBackPhone) {
    xfer += oprot->writeFieldBegin("strBackPhone", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->strBackPhone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strBackExpressInfo) {
    xfer += oprot->writeFieldBegin("strBackExpressInfo", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->strBackExpressInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strCreateDate) {
    xfer += oprot->writeFieldBegin("strCreateDate", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->strCreateDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strExtend) {
    xfer += oprot->writeFieldBegin("strExtend", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->strExtend);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("orddtList", ::apache::thrift::protocol::T_LIST, 17);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->orddtList.size()));
    std::vector<OrderDetail> ::const_iterator _iter21;
    for (_iter21 = this->orddtList.begin(); _iter21 != this->orddtList.end(); ++_iter21)
    {
      xfer += (*_iter21).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderInfo &a, OrderInfo &b) {
  using ::std::swap;
  swap(a.strID, b.strID);
  swap(a.strName, b.strName);
  swap(a.iType, b.iType);
  swap(a.strUserID, b.strUserID);
  swap(a.dlTotalPrice, b.dlTotalPrice);
  swap(a.iOrdStatus, b.iOrdStatus);
  swap(a.strExpressInfo, b.strExpressInfo);
  swap(a.strHisOrdStatus, b.strHisOrdStatus);
  swap(a.strAddress, b.strAddress);
  swap(a.strReceiver, b.strReceiver);
  swap(a.strPhone, b.strPhone);
  swap(a.strBackReceiver, b.strBackReceiver);
  swap(a.strBackPhone, b.strBackPhone);
  swap(a.strBackExpressInfo, b.strBackExpressInfo);
  swap(a.strCreateDate, b.strCreateDate);
  swap(a.strExtend, b.strExtend);
  swap(a.orddtList, b.orddtList);
  swap(a.__isset, b.__isset);
}

OrderInfo::OrderInfo(const OrderInfo& other22) {
  strID = other22.strID;
  strName = other22.strName;
  iType = other22.iType;
  strUserID = other22.strUserID;
  dlTotalPrice = other22.dlTotalPrice;
  iOrdStatus = other22.iOrdStatus;
  strExpressInfo = other22.strExpressInfo;
  strHisOrdStatus = other22.strHisOrdStatus;
  strAddress = other22.strAddress;
  strReceiver = other22.strReceiver;
  strPhone = other22.strPhone;
  strBackReceiver = other22.strBackReceiver;
  strBackPhone = other22.strBackPhone;
  strBackExpressInfo = other22.strBackExpressInfo;
  strCreateDate = other22.strCreateDate;
  strExtend = other22.strExtend;
  orddtList = other22.orddtList;
  __isset = other22.__isset;
}
OrderInfo& OrderInfo::operator=(const OrderInfo& other23) {
  strID = other23.strID;
  strName = other23.strName;
  iType = other23.iType;
  strUserID = other23.strUserID;
  dlTotalPrice = other23.dlTotalPrice;
  iOrdStatus = other23.iOrdStatus;
  strExpressInfo = other23.strExpressInfo;
  strHisOrdStatus = other23.strHisOrdStatus;
  strAddress = other23.strAddress;
  strReceiver = other23.strReceiver;
  strPhone = other23.strPhone;
  strBackReceiver = other23.strBackReceiver;
  strBackPhone = other23.strBackPhone;
  strBackExpressInfo = other23.strBackExpressInfo;
  strCreateDate = other23.strCreateDate;
  strExtend = other23.strExtend;
  orddtList = other23.orddtList;
  __isset = other23.__isset;
  return *this;
}
void OrderInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OrderInfo(";
  out << "strID="; (__isset.strID ? (out << to_string(strID)) : (out << "<null>"));
  out << ", " << "strName="; (__isset.strName ? (out << to_string(strName)) : (out << "<null>"));
  out << ", " << "iType="; (__isset.iType ? (out << to_string(iType)) : (out << "<null>"));
  out << ", " << "strUserID="; (__isset.strUserID ? (out << to_string(strUserID)) : (out << "<null>"));
  out << ", " << "dlTotalPrice="; (__isset.dlTotalPrice ? (out << to_string(dlTotalPrice)) : (out << "<null>"));
  out << ", " << "iOrdStatus="; (__isset.iOrdStatus ? (out << to_string(iOrdStatus)) : (out << "<null>"));
  out << ", " << "strExpressInfo="; (__isset.strExpressInfo ? (out << to_string(strExpressInfo)) : (out << "<null>"));
  out << ", " << "strHisOrdStatus="; (__isset.strHisOrdStatus ? (out << to_string(strHisOrdStatus)) : (out << "<null>"));
  out << ", " << "strAddress="; (__isset.strAddress ? (out << to_string(strAddress)) : (out << "<null>"));
  out << ", " << "strReceiver="; (__isset.strReceiver ? (out << to_string(strReceiver)) : (out << "<null>"));
  out << ", " << "strPhone="; (__isset.strPhone ? (out << to_string(strPhone)) : (out << "<null>"));
  out << ", " << "strBackReceiver="; (__isset.strBackReceiver ? (out << to_string(strBackReceiver)) : (out << "<null>"));
  out << ", " << "strBackPhone="; (__isset.strBackPhone ? (out << to_string(strBackPhone)) : (out << "<null>"));
  out << ", " << "strBackExpressInfo="; (__isset.strBackExpressInfo ? (out << to_string(strBackExpressInfo)) : (out << "<null>"));
  out << ", " << "strCreateDate="; (__isset.strCreateDate ? (out << to_string(strCreateDate)) : (out << "<null>"));
  out << ", " << "strExtend="; (__isset.strExtend ? (out << to_string(strExtend)) : (out << "<null>"));
  out << ", " << "orddtList=" << to_string(orddtList);
  out << ")";
}


AddProductRT::~AddProductRT() throw() {
}


void AddProductRT::__set_rtcode(const ProductRTInfo& val) {
  this->rtcode = val;
__isset.rtcode = true;
}

void AddProductRT::__set_strPdtID(const std::string& val) {
  this->strPdtID = val;
__isset.strPdtID = true;
}
std::ostream& operator<<(std::ostream& out, const AddProductRT& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddProductRT::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rtcode.read(iprot);
          this->__isset.rtcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strPdtID);
          this->__isset.strPdtID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddProductRT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddProductRT");

  if (this->__isset.rtcode) {
    xfer += oprot->writeFieldBegin("rtcode", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->rtcode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strPdtID) {
    xfer += oprot->writeFieldBegin("strPdtID", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strPdtID);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddProductRT &a, AddProductRT &b) {
  using ::std::swap;
  swap(a.rtcode, b.rtcode);
  swap(a.strPdtID, b.strPdtID);
  swap(a.__isset, b.__isset);
}

AddProductRT::AddProductRT(const AddProductRT& other24) {
  rtcode = other24.rtcode;
  strPdtID = other24.strPdtID;
  __isset = other24.__isset;
}
AddProductRT& AddProductRT::operator=(const AddProductRT& other25) {
  rtcode = other25.rtcode;
  strPdtID = other25.strPdtID;
  __isset = other25.__isset;
  return *this;
}
void AddProductRT::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddProductRT(";
  out << "rtcode="; (__isset.rtcode ? (out << to_string(rtcode)) : (out << "<null>"));
  out << ", " << "strPdtID="; (__isset.strPdtID ? (out << to_string(strPdtID)) : (out << "<null>"));
  out << ")";
}


QueryProductRT::~QueryProductRT() throw() {
}


void QueryProductRT::__set_rtcode(const ProductRTInfo& val) {
  this->rtcode = val;
__isset.rtcode = true;
}

void QueryProductRT::__set_pdt(const ProductInfo& val) {
  this->pdt = val;
__isset.pdt = true;
}
std::ostream& operator<<(std::ostream& out, const QueryProductRT& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryProductRT::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rtcode.read(iprot);
          this->__isset.rtcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pdt.read(iprot);
          this->__isset.pdt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryProductRT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryProductRT");

  if (this->__isset.rtcode) {
    xfer += oprot->writeFieldBegin("rtcode", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->rtcode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pdt) {
    xfer += oprot->writeFieldBegin("pdt", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->pdt.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryProductRT &a, QueryProductRT &b) {
  using ::std::swap;
  swap(a.rtcode, b.rtcode);
  swap(a.pdt, b.pdt);
  swap(a.__isset, b.__isset);
}

QueryProductRT::QueryProductRT(const QueryProductRT& other26) {
  rtcode = other26.rtcode;
  pdt = other26.pdt;
  __isset = other26.__isset;
}
QueryProductRT& QueryProductRT::operator=(const QueryProductRT& other27) {
  rtcode = other27.rtcode;
  pdt = other27.pdt;
  __isset = other27.__isset;
  return *this;
}
void QueryProductRT::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryProductRT(";
  out << "rtcode="; (__isset.rtcode ? (out << to_string(rtcode)) : (out << "<null>"));
  out << ", " << "pdt="; (__isset.pdt ? (out << to_string(pdt)) : (out << "<null>"));
  out << ")";
}


QueryAllProductRT::~QueryAllProductRT() throw() {
}


void QueryAllProductRT::__set_rtcode(const ProductRTInfo& val) {
  this->rtcode = val;
__isset.rtcode = true;
}

void QueryAllProductRT::__set_pdtlist(const std::vector<ProductInfo> & val) {
  this->pdtlist = val;
__isset.pdtlist = true;
}
std::ostream& operator<<(std::ostream& out, const QueryAllProductRT& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryAllProductRT::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rtcode.read(iprot);
          this->__isset.rtcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pdtlist.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->pdtlist.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->pdtlist[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pdtlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryAllProductRT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryAllProductRT");

  if (this->__isset.rtcode) {
    xfer += oprot->writeFieldBegin("rtcode", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->rtcode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pdtlist) {
    xfer += oprot->writeFieldBegin("pdtlist", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pdtlist.size()));
      std::vector<ProductInfo> ::const_iterator _iter33;
      for (_iter33 = this->pdtlist.begin(); _iter33 != this->pdtlist.end(); ++_iter33)
      {
        xfer += (*_iter33).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryAllProductRT &a, QueryAllProductRT &b) {
  using ::std::swap;
  swap(a.rtcode, b.rtcode);
  swap(a.pdtlist, b.pdtlist);
  swap(a.__isset, b.__isset);
}

QueryAllProductRT::QueryAllProductRT(const QueryAllProductRT& other34) {
  rtcode = other34.rtcode;
  pdtlist = other34.pdtlist;
  __isset = other34.__isset;
}
QueryAllProductRT& QueryAllProductRT::operator=(const QueryAllProductRT& other35) {
  rtcode = other35.rtcode;
  pdtlist = other35.pdtlist;
  __isset = other35.__isset;
  return *this;
}
void QueryAllProductRT::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryAllProductRT(";
  out << "rtcode="; (__isset.rtcode ? (out << to_string(rtcode)) : (out << "<null>"));
  out << ", " << "pdtlist="; (__isset.pdtlist ? (out << to_string(pdtlist)) : (out << "<null>"));
  out << ")";
}


AddProductPropertyRT::~AddProductPropertyRT() throw() {
}


void AddProductPropertyRT::__set_rtcode(const ProductRTInfo& val) {
  this->rtcode = val;
__isset.rtcode = true;
}

void AddProductPropertyRT::__set_strPdtpptID(const std::string& val) {
  this->strPdtpptID = val;
__isset.strPdtpptID = true;
}
std::ostream& operator<<(std::ostream& out, const AddProductPropertyRT& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddProductPropertyRT::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rtcode.read(iprot);
          this->__isset.rtcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strPdtpptID);
          this->__isset.strPdtpptID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddProductPropertyRT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddProductPropertyRT");

  if (this->__isset.rtcode) {
    xfer += oprot->writeFieldBegin("rtcode", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->rtcode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strPdtpptID) {
    xfer += oprot->writeFieldBegin("strPdtpptID", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strPdtpptID);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddProductPropertyRT &a, AddProductPropertyRT &b) {
  using ::std::swap;
  swap(a.rtcode, b.rtcode);
  swap(a.strPdtpptID, b.strPdtpptID);
  swap(a.__isset, b.__isset);
}

AddProductPropertyRT::AddProductPropertyRT(const AddProductPropertyRT& other36) {
  rtcode = other36.rtcode;
  strPdtpptID = other36.strPdtpptID;
  __isset = other36.__isset;
}
AddProductPropertyRT& AddProductPropertyRT::operator=(const AddProductPropertyRT& other37) {
  rtcode = other37.rtcode;
  strPdtpptID = other37.strPdtpptID;
  __isset = other37.__isset;
  return *this;
}
void AddProductPropertyRT::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddProductPropertyRT(";
  out << "rtcode="; (__isset.rtcode ? (out << to_string(rtcode)) : (out << "<null>"));
  out << ", " << "strPdtpptID="; (__isset.strPdtpptID ? (out << to_string(strPdtpptID)) : (out << "<null>"));
  out << ")";
}


AddOrdRT::~AddOrdRT() throw() {
}


void AddOrdRT::__set_rtcode(const ProductRTInfo& val) {
  this->rtcode = val;
__isset.rtcode = true;
}

void AddOrdRT::__set_strOrdID(const std::string& val) {
  this->strOrdID = val;
__isset.strOrdID = true;
}
std::ostream& operator<<(std::ostream& out, const AddOrdRT& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddOrdRT::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rtcode.read(iprot);
          this->__isset.rtcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strOrdID);
          this->__isset.strOrdID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddOrdRT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddOrdRT");

  if (this->__isset.rtcode) {
    xfer += oprot->writeFieldBegin("rtcode", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->rtcode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strOrdID) {
    xfer += oprot->writeFieldBegin("strOrdID", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->strOrdID);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddOrdRT &a, AddOrdRT &b) {
  using ::std::swap;
  swap(a.rtcode, b.rtcode);
  swap(a.strOrdID, b.strOrdID);
  swap(a.__isset, b.__isset);
}

AddOrdRT::AddOrdRT(const AddOrdRT& other38) {
  rtcode = other38.rtcode;
  strOrdID = other38.strOrdID;
  __isset = other38.__isset;
}
AddOrdRT& AddOrdRT::operator=(const AddOrdRT& other39) {
  rtcode = other39.rtcode;
  strOrdID = other39.strOrdID;
  __isset = other39.__isset;
  return *this;
}
void AddOrdRT::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddOrdRT(";
  out << "rtcode="; (__isset.rtcode ? (out << to_string(rtcode)) : (out << "<null>"));
  out << ", " << "strOrdID="; (__isset.strOrdID ? (out << to_string(strOrdID)) : (out << "<null>"));
  out << ")";
}


QueryOrdRT::~QueryOrdRT() throw() {
}


void QueryOrdRT::__set_rtcode(const ProductRTInfo& val) {
  this->rtcode = val;
__isset.rtcode = true;
}

void QueryOrdRT::__set_ord(const OrderInfo& val) {
  this->ord = val;
__isset.ord = true;
}
std::ostream& operator<<(std::ostream& out, const QueryOrdRT& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryOrdRT::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rtcode.read(iprot);
          this->__isset.rtcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ord.read(iprot);
          this->__isset.ord = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryOrdRT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryOrdRT");

  if (this->__isset.rtcode) {
    xfer += oprot->writeFieldBegin("rtcode", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->rtcode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ord) {
    xfer += oprot->writeFieldBegin("ord", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ord.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryOrdRT &a, QueryOrdRT &b) {
  using ::std::swap;
  swap(a.rtcode, b.rtcode);
  swap(a.ord, b.ord);
  swap(a.__isset, b.__isset);
}

QueryOrdRT::QueryOrdRT(const QueryOrdRT& other40) {
  rtcode = other40.rtcode;
  ord = other40.ord;
  __isset = other40.__isset;
}
QueryOrdRT& QueryOrdRT::operator=(const QueryOrdRT& other41) {
  rtcode = other41.rtcode;
  ord = other41.ord;
  __isset = other41.__isset;
  return *this;
}
void QueryOrdRT::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryOrdRT(";
  out << "rtcode="; (__isset.rtcode ? (out << to_string(rtcode)) : (out << "<null>"));
  out << ", " << "ord="; (__isset.ord ? (out << to_string(ord)) : (out << "<null>"));
  out << ")";
}


QueryAllOrdRT::~QueryAllOrdRT() throw() {
}


void QueryAllOrdRT::__set_rtcode(const ProductRTInfo& val) {
  this->rtcode = val;
__isset.rtcode = true;
}

void QueryAllOrdRT::__set_ordlist(const std::vector<OrderInfo> & val) {
  this->ordlist = val;
__isset.ordlist = true;
}
std::ostream& operator<<(std::ostream& out, const QueryAllOrdRT& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryAllOrdRT::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rtcode.read(iprot);
          this->__isset.rtcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ordlist.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->ordlist.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += this->ordlist[_i46].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ordlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryAllOrdRT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryAllOrdRT");

  if (this->__isset.rtcode) {
    xfer += oprot->writeFieldBegin("rtcode", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->rtcode.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ordlist) {
    xfer += oprot->writeFieldBegin("ordlist", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ordlist.size()));
      std::vector<OrderInfo> ::const_iterator _iter47;
      for (_iter47 = this->ordlist.begin(); _iter47 != this->ordlist.end(); ++_iter47)
      {
        xfer += (*_iter47).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryAllOrdRT &a, QueryAllOrdRT &b) {
  using ::std::swap;
  swap(a.rtcode, b.rtcode);
  swap(a.ordlist, b.ordlist);
  swap(a.__isset, b.__isset);
}

QueryAllOrdRT::QueryAllOrdRT(const QueryAllOrdRT& other48) {
  rtcode = other48.rtcode;
  ordlist = other48.ordlist;
  __isset = other48.__isset;
}
QueryAllOrdRT& QueryAllOrdRT::operator=(const QueryAllOrdRT& other49) {
  rtcode = other49.rtcode;
  ordlist = other49.ordlist;
  __isset = other49.__isset;
  return *this;
}
void QueryAllOrdRT::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryAllOrdRT(";
  out << "rtcode="; (__isset.rtcode ? (out << to_string(rtcode)) : (out << "<null>"));
  out << ", " << "ordlist="; (__isset.ordlist ? (out << to_string(ordlist)) : (out << "<null>"));
  out << ")";
}


QueryAllOrdParam::~QueryAllOrdParam() throw() {
}


void QueryAllOrdParam::__set_iType(const int32_t val) {
  this->iType = val;
__isset.iType = true;
}

void QueryAllOrdParam::__set_iOrdStatus(const int32_t val) {
  this->iOrdStatus = val;
__isset.iOrdStatus = true;
}

void QueryAllOrdParam::__set_strReceiver(const std::string& val) {
  this->strReceiver = val;
__isset.strReceiver = true;
}

void QueryAllOrdParam::__set_strPhone(const std::string& val) {
  this->strPhone = val;
__isset.strPhone = true;
}

void QueryAllOrdParam::__set_strPdtID(const std::string& val) {
  this->strPdtID = val;
__isset.strPdtID = true;
}

void QueryAllOrdParam::__set_strBeginDate(const std::string& val) {
  this->strBeginDate = val;
__isset.strBeginDate = true;
}

void QueryAllOrdParam::__set_strEndDate(const std::string& val) {
  this->strEndDate = val;
__isset.strEndDate = true;
}

void QueryAllOrdParam::__set_strBeginIndex(const std::string& val) {
  this->strBeginIndex = val;
__isset.strBeginIndex = true;
}
std::ostream& operator<<(std::ostream& out, const QueryAllOrdParam& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryAllOrdParam::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iType);
          this->__isset.iType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iOrdStatus);
          this->__isset.iOrdStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strReceiver);
          this->__isset.strReceiver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strPhone);
          this->__isset.strPhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strPdtID);
          this->__isset.strPdtID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strBeginDate);
          this->__isset.strBeginDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strEndDate);
          this->__isset.strEndDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strBeginIndex);
          this->__isset.strBeginIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryAllOrdParam::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryAllOrdParam");

  if (this->__isset.iType) {
    xfer += oprot->writeFieldBegin("iType", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->iType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.iOrdStatus) {
    xfer += oprot->writeFieldBegin("iOrdStatus", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->iOrdStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strReceiver) {
    xfer += oprot->writeFieldBegin("strReceiver", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->strReceiver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strPhone) {
    xfer += oprot->writeFieldBegin("strPhone", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->strPhone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strPdtID) {
    xfer += oprot->writeFieldBegin("strPdtID", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->strPdtID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strBeginDate) {
    xfer += oprot->writeFieldBegin("strBeginDate", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->strBeginDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strEndDate) {
    xfer += oprot->writeFieldBegin("strEndDate", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->strEndDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strBeginIndex) {
    xfer += oprot->writeFieldBegin("strBeginIndex", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->strBeginIndex);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryAllOrdParam &a, QueryAllOrdParam &b) {
  using ::std::swap;
  swap(a.iType, b.iType);
  swap(a.iOrdStatus, b.iOrdStatus);
  swap(a.strReceiver, b.strReceiver);
  swap(a.strPhone, b.strPhone);
  swap(a.strPdtID, b.strPdtID);
  swap(a.strBeginDate, b.strBeginDate);
  swap(a.strEndDate, b.strEndDate);
  swap(a.strBeginIndex, b.strBeginIndex);
  swap(a.__isset, b.__isset);
}

QueryAllOrdParam::QueryAllOrdParam(const QueryAllOrdParam& other50) {
  iType = other50.iType;
  iOrdStatus = other50.iOrdStatus;
  strReceiver = other50.strReceiver;
  strPhone = other50.strPhone;
  strPdtID = other50.strPdtID;
  strBeginDate = other50.strBeginDate;
  strEndDate = other50.strEndDate;
  strBeginIndex = other50.strBeginIndex;
  __isset = other50.__isset;
}
QueryAllOrdParam& QueryAllOrdParam::operator=(const QueryAllOrdParam& other51) {
  iType = other51.iType;
  iOrdStatus = other51.iOrdStatus;
  strReceiver = other51.strReceiver;
  strPhone = other51.strPhone;
  strPdtID = other51.strPdtID;
  strBeginDate = other51.strBeginDate;
  strEndDate = other51.strEndDate;
  strBeginIndex = other51.strBeginIndex;
  __isset = other51.__isset;
  return *this;
}
void QueryAllOrdParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryAllOrdParam(";
  out << "iType="; (__isset.iType ? (out << to_string(iType)) : (out << "<null>"));
  out << ", " << "iOrdStatus="; (__isset.iOrdStatus ? (out << to_string(iOrdStatus)) : (out << "<null>"));
  out << ", " << "strReceiver="; (__isset.strReceiver ? (out << to_string(strReceiver)) : (out << "<null>"));
  out << ", " << "strPhone="; (__isset.strPhone ? (out << to_string(strPhone)) : (out << "<null>"));
  out << ", " << "strPdtID="; (__isset.strPdtID ? (out << to_string(strPdtID)) : (out << "<null>"));
  out << ", " << "strBeginDate="; (__isset.strBeginDate ? (out << to_string(strBeginDate)) : (out << "<null>"));
  out << ", " << "strEndDate="; (__isset.strEndDate ? (out << to_string(strEndDate)) : (out << "<null>"));
  out << ", " << "strBeginIndex="; (__isset.strBeginIndex ? (out << to_string(strBeginIndex)) : (out << "<null>"));
  out << ")";
}

}} // namespace
