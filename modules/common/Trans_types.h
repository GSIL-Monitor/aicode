/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Trans_TYPES_H
#define Trans_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace Trans { namespace Service {

struct TReturnCode {
  enum type {
    Success = 0,
    Failed = 1
  };
};

extern const std::map<int, const char*> _TReturnCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TReturnCode::type& val);

class TReqInfo;

class TRspInfo;

class TReturnInfo;

typedef struct _TReqInfo__isset {
  _TReqInfo__isset() : req(false) {}
  bool req :1;
} _TReqInfo__isset;

class TReqInfo : public virtual ::apache::thrift::TBase {
 public:

  TReqInfo(const TReqInfo&);
  TReqInfo& operator=(const TReqInfo&);
  TReqInfo() : req() {
  }

  virtual ~TReqInfo() throw();
  std::string req;

  _TReqInfo__isset __isset;

  void __set_req(const std::string& val);

  bool operator == (const TReqInfo & rhs) const
  {
    if (__isset.req != rhs.__isset.req)
      return false;
    else if (__isset.req && !(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TReqInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TReqInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TReqInfo &a, TReqInfo &b);

std::ostream& operator<<(std::ostream& out, const TReqInfo& obj);

typedef struct _TRspInfo__isset {
  _TRspInfo__isset() : rsp(false) {}
  bool rsp :1;
} _TRspInfo__isset;

class TRspInfo : public virtual ::apache::thrift::TBase {
 public:

  TRspInfo(const TRspInfo&);
  TRspInfo& operator=(const TRspInfo&);
  TRspInfo() : rsp() {
  }

  virtual ~TRspInfo() throw();
  std::string rsp;

  _TRspInfo__isset __isset;

  void __set_rsp(const std::string& val);

  bool operator == (const TRspInfo & rhs) const
  {
    if (__isset.rsp != rhs.__isset.rsp)
      return false;
    else if (__isset.rsp && !(rsp == rhs.rsp))
      return false;
    return true;
  }
  bool operator != (const TRspInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRspInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRspInfo &a, TRspInfo &b);

std::ostream& operator<<(std::ostream& out, const TRspInfo& obj);

typedef struct _TReturnInfo__isset {
  _TReturnInfo__isset() : rtcode(false), rspinfo(false) {}
  bool rtcode :1;
  bool rspinfo :1;
} _TReturnInfo__isset;

class TReturnInfo : public virtual ::apache::thrift::TBase {
 public:

  TReturnInfo(const TReturnInfo&);
  TReturnInfo& operator=(const TReturnInfo&);
  TReturnInfo() : rtcode((TReturnCode::type)0) {
  }

  virtual ~TReturnInfo() throw();
  TReturnCode::type rtcode;
  TRspInfo rspinfo;

  _TReturnInfo__isset __isset;

  void __set_rtcode(const TReturnCode::type val);

  void __set_rspinfo(const TRspInfo& val);

  bool operator == (const TReturnInfo & rhs) const
  {
    if (__isset.rtcode != rhs.__isset.rtcode)
      return false;
    else if (__isset.rtcode && !(rtcode == rhs.rtcode))
      return false;
    if (__isset.rspinfo != rhs.__isset.rspinfo)
      return false;
    else if (__isset.rspinfo && !(rspinfo == rhs.rspinfo))
      return false;
    return true;
  }
  bool operator != (const TReturnInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TReturnInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TReturnInfo &a, TReturnInfo &b);

std::ostream& operator<<(std::ostream& out, const TReturnInfo& obj);

}} // namespace

#endif
