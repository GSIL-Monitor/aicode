/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Trans_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Trans { namespace Service {

int _kTReturnCodeValues[] = {
  TReturnCode::Success,
  TReturnCode::Failed
};
const char* _kTReturnCodeNames[] = {
  "Success",
  "Failed"
};
const std::map<int, const char*> _TReturnCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTReturnCodeValues, _kTReturnCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TReturnCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TReturnCode_VALUES_TO_NAMES.find(val);
  if (it != _TReturnCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TReqInfo::~TReqInfo() throw() {
}


void TReqInfo::__set_req(const std::string& val) {
  this->req = val;
__isset.req = true;
}
std::ostream& operator<<(std::ostream& out, const TReqInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TReqInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->req);
          this->__isset.req = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TReqInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TReqInfo");

  if (this->__isset.req) {
    xfer += oprot->writeFieldBegin("req", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeBinary(this->req);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TReqInfo &a, TReqInfo &b) {
  using ::std::swap;
  swap(a.req, b.req);
  swap(a.__isset, b.__isset);
}

TReqInfo::TReqInfo(const TReqInfo& other0) {
  req = other0.req;
  __isset = other0.__isset;
}
TReqInfo& TReqInfo::operator=(const TReqInfo& other1) {
  req = other1.req;
  __isset = other1.__isset;
  return *this;
}
void TReqInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TReqInfo(";
  out << "req="; (__isset.req ? (out << to_string(req)) : (out << "<null>"));
  out << ")";
}


TRspInfo::~TRspInfo() throw() {
}


void TRspInfo::__set_rsp(const std::string& val) {
  this->rsp = val;
__isset.rsp = true;
}
std::ostream& operator<<(std::ostream& out, const TRspInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TRspInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->rsp);
          this->__isset.rsp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TRspInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRspInfo");

  if (this->__isset.rsp) {
    xfer += oprot->writeFieldBegin("rsp", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeBinary(this->rsp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRspInfo &a, TRspInfo &b) {
  using ::std::swap;
  swap(a.rsp, b.rsp);
  swap(a.__isset, b.__isset);
}

TRspInfo::TRspInfo(const TRspInfo& other2) {
  rsp = other2.rsp;
  __isset = other2.__isset;
}
TRspInfo& TRspInfo::operator=(const TRspInfo& other3) {
  rsp = other3.rsp;
  __isset = other3.__isset;
  return *this;
}
void TRspInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRspInfo(";
  out << "rsp="; (__isset.rsp ? (out << to_string(rsp)) : (out << "<null>"));
  out << ")";
}


TReturnInfo::~TReturnInfo() throw() {
}


void TReturnInfo::__set_rtcode(const TReturnCode::type val) {
  this->rtcode = val;
__isset.rtcode = true;
}

void TReturnInfo::__set_rspinfo(const TRspInfo& val) {
  this->rspinfo = val;
__isset.rspinfo = true;
}
std::ostream& operator<<(std::ostream& out, const TReturnInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TReturnInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->rtcode = (TReturnCode::type)ecast4;
          this->__isset.rtcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rspinfo.read(iprot);
          this->__isset.rspinfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TReturnInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TReturnInfo");

  if (this->__isset.rtcode) {
    xfer += oprot->writeFieldBegin("rtcode", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->rtcode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rspinfo) {
    xfer += oprot->writeFieldBegin("rspinfo", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->rspinfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TReturnInfo &a, TReturnInfo &b) {
  using ::std::swap;
  swap(a.rtcode, b.rtcode);
  swap(a.rspinfo, b.rspinfo);
  swap(a.__isset, b.__isset);
}

TReturnInfo::TReturnInfo(const TReturnInfo& other5) {
  rtcode = other5.rtcode;
  rspinfo = other5.rspinfo;
  __isset = other5.__isset;
}
TReturnInfo& TReturnInfo::operator=(const TReturnInfo& other6) {
  rtcode = other6.rtcode;
  rspinfo = other6.rspinfo;
  __isset = other6.__isset;
  return *this;
}
void TReturnInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TReturnInfo(";
  out << "rtcode="; (__isset.rtcode ? (out << to_string(rtcode)) : (out << "<null>"));
  out << ", " << "rspinfo="; (__isset.rspinfo ? (out << to_string(rspinfo)) : (out << "<null>"));
  out << ")";
}

}} // namespace
