/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Product_TYPES_H
#define Product_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace Product { namespace Service {

class ProductRTInfo;

class SaleCompanyInfo;

class ProductProperty;

class ProductInfo;

class OrderDetail;

class OrderInfo;

class AddProductRT;

class QueryProductRT;

class QueryAllProductRT;

class AddProductPropertyRT;

class AddOrdRT;

class AddOrdDetailRT;

class QueryOrdRT;

class QueryAllOrdRT;

class QueryAllOrdParam;

typedef struct _ProductRTInfo__isset {
  _ProductRTInfo__isset() : iRtCode(true), strRtMsg(true) {}
  bool iRtCode :1;
  bool strRtMsg :1;
} _ProductRTInfo__isset;

class ProductRTInfo : public virtual ::apache::thrift::TBase {
 public:

  ProductRTInfo(const ProductRTInfo&);
  ProductRTInfo& operator=(const ProductRTInfo&);
  ProductRTInfo() : iRtCode(0), strRtMsg("Ok") {
  }

  virtual ~ProductRTInfo() throw();
  int32_t iRtCode;
  std::string strRtMsg;

  _ProductRTInfo__isset __isset;

  void __set_iRtCode(const int32_t val);

  void __set_strRtMsg(const std::string& val);

  bool operator == (const ProductRTInfo & rhs) const
  {
    if (__isset.iRtCode != rhs.__isset.iRtCode)
      return false;
    else if (__isset.iRtCode && !(iRtCode == rhs.iRtCode))
      return false;
    if (__isset.strRtMsg != rhs.__isset.strRtMsg)
      return false;
    else if (__isset.strRtMsg && !(strRtMsg == rhs.strRtMsg))
      return false;
    return true;
  }
  bool operator != (const ProductRTInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductRTInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductRTInfo &a, ProductRTInfo &b);

std::ostream& operator<<(std::ostream& out, const ProductRTInfo& obj);

typedef struct _SaleCompanyInfo__isset {
  _SaleCompanyInfo__isset() : strID(false), strName(false), strEmail(false), strPhone(false), strBackReceiver(false), strBackPhone(false), strExtend(false) {}
  bool strID :1;
  bool strName :1;
  bool strEmail :1;
  bool strPhone :1;
  bool strBackReceiver :1;
  bool strBackPhone :1;
  bool strExtend :1;
} _SaleCompanyInfo__isset;

class SaleCompanyInfo : public virtual ::apache::thrift::TBase {
 public:

  SaleCompanyInfo(const SaleCompanyInfo&);
  SaleCompanyInfo& operator=(const SaleCompanyInfo&);
  SaleCompanyInfo() : strID(), strName(), strEmail(), strPhone(), strBackReceiver(), strBackPhone(), strExtend() {
  }

  virtual ~SaleCompanyInfo() throw();
  std::string strID;
  std::string strName;
  std::string strEmail;
  std::string strPhone;
  std::string strBackReceiver;
  std::string strBackPhone;
  std::string strExtend;

  _SaleCompanyInfo__isset __isset;

  void __set_strID(const std::string& val);

  void __set_strName(const std::string& val);

  void __set_strEmail(const std::string& val);

  void __set_strPhone(const std::string& val);

  void __set_strBackReceiver(const std::string& val);

  void __set_strBackPhone(const std::string& val);

  void __set_strExtend(const std::string& val);

  bool operator == (const SaleCompanyInfo & rhs) const
  {
    if (__isset.strID != rhs.__isset.strID)
      return false;
    else if (__isset.strID && !(strID == rhs.strID))
      return false;
    if (__isset.strName != rhs.__isset.strName)
      return false;
    else if (__isset.strName && !(strName == rhs.strName))
      return false;
    if (__isset.strEmail != rhs.__isset.strEmail)
      return false;
    else if (__isset.strEmail && !(strEmail == rhs.strEmail))
      return false;
    if (__isset.strPhone != rhs.__isset.strPhone)
      return false;
    else if (__isset.strPhone && !(strPhone == rhs.strPhone))
      return false;
    if (__isset.strBackReceiver != rhs.__isset.strBackReceiver)
      return false;
    else if (__isset.strBackReceiver && !(strBackReceiver == rhs.strBackReceiver))
      return false;
    if (__isset.strBackPhone != rhs.__isset.strBackPhone)
      return false;
    else if (__isset.strBackPhone && !(strBackPhone == rhs.strBackPhone))
      return false;
    if (__isset.strExtend != rhs.__isset.strExtend)
      return false;
    else if (__isset.strExtend && !(strExtend == rhs.strExtend))
      return false;
    return true;
  }
  bool operator != (const SaleCompanyInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SaleCompanyInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SaleCompanyInfo &a, SaleCompanyInfo &b);

std::ostream& operator<<(std::ostream& out, const SaleCompanyInfo& obj);

typedef struct _ProductProperty__isset {
  _ProductProperty__isset() : strID(false), strPdtID(false), iType(false), strName(false), strValue(false), strExtend(false) {}
  bool strID :1;
  bool strPdtID :1;
  bool iType :1;
  bool strName :1;
  bool strValue :1;
  bool strExtend :1;
} _ProductProperty__isset;

class ProductProperty : public virtual ::apache::thrift::TBase {
 public:

  ProductProperty(const ProductProperty&);
  ProductProperty& operator=(const ProductProperty&);
  ProductProperty() : strID(), strPdtID(), iType(0), strName(), strValue(), strExtend() {
  }

  virtual ~ProductProperty() throw();
  std::string strID;
  std::string strPdtID;
  int32_t iType;
  std::string strName;
  std::string strValue;
  std::string strExtend;

  _ProductProperty__isset __isset;

  void __set_strID(const std::string& val);

  void __set_strPdtID(const std::string& val);

  void __set_iType(const int32_t val);

  void __set_strName(const std::string& val);

  void __set_strValue(const std::string& val);

  void __set_strExtend(const std::string& val);

  bool operator == (const ProductProperty & rhs) const
  {
    if (__isset.strID != rhs.__isset.strID)
      return false;
    else if (__isset.strID && !(strID == rhs.strID))
      return false;
    if (__isset.strPdtID != rhs.__isset.strPdtID)
      return false;
    else if (__isset.strPdtID && !(strPdtID == rhs.strPdtID))
      return false;
    if (__isset.iType != rhs.__isset.iType)
      return false;
    else if (__isset.iType && !(iType == rhs.iType))
      return false;
    if (__isset.strName != rhs.__isset.strName)
      return false;
    else if (__isset.strName && !(strName == rhs.strName))
      return false;
    if (__isset.strValue != rhs.__isset.strValue)
      return false;
    else if (__isset.strValue && !(strValue == rhs.strValue))
      return false;
    if (__isset.strExtend != rhs.__isset.strExtend)
      return false;
    else if (__isset.strExtend && !(strExtend == rhs.strExtend))
      return false;
    return true;
  }
  bool operator != (const ProductProperty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductProperty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductProperty &a, ProductProperty &b);

std::ostream& operator<<(std::ostream& out, const ProductProperty& obj);

typedef struct _ProductInfo__isset {
  _ProductInfo__isset() : strID(false), strName(false), iType(false), strTypeName(false), strAliasName(false), dlPrice(false), strPic(false), strExtend(false), pptList(false) {}
  bool strID :1;
  bool strName :1;
  bool iType :1;
  bool strTypeName :1;
  bool strAliasName :1;
  bool dlPrice :1;
  bool strPic :1;
  bool strExtend :1;
  bool pptList :1;
} _ProductInfo__isset;

class ProductInfo : public virtual ::apache::thrift::TBase {
 public:

  ProductInfo(const ProductInfo&);
  ProductInfo& operator=(const ProductInfo&);
  ProductInfo() : strID(), strName(), iType(0), strTypeName(), strAliasName(), dlPrice(0), strPic(), strExtend() {
  }

  virtual ~ProductInfo() throw();
  std::string strID;
  std::string strName;
  int32_t iType;
  std::string strTypeName;
  std::string strAliasName;
  double dlPrice;
  std::string strPic;
  std::string strExtend;
  std::vector<ProductProperty>  pptList;

  _ProductInfo__isset __isset;

  void __set_strID(const std::string& val);

  void __set_strName(const std::string& val);

  void __set_iType(const int32_t val);

  void __set_strTypeName(const std::string& val);

  void __set_strAliasName(const std::string& val);

  void __set_dlPrice(const double val);

  void __set_strPic(const std::string& val);

  void __set_strExtend(const std::string& val);

  void __set_pptList(const std::vector<ProductProperty> & val);

  bool operator == (const ProductInfo & rhs) const
  {
    if (__isset.strID != rhs.__isset.strID)
      return false;
    else if (__isset.strID && !(strID == rhs.strID))
      return false;
    if (__isset.strName != rhs.__isset.strName)
      return false;
    else if (__isset.strName && !(strName == rhs.strName))
      return false;
    if (__isset.iType != rhs.__isset.iType)
      return false;
    else if (__isset.iType && !(iType == rhs.iType))
      return false;
    if (__isset.strTypeName != rhs.__isset.strTypeName)
      return false;
    else if (__isset.strTypeName && !(strTypeName == rhs.strTypeName))
      return false;
    if (__isset.strAliasName != rhs.__isset.strAliasName)
      return false;
    else if (__isset.strAliasName && !(strAliasName == rhs.strAliasName))
      return false;
    if (__isset.dlPrice != rhs.__isset.dlPrice)
      return false;
    else if (__isset.dlPrice && !(dlPrice == rhs.dlPrice))
      return false;
    if (__isset.strPic != rhs.__isset.strPic)
      return false;
    else if (__isset.strPic && !(strPic == rhs.strPic))
      return false;
    if (__isset.strExtend != rhs.__isset.strExtend)
      return false;
    else if (__isset.strExtend && !(strExtend == rhs.strExtend))
      return false;
    if (!(pptList == rhs.pptList))
      return false;
    return true;
  }
  bool operator != (const ProductInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductInfo &a, ProductInfo &b);

std::ostream& operator<<(std::ostream& out, const ProductInfo& obj);

typedef struct _OrderDetail__isset {
  _OrderDetail__isset() : strID(false), strOrdID(false), strPdtID(false), iNumber(false), dlPrice(false), dlTotalPrice(false), strExtend(false) {}
  bool strID :1;
  bool strOrdID :1;
  bool strPdtID :1;
  bool iNumber :1;
  bool dlPrice :1;
  bool dlTotalPrice :1;
  bool strExtend :1;
} _OrderDetail__isset;

class OrderDetail : public virtual ::apache::thrift::TBase {
 public:

  OrderDetail(const OrderDetail&);
  OrderDetail& operator=(const OrderDetail&);
  OrderDetail() : strID(), strOrdID(), strPdtID(), iNumber(0), dlPrice(0), dlTotalPrice(0), strExtend() {
  }

  virtual ~OrderDetail() throw();
  std::string strID;
  std::string strOrdID;
  std::string strPdtID;
  int32_t iNumber;
  double dlPrice;
  double dlTotalPrice;
  std::string strExtend;

  _OrderDetail__isset __isset;

  void __set_strID(const std::string& val);

  void __set_strOrdID(const std::string& val);

  void __set_strPdtID(const std::string& val);

  void __set_iNumber(const int32_t val);

  void __set_dlPrice(const double val);

  void __set_dlTotalPrice(const double val);

  void __set_strExtend(const std::string& val);

  bool operator == (const OrderDetail & rhs) const
  {
    if (__isset.strID != rhs.__isset.strID)
      return false;
    else if (__isset.strID && !(strID == rhs.strID))
      return false;
    if (__isset.strOrdID != rhs.__isset.strOrdID)
      return false;
    else if (__isset.strOrdID && !(strOrdID == rhs.strOrdID))
      return false;
    if (__isset.strPdtID != rhs.__isset.strPdtID)
      return false;
    else if (__isset.strPdtID && !(strPdtID == rhs.strPdtID))
      return false;
    if (__isset.iNumber != rhs.__isset.iNumber)
      return false;
    else if (__isset.iNumber && !(iNumber == rhs.iNumber))
      return false;
    if (__isset.dlPrice != rhs.__isset.dlPrice)
      return false;
    else if (__isset.dlPrice && !(dlPrice == rhs.dlPrice))
      return false;
    if (__isset.dlTotalPrice != rhs.__isset.dlTotalPrice)
      return false;
    else if (__isset.dlTotalPrice && !(dlTotalPrice == rhs.dlTotalPrice))
      return false;
    if (__isset.strExtend != rhs.__isset.strExtend)
      return false;
    else if (__isset.strExtend && !(strExtend == rhs.strExtend))
      return false;
    return true;
  }
  bool operator != (const OrderDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OrderDetail &a, OrderDetail &b);

std::ostream& operator<<(std::ostream& out, const OrderDetail& obj);

typedef struct _OrderInfo__isset {
  _OrderInfo__isset() : strID(false), strName(false), iType(false), strUserID(false), dlTotalPrice(false), iOrdStatus(false), strExpressInfo(false), strHisOrdStatus(false), strAddress(false), strReceiver(false), strPhone(false), strBackReceiver(false), strBackPhone(false), strBackExpressInfo(false), strCreateDate(false), strExtend(false), orddtList(false) {}
  bool strID :1;
  bool strName :1;
  bool iType :1;
  bool strUserID :1;
  bool dlTotalPrice :1;
  bool iOrdStatus :1;
  bool strExpressInfo :1;
  bool strHisOrdStatus :1;
  bool strAddress :1;
  bool strReceiver :1;
  bool strPhone :1;
  bool strBackReceiver :1;
  bool strBackPhone :1;
  bool strBackExpressInfo :1;
  bool strCreateDate :1;
  bool strExtend :1;
  bool orddtList :1;
} _OrderInfo__isset;

class OrderInfo : public virtual ::apache::thrift::TBase {
 public:

  OrderInfo(const OrderInfo&);
  OrderInfo& operator=(const OrderInfo&);
  OrderInfo() : strID(), strName(), iType(0), strUserID(), dlTotalPrice(0), iOrdStatus(0), strExpressInfo(), strHisOrdStatus(), strAddress(), strReceiver(), strPhone(), strBackReceiver(), strBackPhone(), strBackExpressInfo(), strCreateDate(), strExtend() {
  }

  virtual ~OrderInfo() throw();
  std::string strID;
  std::string strName;
  int32_t iType;
  std::string strUserID;
  double dlTotalPrice;
  int32_t iOrdStatus;
  std::string strExpressInfo;
  std::string strHisOrdStatus;
  std::string strAddress;
  std::string strReceiver;
  std::string strPhone;
  std::string strBackReceiver;
  std::string strBackPhone;
  std::string strBackExpressInfo;
  std::string strCreateDate;
  std::string strExtend;
  std::vector<OrderDetail>  orddtList;

  _OrderInfo__isset __isset;

  void __set_strID(const std::string& val);

  void __set_strName(const std::string& val);

  void __set_iType(const int32_t val);

  void __set_strUserID(const std::string& val);

  void __set_dlTotalPrice(const double val);

  void __set_iOrdStatus(const int32_t val);

  void __set_strExpressInfo(const std::string& val);

  void __set_strHisOrdStatus(const std::string& val);

  void __set_strAddress(const std::string& val);

  void __set_strReceiver(const std::string& val);

  void __set_strPhone(const std::string& val);

  void __set_strBackReceiver(const std::string& val);

  void __set_strBackPhone(const std::string& val);

  void __set_strBackExpressInfo(const std::string& val);

  void __set_strCreateDate(const std::string& val);

  void __set_strExtend(const std::string& val);

  void __set_orddtList(const std::vector<OrderDetail> & val);

  bool operator == (const OrderInfo & rhs) const
  {
    if (__isset.strID != rhs.__isset.strID)
      return false;
    else if (__isset.strID && !(strID == rhs.strID))
      return false;
    if (__isset.strName != rhs.__isset.strName)
      return false;
    else if (__isset.strName && !(strName == rhs.strName))
      return false;
    if (__isset.iType != rhs.__isset.iType)
      return false;
    else if (__isset.iType && !(iType == rhs.iType))
      return false;
    if (__isset.strUserID != rhs.__isset.strUserID)
      return false;
    else if (__isset.strUserID && !(strUserID == rhs.strUserID))
      return false;
    if (__isset.dlTotalPrice != rhs.__isset.dlTotalPrice)
      return false;
    else if (__isset.dlTotalPrice && !(dlTotalPrice == rhs.dlTotalPrice))
      return false;
    if (__isset.iOrdStatus != rhs.__isset.iOrdStatus)
      return false;
    else if (__isset.iOrdStatus && !(iOrdStatus == rhs.iOrdStatus))
      return false;
    if (__isset.strExpressInfo != rhs.__isset.strExpressInfo)
      return false;
    else if (__isset.strExpressInfo && !(strExpressInfo == rhs.strExpressInfo))
      return false;
    if (__isset.strHisOrdStatus != rhs.__isset.strHisOrdStatus)
      return false;
    else if (__isset.strHisOrdStatus && !(strHisOrdStatus == rhs.strHisOrdStatus))
      return false;
    if (__isset.strAddress != rhs.__isset.strAddress)
      return false;
    else if (__isset.strAddress && !(strAddress == rhs.strAddress))
      return false;
    if (__isset.strReceiver != rhs.__isset.strReceiver)
      return false;
    else if (__isset.strReceiver && !(strReceiver == rhs.strReceiver))
      return false;
    if (__isset.strPhone != rhs.__isset.strPhone)
      return false;
    else if (__isset.strPhone && !(strPhone == rhs.strPhone))
      return false;
    if (__isset.strBackReceiver != rhs.__isset.strBackReceiver)
      return false;
    else if (__isset.strBackReceiver && !(strBackReceiver == rhs.strBackReceiver))
      return false;
    if (__isset.strBackPhone != rhs.__isset.strBackPhone)
      return false;
    else if (__isset.strBackPhone && !(strBackPhone == rhs.strBackPhone))
      return false;
    if (__isset.strBackExpressInfo != rhs.__isset.strBackExpressInfo)
      return false;
    else if (__isset.strBackExpressInfo && !(strBackExpressInfo == rhs.strBackExpressInfo))
      return false;
    if (__isset.strCreateDate != rhs.__isset.strCreateDate)
      return false;
    else if (__isset.strCreateDate && !(strCreateDate == rhs.strCreateDate))
      return false;
    if (__isset.strExtend != rhs.__isset.strExtend)
      return false;
    else if (__isset.strExtend && !(strExtend == rhs.strExtend))
      return false;
    if (!(orddtList == rhs.orddtList))
      return false;
    return true;
  }
  bool operator != (const OrderInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OrderInfo &a, OrderInfo &b);

std::ostream& operator<<(std::ostream& out, const OrderInfo& obj);

typedef struct _AddProductRT__isset {
  _AddProductRT__isset() : rtcode(false), strPdtID(false) {}
  bool rtcode :1;
  bool strPdtID :1;
} _AddProductRT__isset;

class AddProductRT : public virtual ::apache::thrift::TBase {
 public:

  AddProductRT(const AddProductRT&);
  AddProductRT& operator=(const AddProductRT&);
  AddProductRT() : strPdtID() {
  }

  virtual ~AddProductRT() throw();
  ProductRTInfo rtcode;
  std::string strPdtID;

  _AddProductRT__isset __isset;

  void __set_rtcode(const ProductRTInfo& val);

  void __set_strPdtID(const std::string& val);

  bool operator == (const AddProductRT & rhs) const
  {
    if (__isset.rtcode != rhs.__isset.rtcode)
      return false;
    else if (__isset.rtcode && !(rtcode == rhs.rtcode))
      return false;
    if (__isset.strPdtID != rhs.__isset.strPdtID)
      return false;
    else if (__isset.strPdtID && !(strPdtID == rhs.strPdtID))
      return false;
    return true;
  }
  bool operator != (const AddProductRT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddProductRT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddProductRT &a, AddProductRT &b);

std::ostream& operator<<(std::ostream& out, const AddProductRT& obj);

typedef struct _QueryProductRT__isset {
  _QueryProductRT__isset() : rtcode(false), pdt(false) {}
  bool rtcode :1;
  bool pdt :1;
} _QueryProductRT__isset;

class QueryProductRT : public virtual ::apache::thrift::TBase {
 public:

  QueryProductRT(const QueryProductRT&);
  QueryProductRT& operator=(const QueryProductRT&);
  QueryProductRT() {
  }

  virtual ~QueryProductRT() throw();
  ProductRTInfo rtcode;
  ProductInfo pdt;

  _QueryProductRT__isset __isset;

  void __set_rtcode(const ProductRTInfo& val);

  void __set_pdt(const ProductInfo& val);

  bool operator == (const QueryProductRT & rhs) const
  {
    if (__isset.rtcode != rhs.__isset.rtcode)
      return false;
    else if (__isset.rtcode && !(rtcode == rhs.rtcode))
      return false;
    if (__isset.pdt != rhs.__isset.pdt)
      return false;
    else if (__isset.pdt && !(pdt == rhs.pdt))
      return false;
    return true;
  }
  bool operator != (const QueryProductRT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryProductRT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryProductRT &a, QueryProductRT &b);

std::ostream& operator<<(std::ostream& out, const QueryProductRT& obj);

typedef struct _QueryAllProductRT__isset {
  _QueryAllProductRT__isset() : rtcode(false), pdtlist(false) {}
  bool rtcode :1;
  bool pdtlist :1;
} _QueryAllProductRT__isset;

class QueryAllProductRT : public virtual ::apache::thrift::TBase {
 public:

  QueryAllProductRT(const QueryAllProductRT&);
  QueryAllProductRT& operator=(const QueryAllProductRT&);
  QueryAllProductRT() {
  }

  virtual ~QueryAllProductRT() throw();
  ProductRTInfo rtcode;
  std::vector<ProductInfo>  pdtlist;

  _QueryAllProductRT__isset __isset;

  void __set_rtcode(const ProductRTInfo& val);

  void __set_pdtlist(const std::vector<ProductInfo> & val);

  bool operator == (const QueryAllProductRT & rhs) const
  {
    if (__isset.rtcode != rhs.__isset.rtcode)
      return false;
    else if (__isset.rtcode && !(rtcode == rhs.rtcode))
      return false;
    if (__isset.pdtlist != rhs.__isset.pdtlist)
      return false;
    else if (__isset.pdtlist && !(pdtlist == rhs.pdtlist))
      return false;
    return true;
  }
  bool operator != (const QueryAllProductRT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryAllProductRT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryAllProductRT &a, QueryAllProductRT &b);

std::ostream& operator<<(std::ostream& out, const QueryAllProductRT& obj);

typedef struct _AddProductPropertyRT__isset {
  _AddProductPropertyRT__isset() : rtcode(false), strPdtpptID(false) {}
  bool rtcode :1;
  bool strPdtpptID :1;
} _AddProductPropertyRT__isset;

class AddProductPropertyRT : public virtual ::apache::thrift::TBase {
 public:

  AddProductPropertyRT(const AddProductPropertyRT&);
  AddProductPropertyRT& operator=(const AddProductPropertyRT&);
  AddProductPropertyRT() : strPdtpptID() {
  }

  virtual ~AddProductPropertyRT() throw();
  ProductRTInfo rtcode;
  std::string strPdtpptID;

  _AddProductPropertyRT__isset __isset;

  void __set_rtcode(const ProductRTInfo& val);

  void __set_strPdtpptID(const std::string& val);

  bool operator == (const AddProductPropertyRT & rhs) const
  {
    if (__isset.rtcode != rhs.__isset.rtcode)
      return false;
    else if (__isset.rtcode && !(rtcode == rhs.rtcode))
      return false;
    if (__isset.strPdtpptID != rhs.__isset.strPdtpptID)
      return false;
    else if (__isset.strPdtpptID && !(strPdtpptID == rhs.strPdtpptID))
      return false;
    return true;
  }
  bool operator != (const AddProductPropertyRT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddProductPropertyRT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddProductPropertyRT &a, AddProductPropertyRT &b);

std::ostream& operator<<(std::ostream& out, const AddProductPropertyRT& obj);

typedef struct _AddOrdRT__isset {
  _AddOrdRT__isset() : rtcode(false), strOrdID(false) {}
  bool rtcode :1;
  bool strOrdID :1;
} _AddOrdRT__isset;

class AddOrdRT : public virtual ::apache::thrift::TBase {
 public:

  AddOrdRT(const AddOrdRT&);
  AddOrdRT& operator=(const AddOrdRT&);
  AddOrdRT() : strOrdID() {
  }

  virtual ~AddOrdRT() throw();
  ProductRTInfo rtcode;
  std::string strOrdID;

  _AddOrdRT__isset __isset;

  void __set_rtcode(const ProductRTInfo& val);

  void __set_strOrdID(const std::string& val);

  bool operator == (const AddOrdRT & rhs) const
  {
    if (__isset.rtcode != rhs.__isset.rtcode)
      return false;
    else if (__isset.rtcode && !(rtcode == rhs.rtcode))
      return false;
    if (__isset.strOrdID != rhs.__isset.strOrdID)
      return false;
    else if (__isset.strOrdID && !(strOrdID == rhs.strOrdID))
      return false;
    return true;
  }
  bool operator != (const AddOrdRT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddOrdRT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddOrdRT &a, AddOrdRT &b);

std::ostream& operator<<(std::ostream& out, const AddOrdRT& obj);

typedef struct _AddOrdDetailRT__isset {
  _AddOrdDetailRT__isset() : rtcode(false), strOrddtID(false) {}
  bool rtcode :1;
  bool strOrddtID :1;
} _AddOrdDetailRT__isset;

class AddOrdDetailRT : public virtual ::apache::thrift::TBase {
 public:

  AddOrdDetailRT(const AddOrdDetailRT&);
  AddOrdDetailRT& operator=(const AddOrdDetailRT&);
  AddOrdDetailRT() : strOrddtID() {
  }

  virtual ~AddOrdDetailRT() throw();
  ProductRTInfo rtcode;
  std::string strOrddtID;

  _AddOrdDetailRT__isset __isset;

  void __set_rtcode(const ProductRTInfo& val);

  void __set_strOrddtID(const std::string& val);

  bool operator == (const AddOrdDetailRT & rhs) const
  {
    if (__isset.rtcode != rhs.__isset.rtcode)
      return false;
    else if (__isset.rtcode && !(rtcode == rhs.rtcode))
      return false;
    if (__isset.strOrddtID != rhs.__isset.strOrddtID)
      return false;
    else if (__isset.strOrddtID && !(strOrddtID == rhs.strOrddtID))
      return false;
    return true;
  }
  bool operator != (const AddOrdDetailRT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddOrdDetailRT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddOrdDetailRT &a, AddOrdDetailRT &b);

std::ostream& operator<<(std::ostream& out, const AddOrdDetailRT& obj);

typedef struct _QueryOrdRT__isset {
  _QueryOrdRT__isset() : rtcode(false), ord(false) {}
  bool rtcode :1;
  bool ord :1;
} _QueryOrdRT__isset;

class QueryOrdRT : public virtual ::apache::thrift::TBase {
 public:

  QueryOrdRT(const QueryOrdRT&);
  QueryOrdRT& operator=(const QueryOrdRT&);
  QueryOrdRT() {
  }

  virtual ~QueryOrdRT() throw();
  ProductRTInfo rtcode;
  OrderInfo ord;

  _QueryOrdRT__isset __isset;

  void __set_rtcode(const ProductRTInfo& val);

  void __set_ord(const OrderInfo& val);

  bool operator == (const QueryOrdRT & rhs) const
  {
    if (__isset.rtcode != rhs.__isset.rtcode)
      return false;
    else if (__isset.rtcode && !(rtcode == rhs.rtcode))
      return false;
    if (__isset.ord != rhs.__isset.ord)
      return false;
    else if (__isset.ord && !(ord == rhs.ord))
      return false;
    return true;
  }
  bool operator != (const QueryOrdRT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryOrdRT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryOrdRT &a, QueryOrdRT &b);

std::ostream& operator<<(std::ostream& out, const QueryOrdRT& obj);

typedef struct _QueryAllOrdRT__isset {
  _QueryAllOrdRT__isset() : rtcode(false), ordlist(false) {}
  bool rtcode :1;
  bool ordlist :1;
} _QueryAllOrdRT__isset;

class QueryAllOrdRT : public virtual ::apache::thrift::TBase {
 public:

  QueryAllOrdRT(const QueryAllOrdRT&);
  QueryAllOrdRT& operator=(const QueryAllOrdRT&);
  QueryAllOrdRT() {
  }

  virtual ~QueryAllOrdRT() throw();
  ProductRTInfo rtcode;
  std::vector<OrderInfo>  ordlist;

  _QueryAllOrdRT__isset __isset;

  void __set_rtcode(const ProductRTInfo& val);

  void __set_ordlist(const std::vector<OrderInfo> & val);

  bool operator == (const QueryAllOrdRT & rhs) const
  {
    if (__isset.rtcode != rhs.__isset.rtcode)
      return false;
    else if (__isset.rtcode && !(rtcode == rhs.rtcode))
      return false;
    if (__isset.ordlist != rhs.__isset.ordlist)
      return false;
    else if (__isset.ordlist && !(ordlist == rhs.ordlist))
      return false;
    return true;
  }
  bool operator != (const QueryAllOrdRT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryAllOrdRT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryAllOrdRT &a, QueryAllOrdRT &b);

std::ostream& operator<<(std::ostream& out, const QueryAllOrdRT& obj);

typedef struct _QueryAllOrdParam__isset {
  _QueryAllOrdParam__isset() : iType(false), iOrdStatus(false), strReceiver(false), strPhone(false), strPdtID(false), strBeginDate(false), strEndDate(false), strBeginIndex(false) {}
  bool iType :1;
  bool iOrdStatus :1;
  bool strReceiver :1;
  bool strPhone :1;
  bool strPdtID :1;
  bool strBeginDate :1;
  bool strEndDate :1;
  bool strBeginIndex :1;
} _QueryAllOrdParam__isset;

class QueryAllOrdParam : public virtual ::apache::thrift::TBase {
 public:

  QueryAllOrdParam(const QueryAllOrdParam&);
  QueryAllOrdParam& operator=(const QueryAllOrdParam&);
  QueryAllOrdParam() : iType(0), iOrdStatus(0), strReceiver(), strPhone(), strPdtID(), strBeginDate(), strEndDate(), strBeginIndex() {
  }

  virtual ~QueryAllOrdParam() throw();
  int32_t iType;
  int32_t iOrdStatus;
  std::string strReceiver;
  std::string strPhone;
  std::string strPdtID;
  std::string strBeginDate;
  std::string strEndDate;
  std::string strBeginIndex;

  _QueryAllOrdParam__isset __isset;

  void __set_iType(const int32_t val);

  void __set_iOrdStatus(const int32_t val);

  void __set_strReceiver(const std::string& val);

  void __set_strPhone(const std::string& val);

  void __set_strPdtID(const std::string& val);

  void __set_strBeginDate(const std::string& val);

  void __set_strEndDate(const std::string& val);

  void __set_strBeginIndex(const std::string& val);

  bool operator == (const QueryAllOrdParam & rhs) const
  {
    if (__isset.iType != rhs.__isset.iType)
      return false;
    else if (__isset.iType && !(iType == rhs.iType))
      return false;
    if (__isset.iOrdStatus != rhs.__isset.iOrdStatus)
      return false;
    else if (__isset.iOrdStatus && !(iOrdStatus == rhs.iOrdStatus))
      return false;
    if (__isset.strReceiver != rhs.__isset.strReceiver)
      return false;
    else if (__isset.strReceiver && !(strReceiver == rhs.strReceiver))
      return false;
    if (__isset.strPhone != rhs.__isset.strPhone)
      return false;
    else if (__isset.strPhone && !(strPhone == rhs.strPhone))
      return false;
    if (__isset.strPdtID != rhs.__isset.strPdtID)
      return false;
    else if (__isset.strPdtID && !(strPdtID == rhs.strPdtID))
      return false;
    if (__isset.strBeginDate != rhs.__isset.strBeginDate)
      return false;
    else if (__isset.strBeginDate && !(strBeginDate == rhs.strBeginDate))
      return false;
    if (__isset.strEndDate != rhs.__isset.strEndDate)
      return false;
    else if (__isset.strEndDate && !(strEndDate == rhs.strEndDate))
      return false;
    if (__isset.strBeginIndex != rhs.__isset.strBeginIndex)
      return false;
    else if (__isset.strBeginIndex && !(strBeginIndex == rhs.strBeginIndex))
      return false;
    return true;
  }
  bool operator != (const QueryAllOrdParam &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryAllOrdParam & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryAllOrdParam &a, QueryAllOrdParam &b);

std::ostream& operator<<(std::ostream& out, const QueryAllOrdParam& obj);

}} // namespace

#endif
