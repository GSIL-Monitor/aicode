/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef OrderService_H
#define OrderService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Product_types.h"

namespace Product { namespace Service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class OrderServiceIf {
 public:
  virtual ~OrderServiceIf() {}
  virtual void AddOrd(AddOrdRT& _return, const std::string& strSid, const std::string& strUserID, const OrderInfo& ord) = 0;
  virtual void RemoveOrd(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const int32_t uiIncDtl) = 0;
  virtual void ModifyOrd(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const OrderInfo& ord) = 0;
  virtual void AddOrdDetail(AddOrdDetailRT& _return, const std::string& strSid, const std::string& strUserID, const OrderDetail& orddt) = 0;
  virtual void RemoveOrdDetail(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const std::string& strOrddtID) = 0;
  virtual void QueryOrd(QueryOrdRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID) = 0;
  virtual void QueryAllOrd(QueryAllOrdRT& _return, const std::string& strSid, const std::string& strUserID, const QueryAllOrdParam& qryparam) = 0;
};

class OrderServiceIfFactory {
 public:
  typedef OrderServiceIf Handler;

  virtual ~OrderServiceIfFactory() {}

  virtual OrderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(OrderServiceIf* /* handler */) = 0;
};

class OrderServiceIfSingletonFactory : virtual public OrderServiceIfFactory {
 public:
  OrderServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<OrderServiceIf>& iface) : iface_(iface) {}
  virtual ~OrderServiceIfSingletonFactory() {}

  virtual OrderServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(OrderServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<OrderServiceIf> iface_;
};

class OrderServiceNull : virtual public OrderServiceIf {
 public:
  virtual ~OrderServiceNull() {}
  void AddOrd(AddOrdRT& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const OrderInfo& /* ord */) {
    return;
  }
  void RemoveOrd(ProductRTInfo& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const std::string& /* strOrdID */, const int32_t /* uiIncDtl */) {
    return;
  }
  void ModifyOrd(ProductRTInfo& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const std::string& /* strOrdID */, const OrderInfo& /* ord */) {
    return;
  }
  void AddOrdDetail(AddOrdDetailRT& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const OrderDetail& /* orddt */) {
    return;
  }
  void RemoveOrdDetail(ProductRTInfo& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const std::string& /* strOrdID */, const std::string& /* strOrddtID */) {
    return;
  }
  void QueryOrd(QueryOrdRT& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const std::string& /* strOrdID */) {
    return;
  }
  void QueryAllOrd(QueryAllOrdRT& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const QueryAllOrdParam& /* qryparam */) {
    return;
  }
};

typedef struct _OrderService_AddOrd_args__isset {
  _OrderService_AddOrd_args__isset() : strSid(false), strUserID(false), ord(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool ord :1;
} _OrderService_AddOrd_args__isset;

class OrderService_AddOrd_args {
 public:

  OrderService_AddOrd_args(const OrderService_AddOrd_args&);
  OrderService_AddOrd_args& operator=(const OrderService_AddOrd_args&);
  OrderService_AddOrd_args() : strSid(), strUserID() {
  }

  virtual ~OrderService_AddOrd_args() throw();
  std::string strSid;
  std::string strUserID;
  OrderInfo ord;

  _OrderService_AddOrd_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_ord(const OrderInfo& val);

  bool operator == (const OrderService_AddOrd_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(ord == rhs.ord))
      return false;
    return true;
  }
  bool operator != (const OrderService_AddOrd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_AddOrd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OrderService_AddOrd_pargs {
 public:


  virtual ~OrderService_AddOrd_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const OrderInfo* ord;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_AddOrd_result__isset {
  _OrderService_AddOrd_result__isset() : success(false) {}
  bool success :1;
} _OrderService_AddOrd_result__isset;

class OrderService_AddOrd_result {
 public:

  OrderService_AddOrd_result(const OrderService_AddOrd_result&);
  OrderService_AddOrd_result& operator=(const OrderService_AddOrd_result&);
  OrderService_AddOrd_result() {
  }

  virtual ~OrderService_AddOrd_result() throw();
  AddOrdRT success;

  _OrderService_AddOrd_result__isset __isset;

  void __set_success(const AddOrdRT& val);

  bool operator == (const OrderService_AddOrd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OrderService_AddOrd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_AddOrd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_AddOrd_presult__isset {
  _OrderService_AddOrd_presult__isset() : success(false) {}
  bool success :1;
} _OrderService_AddOrd_presult__isset;

class OrderService_AddOrd_presult {
 public:


  virtual ~OrderService_AddOrd_presult() throw();
  AddOrdRT* success;

  _OrderService_AddOrd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OrderService_RemoveOrd_args__isset {
  _OrderService_RemoveOrd_args__isset() : strSid(false), strUserID(false), strOrdID(false), uiIncDtl(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool strOrdID :1;
  bool uiIncDtl :1;
} _OrderService_RemoveOrd_args__isset;

class OrderService_RemoveOrd_args {
 public:

  OrderService_RemoveOrd_args(const OrderService_RemoveOrd_args&);
  OrderService_RemoveOrd_args& operator=(const OrderService_RemoveOrd_args&);
  OrderService_RemoveOrd_args() : strSid(), strUserID(), strOrdID(), uiIncDtl(0) {
  }

  virtual ~OrderService_RemoveOrd_args() throw();
  std::string strSid;
  std::string strUserID;
  std::string strOrdID;
  int32_t uiIncDtl;

  _OrderService_RemoveOrd_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_strOrdID(const std::string& val);

  void __set_uiIncDtl(const int32_t val);

  bool operator == (const OrderService_RemoveOrd_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(strOrdID == rhs.strOrdID))
      return false;
    if (!(uiIncDtl == rhs.uiIncDtl))
      return false;
    return true;
  }
  bool operator != (const OrderService_RemoveOrd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_RemoveOrd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OrderService_RemoveOrd_pargs {
 public:


  virtual ~OrderService_RemoveOrd_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const std::string* strOrdID;
  const int32_t* uiIncDtl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_RemoveOrd_result__isset {
  _OrderService_RemoveOrd_result__isset() : success(false) {}
  bool success :1;
} _OrderService_RemoveOrd_result__isset;

class OrderService_RemoveOrd_result {
 public:

  OrderService_RemoveOrd_result(const OrderService_RemoveOrd_result&);
  OrderService_RemoveOrd_result& operator=(const OrderService_RemoveOrd_result&);
  OrderService_RemoveOrd_result() {
  }

  virtual ~OrderService_RemoveOrd_result() throw();
  ProductRTInfo success;

  _OrderService_RemoveOrd_result__isset __isset;

  void __set_success(const ProductRTInfo& val);

  bool operator == (const OrderService_RemoveOrd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OrderService_RemoveOrd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_RemoveOrd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_RemoveOrd_presult__isset {
  _OrderService_RemoveOrd_presult__isset() : success(false) {}
  bool success :1;
} _OrderService_RemoveOrd_presult__isset;

class OrderService_RemoveOrd_presult {
 public:


  virtual ~OrderService_RemoveOrd_presult() throw();
  ProductRTInfo* success;

  _OrderService_RemoveOrd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OrderService_ModifyOrd_args__isset {
  _OrderService_ModifyOrd_args__isset() : strSid(false), strUserID(false), strOrdID(false), ord(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool strOrdID :1;
  bool ord :1;
} _OrderService_ModifyOrd_args__isset;

class OrderService_ModifyOrd_args {
 public:

  OrderService_ModifyOrd_args(const OrderService_ModifyOrd_args&);
  OrderService_ModifyOrd_args& operator=(const OrderService_ModifyOrd_args&);
  OrderService_ModifyOrd_args() : strSid(), strUserID(), strOrdID() {
  }

  virtual ~OrderService_ModifyOrd_args() throw();
  std::string strSid;
  std::string strUserID;
  std::string strOrdID;
  OrderInfo ord;

  _OrderService_ModifyOrd_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_strOrdID(const std::string& val);

  void __set_ord(const OrderInfo& val);

  bool operator == (const OrderService_ModifyOrd_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(strOrdID == rhs.strOrdID))
      return false;
    if (!(ord == rhs.ord))
      return false;
    return true;
  }
  bool operator != (const OrderService_ModifyOrd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_ModifyOrd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OrderService_ModifyOrd_pargs {
 public:


  virtual ~OrderService_ModifyOrd_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const std::string* strOrdID;
  const OrderInfo* ord;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_ModifyOrd_result__isset {
  _OrderService_ModifyOrd_result__isset() : success(false) {}
  bool success :1;
} _OrderService_ModifyOrd_result__isset;

class OrderService_ModifyOrd_result {
 public:

  OrderService_ModifyOrd_result(const OrderService_ModifyOrd_result&);
  OrderService_ModifyOrd_result& operator=(const OrderService_ModifyOrd_result&);
  OrderService_ModifyOrd_result() {
  }

  virtual ~OrderService_ModifyOrd_result() throw();
  ProductRTInfo success;

  _OrderService_ModifyOrd_result__isset __isset;

  void __set_success(const ProductRTInfo& val);

  bool operator == (const OrderService_ModifyOrd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OrderService_ModifyOrd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_ModifyOrd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_ModifyOrd_presult__isset {
  _OrderService_ModifyOrd_presult__isset() : success(false) {}
  bool success :1;
} _OrderService_ModifyOrd_presult__isset;

class OrderService_ModifyOrd_presult {
 public:


  virtual ~OrderService_ModifyOrd_presult() throw();
  ProductRTInfo* success;

  _OrderService_ModifyOrd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OrderService_AddOrdDetail_args__isset {
  _OrderService_AddOrdDetail_args__isset() : strSid(false), strUserID(false), orddt(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool orddt :1;
} _OrderService_AddOrdDetail_args__isset;

class OrderService_AddOrdDetail_args {
 public:

  OrderService_AddOrdDetail_args(const OrderService_AddOrdDetail_args&);
  OrderService_AddOrdDetail_args& operator=(const OrderService_AddOrdDetail_args&);
  OrderService_AddOrdDetail_args() : strSid(), strUserID() {
  }

  virtual ~OrderService_AddOrdDetail_args() throw();
  std::string strSid;
  std::string strUserID;
  OrderDetail orddt;

  _OrderService_AddOrdDetail_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_orddt(const OrderDetail& val);

  bool operator == (const OrderService_AddOrdDetail_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(orddt == rhs.orddt))
      return false;
    return true;
  }
  bool operator != (const OrderService_AddOrdDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_AddOrdDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OrderService_AddOrdDetail_pargs {
 public:


  virtual ~OrderService_AddOrdDetail_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const OrderDetail* orddt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_AddOrdDetail_result__isset {
  _OrderService_AddOrdDetail_result__isset() : success(false) {}
  bool success :1;
} _OrderService_AddOrdDetail_result__isset;

class OrderService_AddOrdDetail_result {
 public:

  OrderService_AddOrdDetail_result(const OrderService_AddOrdDetail_result&);
  OrderService_AddOrdDetail_result& operator=(const OrderService_AddOrdDetail_result&);
  OrderService_AddOrdDetail_result() {
  }

  virtual ~OrderService_AddOrdDetail_result() throw();
  AddOrdDetailRT success;

  _OrderService_AddOrdDetail_result__isset __isset;

  void __set_success(const AddOrdDetailRT& val);

  bool operator == (const OrderService_AddOrdDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OrderService_AddOrdDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_AddOrdDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_AddOrdDetail_presult__isset {
  _OrderService_AddOrdDetail_presult__isset() : success(false) {}
  bool success :1;
} _OrderService_AddOrdDetail_presult__isset;

class OrderService_AddOrdDetail_presult {
 public:


  virtual ~OrderService_AddOrdDetail_presult() throw();
  AddOrdDetailRT* success;

  _OrderService_AddOrdDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OrderService_RemoveOrdDetail_args__isset {
  _OrderService_RemoveOrdDetail_args__isset() : strSid(false), strUserID(false), strOrdID(false), strOrddtID(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool strOrdID :1;
  bool strOrddtID :1;
} _OrderService_RemoveOrdDetail_args__isset;

class OrderService_RemoveOrdDetail_args {
 public:

  OrderService_RemoveOrdDetail_args(const OrderService_RemoveOrdDetail_args&);
  OrderService_RemoveOrdDetail_args& operator=(const OrderService_RemoveOrdDetail_args&);
  OrderService_RemoveOrdDetail_args() : strSid(), strUserID(), strOrdID(), strOrddtID() {
  }

  virtual ~OrderService_RemoveOrdDetail_args() throw();
  std::string strSid;
  std::string strUserID;
  std::string strOrdID;
  std::string strOrddtID;

  _OrderService_RemoveOrdDetail_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_strOrdID(const std::string& val);

  void __set_strOrddtID(const std::string& val);

  bool operator == (const OrderService_RemoveOrdDetail_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(strOrdID == rhs.strOrdID))
      return false;
    if (!(strOrddtID == rhs.strOrddtID))
      return false;
    return true;
  }
  bool operator != (const OrderService_RemoveOrdDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_RemoveOrdDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OrderService_RemoveOrdDetail_pargs {
 public:


  virtual ~OrderService_RemoveOrdDetail_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const std::string* strOrdID;
  const std::string* strOrddtID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_RemoveOrdDetail_result__isset {
  _OrderService_RemoveOrdDetail_result__isset() : success(false) {}
  bool success :1;
} _OrderService_RemoveOrdDetail_result__isset;

class OrderService_RemoveOrdDetail_result {
 public:

  OrderService_RemoveOrdDetail_result(const OrderService_RemoveOrdDetail_result&);
  OrderService_RemoveOrdDetail_result& operator=(const OrderService_RemoveOrdDetail_result&);
  OrderService_RemoveOrdDetail_result() {
  }

  virtual ~OrderService_RemoveOrdDetail_result() throw();
  ProductRTInfo success;

  _OrderService_RemoveOrdDetail_result__isset __isset;

  void __set_success(const ProductRTInfo& val);

  bool operator == (const OrderService_RemoveOrdDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OrderService_RemoveOrdDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_RemoveOrdDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_RemoveOrdDetail_presult__isset {
  _OrderService_RemoveOrdDetail_presult__isset() : success(false) {}
  bool success :1;
} _OrderService_RemoveOrdDetail_presult__isset;

class OrderService_RemoveOrdDetail_presult {
 public:


  virtual ~OrderService_RemoveOrdDetail_presult() throw();
  ProductRTInfo* success;

  _OrderService_RemoveOrdDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OrderService_QueryOrd_args__isset {
  _OrderService_QueryOrd_args__isset() : strSid(false), strUserID(false), strOrdID(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool strOrdID :1;
} _OrderService_QueryOrd_args__isset;

class OrderService_QueryOrd_args {
 public:

  OrderService_QueryOrd_args(const OrderService_QueryOrd_args&);
  OrderService_QueryOrd_args& operator=(const OrderService_QueryOrd_args&);
  OrderService_QueryOrd_args() : strSid(), strUserID(), strOrdID() {
  }

  virtual ~OrderService_QueryOrd_args() throw();
  std::string strSid;
  std::string strUserID;
  std::string strOrdID;

  _OrderService_QueryOrd_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_strOrdID(const std::string& val);

  bool operator == (const OrderService_QueryOrd_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(strOrdID == rhs.strOrdID))
      return false;
    return true;
  }
  bool operator != (const OrderService_QueryOrd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_QueryOrd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OrderService_QueryOrd_pargs {
 public:


  virtual ~OrderService_QueryOrd_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const std::string* strOrdID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_QueryOrd_result__isset {
  _OrderService_QueryOrd_result__isset() : success(false) {}
  bool success :1;
} _OrderService_QueryOrd_result__isset;

class OrderService_QueryOrd_result {
 public:

  OrderService_QueryOrd_result(const OrderService_QueryOrd_result&);
  OrderService_QueryOrd_result& operator=(const OrderService_QueryOrd_result&);
  OrderService_QueryOrd_result() {
  }

  virtual ~OrderService_QueryOrd_result() throw();
  QueryOrdRT success;

  _OrderService_QueryOrd_result__isset __isset;

  void __set_success(const QueryOrdRT& val);

  bool operator == (const OrderService_QueryOrd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OrderService_QueryOrd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_QueryOrd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_QueryOrd_presult__isset {
  _OrderService_QueryOrd_presult__isset() : success(false) {}
  bool success :1;
} _OrderService_QueryOrd_presult__isset;

class OrderService_QueryOrd_presult {
 public:


  virtual ~OrderService_QueryOrd_presult() throw();
  QueryOrdRT* success;

  _OrderService_QueryOrd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OrderService_QueryAllOrd_args__isset {
  _OrderService_QueryAllOrd_args__isset() : strSid(false), strUserID(false), qryparam(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool qryparam :1;
} _OrderService_QueryAllOrd_args__isset;

class OrderService_QueryAllOrd_args {
 public:

  OrderService_QueryAllOrd_args(const OrderService_QueryAllOrd_args&);
  OrderService_QueryAllOrd_args& operator=(const OrderService_QueryAllOrd_args&);
  OrderService_QueryAllOrd_args() : strSid(), strUserID() {
  }

  virtual ~OrderService_QueryAllOrd_args() throw();
  std::string strSid;
  std::string strUserID;
  QueryAllOrdParam qryparam;

  _OrderService_QueryAllOrd_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_qryparam(const QueryAllOrdParam& val);

  bool operator == (const OrderService_QueryAllOrd_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(qryparam == rhs.qryparam))
      return false;
    return true;
  }
  bool operator != (const OrderService_QueryAllOrd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_QueryAllOrd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OrderService_QueryAllOrd_pargs {
 public:


  virtual ~OrderService_QueryAllOrd_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const QueryAllOrdParam* qryparam;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_QueryAllOrd_result__isset {
  _OrderService_QueryAllOrd_result__isset() : success(false) {}
  bool success :1;
} _OrderService_QueryAllOrd_result__isset;

class OrderService_QueryAllOrd_result {
 public:

  OrderService_QueryAllOrd_result(const OrderService_QueryAllOrd_result&);
  OrderService_QueryAllOrd_result& operator=(const OrderService_QueryAllOrd_result&);
  OrderService_QueryAllOrd_result() {
  }

  virtual ~OrderService_QueryAllOrd_result() throw();
  QueryAllOrdRT success;

  _OrderService_QueryAllOrd_result__isset __isset;

  void __set_success(const QueryAllOrdRT& val);

  bool operator == (const OrderService_QueryAllOrd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OrderService_QueryAllOrd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderService_QueryAllOrd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OrderService_QueryAllOrd_presult__isset {
  _OrderService_QueryAllOrd_presult__isset() : success(false) {}
  bool success :1;
} _OrderService_QueryAllOrd_presult__isset;

class OrderService_QueryAllOrd_presult {
 public:


  virtual ~OrderService_QueryAllOrd_presult() throw();
  QueryAllOrdRT* success;

  _OrderService_QueryAllOrd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class OrderServiceClient : virtual public OrderServiceIf {
 public:
  OrderServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  OrderServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AddOrd(AddOrdRT& _return, const std::string& strSid, const std::string& strUserID, const OrderInfo& ord);
  void send_AddOrd(const std::string& strSid, const std::string& strUserID, const OrderInfo& ord);
  void recv_AddOrd(AddOrdRT& _return);
  void RemoveOrd(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const int32_t uiIncDtl);
  void send_RemoveOrd(const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const int32_t uiIncDtl);
  void recv_RemoveOrd(ProductRTInfo& _return);
  void ModifyOrd(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const OrderInfo& ord);
  void send_ModifyOrd(const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const OrderInfo& ord);
  void recv_ModifyOrd(ProductRTInfo& _return);
  void AddOrdDetail(AddOrdDetailRT& _return, const std::string& strSid, const std::string& strUserID, const OrderDetail& orddt);
  void send_AddOrdDetail(const std::string& strSid, const std::string& strUserID, const OrderDetail& orddt);
  void recv_AddOrdDetail(AddOrdDetailRT& _return);
  void RemoveOrdDetail(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const std::string& strOrddtID);
  void send_RemoveOrdDetail(const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const std::string& strOrddtID);
  void recv_RemoveOrdDetail(ProductRTInfo& _return);
  void QueryOrd(QueryOrdRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID);
  void send_QueryOrd(const std::string& strSid, const std::string& strUserID, const std::string& strOrdID);
  void recv_QueryOrd(QueryOrdRT& _return);
  void QueryAllOrd(QueryAllOrdRT& _return, const std::string& strSid, const std::string& strUserID, const QueryAllOrdParam& qryparam);
  void send_QueryAllOrd(const std::string& strSid, const std::string& strUserID, const QueryAllOrdParam& qryparam);
  void recv_QueryAllOrd(QueryAllOrdRT& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class OrderServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<OrderServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (OrderServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AddOrd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveOrd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ModifyOrd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddOrdDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveOrdDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryOrd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryAllOrd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  OrderServiceProcessor(::apache::thrift::stdcxx::shared_ptr<OrderServiceIf> iface) :
    iface_(iface) {
    processMap_["AddOrd"] = &OrderServiceProcessor::process_AddOrd;
    processMap_["RemoveOrd"] = &OrderServiceProcessor::process_RemoveOrd;
    processMap_["ModifyOrd"] = &OrderServiceProcessor::process_ModifyOrd;
    processMap_["AddOrdDetail"] = &OrderServiceProcessor::process_AddOrdDetail;
    processMap_["RemoveOrdDetail"] = &OrderServiceProcessor::process_RemoveOrdDetail;
    processMap_["QueryOrd"] = &OrderServiceProcessor::process_QueryOrd;
    processMap_["QueryAllOrd"] = &OrderServiceProcessor::process_QueryAllOrd;
  }

  virtual ~OrderServiceProcessor() {}
};

class OrderServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  OrderServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< OrderServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< OrderServiceIfFactory > handlerFactory_;
};

class OrderServiceMultiface : virtual public OrderServiceIf {
 public:
  OrderServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<OrderServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~OrderServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<OrderServiceIf> > ifaces_;
  OrderServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<OrderServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AddOrd(AddOrdRT& _return, const std::string& strSid, const std::string& strUserID, const OrderInfo& ord) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddOrd(_return, strSid, strUserID, ord);
    }
    ifaces_[i]->AddOrd(_return, strSid, strUserID, ord);
    return;
  }

  void RemoveOrd(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const int32_t uiIncDtl) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveOrd(_return, strSid, strUserID, strOrdID, uiIncDtl);
    }
    ifaces_[i]->RemoveOrd(_return, strSid, strUserID, strOrdID, uiIncDtl);
    return;
  }

  void ModifyOrd(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const OrderInfo& ord) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ModifyOrd(_return, strSid, strUserID, strOrdID, ord);
    }
    ifaces_[i]->ModifyOrd(_return, strSid, strUserID, strOrdID, ord);
    return;
  }

  void AddOrdDetail(AddOrdDetailRT& _return, const std::string& strSid, const std::string& strUserID, const OrderDetail& orddt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddOrdDetail(_return, strSid, strUserID, orddt);
    }
    ifaces_[i]->AddOrdDetail(_return, strSid, strUserID, orddt);
    return;
  }

  void RemoveOrdDetail(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const std::string& strOrddtID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveOrdDetail(_return, strSid, strUserID, strOrdID, strOrddtID);
    }
    ifaces_[i]->RemoveOrdDetail(_return, strSid, strUserID, strOrdID, strOrddtID);
    return;
  }

  void QueryOrd(QueryOrdRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryOrd(_return, strSid, strUserID, strOrdID);
    }
    ifaces_[i]->QueryOrd(_return, strSid, strUserID, strOrdID);
    return;
  }

  void QueryAllOrd(QueryAllOrdRT& _return, const std::string& strSid, const std::string& strUserID, const QueryAllOrdParam& qryparam) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryAllOrd(_return, strSid, strUserID, qryparam);
    }
    ifaces_[i]->QueryAllOrd(_return, strSid, strUserID, qryparam);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class OrderServiceConcurrentClient : virtual public OrderServiceIf {
 public:
  OrderServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  OrderServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AddOrd(AddOrdRT& _return, const std::string& strSid, const std::string& strUserID, const OrderInfo& ord);
  int32_t send_AddOrd(const std::string& strSid, const std::string& strUserID, const OrderInfo& ord);
  void recv_AddOrd(AddOrdRT& _return, const int32_t seqid);
  void RemoveOrd(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const int32_t uiIncDtl);
  int32_t send_RemoveOrd(const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const int32_t uiIncDtl);
  void recv_RemoveOrd(ProductRTInfo& _return, const int32_t seqid);
  void ModifyOrd(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const OrderInfo& ord);
  int32_t send_ModifyOrd(const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const OrderInfo& ord);
  void recv_ModifyOrd(ProductRTInfo& _return, const int32_t seqid);
  void AddOrdDetail(AddOrdDetailRT& _return, const std::string& strSid, const std::string& strUserID, const OrderDetail& orddt);
  int32_t send_AddOrdDetail(const std::string& strSid, const std::string& strUserID, const OrderDetail& orddt);
  void recv_AddOrdDetail(AddOrdDetailRT& _return, const int32_t seqid);
  void RemoveOrdDetail(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const std::string& strOrddtID);
  int32_t send_RemoveOrdDetail(const std::string& strSid, const std::string& strUserID, const std::string& strOrdID, const std::string& strOrddtID);
  void recv_RemoveOrdDetail(ProductRTInfo& _return, const int32_t seqid);
  void QueryOrd(QueryOrdRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strOrdID);
  int32_t send_QueryOrd(const std::string& strSid, const std::string& strUserID, const std::string& strOrdID);
  void recv_QueryOrd(QueryOrdRT& _return, const int32_t seqid);
  void QueryAllOrd(QueryAllOrdRT& _return, const std::string& strSid, const std::string& strUserID, const QueryAllOrdParam& qryparam);
  int32_t send_QueryAllOrd(const std::string& strSid, const std::string& strUserID, const QueryAllOrdParam& qryparam);
  void recv_QueryAllOrd(QueryAllOrdRT& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
