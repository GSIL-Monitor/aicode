/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TransFunc_H
#define TransFunc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Trans_types.h"

namespace Trans { namespace Service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TransFuncIf {
 public:
  virtual ~TransFuncIf() {}
  virtual void ProcessMsg(TReturnInfo& _return, const TReqInfo& reqinfo) = 0;
  virtual void SendMsg(const TReqInfo& reqinfo) = 0;
};

class TransFuncIfFactory {
 public:
  typedef TransFuncIf Handler;

  virtual ~TransFuncIfFactory() {}

  virtual TransFuncIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TransFuncIf* /* handler */) = 0;
};

class TransFuncIfSingletonFactory : virtual public TransFuncIfFactory {
 public:
  TransFuncIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TransFuncIf>& iface) : iface_(iface) {}
  virtual ~TransFuncIfSingletonFactory() {}

  virtual TransFuncIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TransFuncIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TransFuncIf> iface_;
};

class TransFuncNull : virtual public TransFuncIf {
 public:
  virtual ~TransFuncNull() {}
  void ProcessMsg(TReturnInfo& /* _return */, const TReqInfo& /* reqinfo */) {
    return;
  }
  void SendMsg(const TReqInfo& /* reqinfo */) {
    return;
  }
};

typedef struct _TransFunc_ProcessMsg_args__isset {
  _TransFunc_ProcessMsg_args__isset() : reqinfo(false) {}
  bool reqinfo :1;
} _TransFunc_ProcessMsg_args__isset;

class TransFunc_ProcessMsg_args {
 public:

  TransFunc_ProcessMsg_args(const TransFunc_ProcessMsg_args&);
  TransFunc_ProcessMsg_args& operator=(const TransFunc_ProcessMsg_args&);
  TransFunc_ProcessMsg_args() {
  }

  virtual ~TransFunc_ProcessMsg_args() throw();
  TReqInfo reqinfo;

  _TransFunc_ProcessMsg_args__isset __isset;

  void __set_reqinfo(const TReqInfo& val);

  bool operator == (const TransFunc_ProcessMsg_args & rhs) const
  {
    if (!(reqinfo == rhs.reqinfo))
      return false;
    return true;
  }
  bool operator != (const TransFunc_ProcessMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransFunc_ProcessMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TransFunc_ProcessMsg_pargs {
 public:


  virtual ~TransFunc_ProcessMsg_pargs() throw();
  const TReqInfo* reqinfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TransFunc_ProcessMsg_result__isset {
  _TransFunc_ProcessMsg_result__isset() : success(false) {}
  bool success :1;
} _TransFunc_ProcessMsg_result__isset;

class TransFunc_ProcessMsg_result {
 public:

  TransFunc_ProcessMsg_result(const TransFunc_ProcessMsg_result&);
  TransFunc_ProcessMsg_result& operator=(const TransFunc_ProcessMsg_result&);
  TransFunc_ProcessMsg_result() {
  }

  virtual ~TransFunc_ProcessMsg_result() throw();
  TReturnInfo success;

  _TransFunc_ProcessMsg_result__isset __isset;

  void __set_success(const TReturnInfo& val);

  bool operator == (const TransFunc_ProcessMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TransFunc_ProcessMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransFunc_ProcessMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TransFunc_ProcessMsg_presult__isset {
  _TransFunc_ProcessMsg_presult__isset() : success(false) {}
  bool success :1;
} _TransFunc_ProcessMsg_presult__isset;

class TransFunc_ProcessMsg_presult {
 public:


  virtual ~TransFunc_ProcessMsg_presult() throw();
  TReturnInfo* success;

  _TransFunc_ProcessMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TransFunc_SendMsg_args__isset {
  _TransFunc_SendMsg_args__isset() : reqinfo(false) {}
  bool reqinfo :1;
} _TransFunc_SendMsg_args__isset;

class TransFunc_SendMsg_args {
 public:

  TransFunc_SendMsg_args(const TransFunc_SendMsg_args&);
  TransFunc_SendMsg_args& operator=(const TransFunc_SendMsg_args&);
  TransFunc_SendMsg_args() {
  }

  virtual ~TransFunc_SendMsg_args() throw();
  TReqInfo reqinfo;

  _TransFunc_SendMsg_args__isset __isset;

  void __set_reqinfo(const TReqInfo& val);

  bool operator == (const TransFunc_SendMsg_args & rhs) const
  {
    if (!(reqinfo == rhs.reqinfo))
      return false;
    return true;
  }
  bool operator != (const TransFunc_SendMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransFunc_SendMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TransFunc_SendMsg_pargs {
 public:


  virtual ~TransFunc_SendMsg_pargs() throw();
  const TReqInfo* reqinfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TransFuncClient : virtual public TransFuncIf {
 public:
  TransFuncClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TransFuncClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ProcessMsg(TReturnInfo& _return, const TReqInfo& reqinfo);
  void send_ProcessMsg(const TReqInfo& reqinfo);
  void recv_ProcessMsg(TReturnInfo& _return);
  void SendMsg(const TReqInfo& reqinfo);
  void send_SendMsg(const TReqInfo& reqinfo);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TransFuncProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TransFuncIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TransFuncProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ProcessMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TransFuncProcessor(::apache::thrift::stdcxx::shared_ptr<TransFuncIf> iface) :
    iface_(iface) {
    processMap_["ProcessMsg"] = &TransFuncProcessor::process_ProcessMsg;
    processMap_["SendMsg"] = &TransFuncProcessor::process_SendMsg;
  }

  virtual ~TransFuncProcessor() {}
};

class TransFuncProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TransFuncProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TransFuncIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TransFuncIfFactory > handlerFactory_;
};

class TransFuncMultiface : virtual public TransFuncIf {
 public:
  TransFuncMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TransFuncIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TransFuncMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TransFuncIf> > ifaces_;
  TransFuncMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TransFuncIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ProcessMsg(TReturnInfo& _return, const TReqInfo& reqinfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProcessMsg(_return, reqinfo);
    }
    ifaces_[i]->ProcessMsg(_return, reqinfo);
    return;
  }

  void SendMsg(const TReqInfo& reqinfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendMsg(reqinfo);
    }
    ifaces_[i]->SendMsg(reqinfo);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TransFuncConcurrentClient : virtual public TransFuncIf {
 public:
  TransFuncConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TransFuncConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ProcessMsg(TReturnInfo& _return, const TReqInfo& reqinfo);
  int32_t send_ProcessMsg(const TReqInfo& reqinfo);
  void recv_ProcessMsg(TReturnInfo& _return, const int32_t seqid);
  void SendMsg(const TReqInfo& reqinfo);
  void send_SendMsg(const TReqInfo& reqinfo);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
