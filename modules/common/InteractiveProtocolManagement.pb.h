// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InteractiveProtocolManagement.proto

#ifndef PROTOBUF_InteractiveProtocolManagement_2eproto__INCLUDED
#define PROTOBUF_InteractiveProtocolManagement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Management {
namespace Interactive {
namespace Message {
class AccessedDevice;
class AccessedDeviceDefaultTypeInternal;
extern AccessedDeviceDefaultTypeInternal _AccessedDevice_default_instance_;
class AccessedUser;
class AccessedUserDefaultTypeInternal;
extern AccessedUserDefaultTypeInternal _AccessedUser_default_instance_;
class AddClusterReq;
class AddClusterReqDefaultTypeInternal;
extern AddClusterReqDefaultTypeInternal _AddClusterReq_default_instance_;
class AddClusterRsp;
class AddClusterRspDefaultTypeInternal;
extern AddClusterRspDefaultTypeInternal _AddClusterRsp_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class ClusterStatus;
class ClusterStatusDefaultTypeInternal;
extern ClusterStatusDefaultTypeInternal _ClusterStatus_default_instance_;
class DeleteClusterReq;
class DeleteClusterReqDefaultTypeInternal;
extern DeleteClusterReqDefaultTypeInternal _DeleteClusterReq_default_instance_;
class DeleteClusterRsp;
class DeleteClusterRspDefaultTypeInternal;
extern DeleteClusterRspDefaultTypeInternal _DeleteClusterRsp_default_instance_;
class DeviceAccessRecord;
class DeviceAccessRecordDefaultTypeInternal;
extern DeviceAccessRecordDefaultTypeInternal _DeviceAccessRecord_default_instance_;
class ManagementInteractiveMessage;
class ManagementInteractiveMessageDefaultTypeInternal;
extern ManagementInteractiveMessageDefaultTypeInternal _ManagementInteractiveMessage_default_instance_;
class ModifyClusterReq;
class ModifyClusterReqDefaultTypeInternal;
extern ModifyClusterReqDefaultTypeInternal _ModifyClusterReq_default_instance_;
class ModifyClusterRsp;
class ModifyClusterRspDefaultTypeInternal;
extern ModifyClusterRspDefaultTypeInternal _ModifyClusterRsp_default_instance_;
class PushClusterDeviceReq;
class PushClusterDeviceReqDefaultTypeInternal;
extern PushClusterDeviceReqDefaultTypeInternal _PushClusterDeviceReq_default_instance_;
class PushClusterDeviceRsp;
class PushClusterDeviceRspDefaultTypeInternal;
extern PushClusterDeviceRspDefaultTypeInternal _PushClusterDeviceRsp_default_instance_;
class PushClusterUserReq;
class PushClusterUserReqDefaultTypeInternal;
extern PushClusterUserReqDefaultTypeInternal _PushClusterUserReq_default_instance_;
class PushClusterUserRsp;
class PushClusterUserRspDefaultTypeInternal;
extern PushClusterUserRspDefaultTypeInternal _PushClusterUserRsp_default_instance_;
class QueryAllClusterReq;
class QueryAllClusterReqDefaultTypeInternal;
extern QueryAllClusterReqDefaultTypeInternal _QueryAllClusterReq_default_instance_;
class QueryAllClusterRsp;
class QueryAllClusterRspDefaultTypeInternal;
extern QueryAllClusterRspDefaultTypeInternal _QueryAllClusterRsp_default_instance_;
class QueryClusterDeviceReq;
class QueryClusterDeviceReqDefaultTypeInternal;
extern QueryClusterDeviceReqDefaultTypeInternal _QueryClusterDeviceReq_default_instance_;
class QueryClusterDeviceRsp;
class QueryClusterDeviceRspDefaultTypeInternal;
extern QueryClusterDeviceRspDefaultTypeInternal _QueryClusterDeviceRsp_default_instance_;
class QueryClusterInfoReq;
class QueryClusterInfoReqDefaultTypeInternal;
extern QueryClusterInfoReqDefaultTypeInternal _QueryClusterInfoReq_default_instance_;
class QueryClusterInfoRsp;
class QueryClusterInfoRspDefaultTypeInternal;
extern QueryClusterInfoRspDefaultTypeInternal _QueryClusterInfoRsp_default_instance_;
class QueryClusterUserReq;
class QueryClusterUserReqDefaultTypeInternal;
extern QueryClusterUserReqDefaultTypeInternal _QueryClusterUserReq_default_instance_;
class QueryClusterUserRsp;
class QueryClusterUserRspDefaultTypeInternal;
extern QueryClusterUserRspDefaultTypeInternal _QueryClusterUserRsp_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ShakehandClusterReq;
class ShakehandClusterReqDefaultTypeInternal;
extern ShakehandClusterReqDefaultTypeInternal _ShakehandClusterReq_default_instance_;
class ShakehandClusterRsp;
class ShakehandClusterRspDefaultTypeInternal;
extern ShakehandClusterRspDefaultTypeInternal _ShakehandClusterRsp_default_instance_;
class UserAccessRecord;
class UserAccessRecordDefaultTypeInternal;
extern UserAccessRecordDefaultTypeInternal _UserAccessRecord_default_instance_;
}  // namespace Message
}  // namespace Interactive
}  // namespace Management

namespace Management {
namespace Interactive {
namespace Message {

namespace protobuf_InteractiveProtocolManagement_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_InteractiveProtocolManagement_2eproto

enum ManagementMsgType {
  Init_T = 0,
  AddClusterReq_T = 10000,
  AddClusterRsp_T = 10010,
  DeleteClusterReq_T = 10020,
  DeleteClusterRsp_T = 10030,
  ModifyClusterReq_T = 10040,
  ModifyClusterRsp_T = 10050,
  QueryClusterInfoReq_T = 10060,
  QueryClusterInfoRsp_T = 10070,
  ShakehandClusterReq_T = 10080,
  ShakehandClusterRsp_T = 10090,
  QueryAllClusterReq_T = 10100,
  QueryAllClusterRsp_T = 10110,
  QueryClusterDeviceReq_T = 10220,
  QueryClusterDeviceRsp_T = 10230,
  QueryClusterUserReq_T = 10300,
  QueryClusterUserRsp_T = 10310,
  PushClusterDeviceReq_T = 10500,
  PushClusterDeviceRsp_T = 10510,
  PushClusterUserReq_T = 10520,
  PushClusterUserRsp_T = 10530,
  ManagementMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ManagementMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ManagementMsgType_IsValid(int value);
const ManagementMsgType ManagementMsgType_MIN = Init_T;
const ManagementMsgType ManagementMsgType_MAX = PushClusterUserRsp_T;
const int ManagementMsgType_ARRAYSIZE = ManagementMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ManagementMsgType_descriptor();
inline const ::std::string& ManagementMsgType_Name(ManagementMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ManagementMsgType_descriptor(), value);
}
inline bool ManagementMsgType_Parse(
    const ::std::string& name, ManagementMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ManagementMsgType>(
    ManagementMsgType_descriptor(), name, value);
}
// ===================================================================

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }

  void Swap(Cluster* other);

  // implements Message ----------------------------------------------

  inline Cluster* New() const PROTOBUF_FINAL { return New(NULL); }

  Cluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strClusterID = 1;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 1;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // string strClusterAddress = 2;
  void clear_strclusteraddress();
  static const int kStrClusterAddressFieldNumber = 2;
  const ::std::string& strclusteraddress() const;
  void set_strclusteraddress(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusteraddress(::std::string&& value);
  #endif
  void set_strclusteraddress(const char* value);
  void set_strclusteraddress(const char* value, size_t size);
  ::std::string* mutable_strclusteraddress();
  ::std::string* release_strclusteraddress();
  void set_allocated_strclusteraddress(::std::string* strclusteraddress);

  // string strManagementAddress = 3;
  void clear_strmanagementaddress();
  static const int kStrManagementAddressFieldNumber = 3;
  const ::std::string& strmanagementaddress() const;
  void set_strmanagementaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_strmanagementaddress(::std::string&& value);
  #endif
  void set_strmanagementaddress(const char* value);
  void set_strmanagementaddress(const char* value, size_t size);
  ::std::string* mutable_strmanagementaddress();
  ::std::string* release_strmanagementaddress();
  void set_allocated_strmanagementaddress(::std::string* strmanagementaddress);

  // string strAliasname = 4;
  void clear_straliasname();
  static const int kStrAliasnameFieldNumber = 4;
  const ::std::string& straliasname() const;
  void set_straliasname(const ::std::string& value);
  #if LANG_CXX11
  void set_straliasname(::std::string&& value);
  #endif
  void set_straliasname(const char* value);
  void set_straliasname(const char* value, size_t size);
  ::std::string* mutable_straliasname();
  ::std::string* release_straliasname();
  void set_allocated_straliasname(::std::string* straliasname);

  // string strCreatedate = 7;
  void clear_strcreatedate();
  static const int kStrCreatedateFieldNumber = 7;
  const ::std::string& strcreatedate() const;
  void set_strcreatedate(const ::std::string& value);
  #if LANG_CXX11
  void set_strcreatedate(::std::string&& value);
  #endif
  void set_strcreatedate(const char* value);
  void set_strcreatedate(const char* value, size_t size);
  ::std::string* mutable_strcreatedate();
  ::std::string* release_strcreatedate();
  void set_allocated_strcreatedate(::std::string* strcreatedate);

  // uint32 uiUserTotalnumber = 5;
  void clear_uiusertotalnumber();
  static const int kUiUserTotalnumberFieldNumber = 5;
  ::google::protobuf::uint32 uiusertotalnumber() const;
  void set_uiusertotalnumber(::google::protobuf::uint32 value);

  // uint32 uiDeviceTotalnumber = 6;
  void clear_uidevicetotalnumber();
  static const int kUiDeviceTotalnumberFieldNumber = 6;
  ::google::protobuf::uint32 uidevicetotalnumber() const;
  void set_uidevicetotalnumber(::google::protobuf::uint32 value);

  // uint32 uiStatus = 8;
  void clear_uistatus();
  static const int kUiStatusFieldNumber = 8;
  ::google::protobuf::uint32 uistatus() const;
  void set_uistatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.Cluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  ::google::protobuf::internal::ArenaStringPtr strclusteraddress_;
  ::google::protobuf::internal::ArenaStringPtr strmanagementaddress_;
  ::google::protobuf::internal::ArenaStringPtr straliasname_;
  ::google::protobuf::internal::ArenaStringPtr strcreatedate_;
  ::google::protobuf::uint32 uiusertotalnumber_;
  ::google::protobuf::uint32 uidevicetotalnumber_;
  ::google::protobuf::uint32 uistatus_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.ClusterStatus) */ {
 public:
  ClusterStatus();
  virtual ~ClusterStatus();

  ClusterStatus(const ClusterStatus& from);

  inline ClusterStatus& operator=(const ClusterStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterStatus& default_instance();

  static inline const ClusterStatus* internal_default_instance() {
    return reinterpret_cast<const ClusterStatus*>(
               &_ClusterStatus_default_instance_);
  }

  void Swap(ClusterStatus* other);

  // implements Message ----------------------------------------------

  inline ClusterStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterStatus& from);
  void MergeFrom(const ClusterStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Management.Interactive.Message.Cluster clusterInfo = 1;
  bool has_clusterinfo() const;
  void clear_clusterinfo();
  static const int kClusterInfoFieldNumber = 1;
  const ::Management::Interactive::Message::Cluster& clusterinfo() const;
  ::Management::Interactive::Message::Cluster* mutable_clusterinfo();
  ::Management::Interactive::Message::Cluster* release_clusterinfo();
  void set_allocated_clusterinfo(::Management::Interactive::Message::Cluster* clusterinfo);

  // uint32 uiStatus = 2;
  void clear_uistatus();
  static const int kUiStatusFieldNumber = 2;
  ::google::protobuf::uint32 uistatus() const;
  void set_uistatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.ClusterStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Management::Interactive::Message::Cluster* clusterinfo_;
  ::google::protobuf::uint32 uistatus_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessedDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.AccessedDevice) */ {
 public:
  AccessedDevice();
  virtual ~AccessedDevice();

  AccessedDevice(const AccessedDevice& from);

  inline AccessedDevice& operator=(const AccessedDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessedDevice& default_instance();

  static inline const AccessedDevice* internal_default_instance() {
    return reinterpret_cast<const AccessedDevice*>(
               &_AccessedDevice_default_instance_);
  }

  void Swap(AccessedDevice* other);

  // implements Message ----------------------------------------------

  inline AccessedDevice* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessedDevice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessedDevice& from);
  void MergeFrom(const AccessedDevice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessedDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strDeviceID = 1;
  void clear_strdeviceid();
  static const int kStrDeviceIDFieldNumber = 1;
  const ::std::string& strdeviceid() const;
  void set_strdeviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_strdeviceid(::std::string&& value);
  #endif
  void set_strdeviceid(const char* value);
  void set_strdeviceid(const char* value, size_t size);
  ::std::string* mutable_strdeviceid();
  ::std::string* release_strdeviceid();
  void set_allocated_strdeviceid(::std::string* strdeviceid);

  // string strDeviceName = 2;
  void clear_strdevicename();
  static const int kStrDeviceNameFieldNumber = 2;
  const ::std::string& strdevicename() const;
  void set_strdevicename(const ::std::string& value);
  #if LANG_CXX11
  void set_strdevicename(::std::string&& value);
  #endif
  void set_strdevicename(const char* value);
  void set_strdevicename(const char* value, size_t size);
  ::std::string* mutable_strdevicename();
  ::std::string* release_strdevicename();
  void set_allocated_strdevicename(::std::string* strdevicename);

  // string strLoginTime = 4;
  void clear_strlogintime();
  static const int kStrLoginTimeFieldNumber = 4;
  const ::std::string& strlogintime() const;
  void set_strlogintime(const ::std::string& value);
  #if LANG_CXX11
  void set_strlogintime(::std::string&& value);
  #endif
  void set_strlogintime(const char* value);
  void set_strlogintime(const char* value, size_t size);
  ::std::string* mutable_strlogintime();
  ::std::string* release_strlogintime();
  void set_allocated_strlogintime(::std::string* strlogintime);

  // string strLogoutTime = 5;
  void clear_strlogouttime();
  static const int kStrLogoutTimeFieldNumber = 5;
  const ::std::string& strlogouttime() const;
  void set_strlogouttime(const ::std::string& value);
  #if LANG_CXX11
  void set_strlogouttime(::std::string&& value);
  #endif
  void set_strlogouttime(const char* value);
  void set_strlogouttime(const char* value, size_t size);
  ::std::string* mutable_strlogouttime();
  ::std::string* release_strlogouttime();
  void set_allocated_strlogouttime(::std::string* strlogouttime);

  // uint32 uiDeviceType = 3;
  void clear_uidevicetype();
  static const int kUiDeviceTypeFieldNumber = 3;
  ::google::protobuf::uint32 uidevicetype() const;
  void set_uidevicetype(::google::protobuf::uint32 value);

  // uint32 uiOnlineDuration = 6;
  void clear_uionlineduration();
  static const int kUiOnlineDurationFieldNumber = 6;
  ::google::protobuf::uint32 uionlineduration() const;
  void set_uionlineduration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.AccessedDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strdeviceid_;
  ::google::protobuf::internal::ArenaStringPtr strdevicename_;
  ::google::protobuf::internal::ArenaStringPtr strlogintime_;
  ::google::protobuf::internal::ArenaStringPtr strlogouttime_;
  ::google::protobuf::uint32 uidevicetype_;
  ::google::protobuf::uint32 uionlineduration_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessedUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.AccessedUser) */ {
 public:
  AccessedUser();
  virtual ~AccessedUser();

  AccessedUser(const AccessedUser& from);

  inline AccessedUser& operator=(const AccessedUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessedUser& default_instance();

  static inline const AccessedUser* internal_default_instance() {
    return reinterpret_cast<const AccessedUser*>(
               &_AccessedUser_default_instance_);
  }

  void Swap(AccessedUser* other);

  // implements Message ----------------------------------------------

  inline AccessedUser* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessedUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessedUser& from);
  void MergeFrom(const AccessedUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessedUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strUserID = 1;
  void clear_struserid();
  static const int kStrUserIDFieldNumber = 1;
  const ::std::string& struserid() const;
  void set_struserid(const ::std::string& value);
  #if LANG_CXX11
  void set_struserid(::std::string&& value);
  #endif
  void set_struserid(const char* value);
  void set_struserid(const char* value, size_t size);
  ::std::string* mutable_struserid();
  ::std::string* release_struserid();
  void set_allocated_struserid(::std::string* struserid);

  // string strUserName = 2;
  void clear_strusername();
  static const int kStrUserNameFieldNumber = 2;
  const ::std::string& strusername() const;
  void set_strusername(const ::std::string& value);
  #if LANG_CXX11
  void set_strusername(::std::string&& value);
  #endif
  void set_strusername(const char* value);
  void set_strusername(const char* value, size_t size);
  ::std::string* mutable_strusername();
  ::std::string* release_strusername();
  void set_allocated_strusername(::std::string* strusername);

  // string strUserAliasname = 3;
  void clear_struseraliasname();
  static const int kStrUserAliasnameFieldNumber = 3;
  const ::std::string& struseraliasname() const;
  void set_struseraliasname(const ::std::string& value);
  #if LANG_CXX11
  void set_struseraliasname(::std::string&& value);
  #endif
  void set_struseraliasname(const char* value);
  void set_struseraliasname(const char* value, size_t size);
  ::std::string* mutable_struseraliasname();
  ::std::string* release_struseraliasname();
  void set_allocated_struseraliasname(::std::string* struseraliasname);

  // string strLoginTime = 5;
  void clear_strlogintime();
  static const int kStrLoginTimeFieldNumber = 5;
  const ::std::string& strlogintime() const;
  void set_strlogintime(const ::std::string& value);
  #if LANG_CXX11
  void set_strlogintime(::std::string&& value);
  #endif
  void set_strlogintime(const char* value);
  void set_strlogintime(const char* value, size_t size);
  ::std::string* mutable_strlogintime();
  ::std::string* release_strlogintime();
  void set_allocated_strlogintime(::std::string* strlogintime);

  // string strLogoutTime = 6;
  void clear_strlogouttime();
  static const int kStrLogoutTimeFieldNumber = 6;
  const ::std::string& strlogouttime() const;
  void set_strlogouttime(const ::std::string& value);
  #if LANG_CXX11
  void set_strlogouttime(::std::string&& value);
  #endif
  void set_strlogouttime(const char* value);
  void set_strlogouttime(const char* value, size_t size);
  ::std::string* mutable_strlogouttime();
  ::std::string* release_strlogouttime();
  void set_allocated_strlogouttime(::std::string* strlogouttime);

  // uint32 uiClientType = 4;
  void clear_uiclienttype();
  static const int kUiClientTypeFieldNumber = 4;
  ::google::protobuf::uint32 uiclienttype() const;
  void set_uiclienttype(::google::protobuf::uint32 value);

  // uint32 uiOnlineDuration = 7;
  void clear_uionlineduration();
  static const int kUiOnlineDurationFieldNumber = 7;
  ::google::protobuf::uint32 uionlineduration() const;
  void set_uionlineduration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.AccessedUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr struserid_;
  ::google::protobuf::internal::ArenaStringPtr strusername_;
  ::google::protobuf::internal::ArenaStringPtr struseraliasname_;
  ::google::protobuf::internal::ArenaStringPtr strlogintime_;
  ::google::protobuf::internal::ArenaStringPtr strlogouttime_;
  ::google::protobuf::uint32 uiclienttype_;
  ::google::protobuf::uint32 uionlineduration_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceAccessRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.DeviceAccessRecord) */ {
 public:
  DeviceAccessRecord();
  virtual ~DeviceAccessRecord();

  DeviceAccessRecord(const DeviceAccessRecord& from);

  inline DeviceAccessRecord& operator=(const DeviceAccessRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceAccessRecord& default_instance();

  static inline const DeviceAccessRecord* internal_default_instance() {
    return reinterpret_cast<const DeviceAccessRecord*>(
               &_DeviceAccessRecord_default_instance_);
  }

  void Swap(DeviceAccessRecord* other);

  // implements Message ----------------------------------------------

  inline DeviceAccessRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceAccessRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceAccessRecord& from);
  void MergeFrom(const DeviceAccessRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceAccessRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strAccessID = 1;
  void clear_straccessid();
  static const int kStrAccessIDFieldNumber = 1;
  const ::std::string& straccessid() const;
  void set_straccessid(const ::std::string& value);
  #if LANG_CXX11
  void set_straccessid(::std::string&& value);
  #endif
  void set_straccessid(const char* value);
  void set_straccessid(const char* value, size_t size);
  ::std::string* mutable_straccessid();
  ::std::string* release_straccessid();
  void set_allocated_straccessid(::std::string* straccessid);

  // string strClusterID = 2;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 2;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // string strCreatedate = 4;
  void clear_strcreatedate();
  static const int kStrCreatedateFieldNumber = 4;
  const ::std::string& strcreatedate() const;
  void set_strcreatedate(const ::std::string& value);
  #if LANG_CXX11
  void set_strcreatedate(::std::string&& value);
  #endif
  void set_strcreatedate(const char* value);
  void set_strcreatedate(const char* value, size_t size);
  ::std::string* mutable_strcreatedate();
  ::std::string* release_strcreatedate();
  void set_allocated_strcreatedate(::std::string* strcreatedate);

  // .Management.Interactive.Message.AccessedDevice accessedDevice = 3;
  bool has_accesseddevice() const;
  void clear_accesseddevice();
  static const int kAccessedDeviceFieldNumber = 3;
  const ::Management::Interactive::Message::AccessedDevice& accesseddevice() const;
  ::Management::Interactive::Message::AccessedDevice* mutable_accesseddevice();
  ::Management::Interactive::Message::AccessedDevice* release_accesseddevice();
  void set_allocated_accesseddevice(::Management::Interactive::Message::AccessedDevice* accesseddevice);

  // uint32 uiStatus = 5;
  void clear_uistatus();
  static const int kUiStatusFieldNumber = 5;
  ::google::protobuf::uint32 uistatus() const;
  void set_uistatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.DeviceAccessRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr straccessid_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  ::google::protobuf::internal::ArenaStringPtr strcreatedate_;
  ::Management::Interactive::Message::AccessedDevice* accesseddevice_;
  ::google::protobuf::uint32 uistatus_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAccessRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.UserAccessRecord) */ {
 public:
  UserAccessRecord();
  virtual ~UserAccessRecord();

  UserAccessRecord(const UserAccessRecord& from);

  inline UserAccessRecord& operator=(const UserAccessRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAccessRecord& default_instance();

  static inline const UserAccessRecord* internal_default_instance() {
    return reinterpret_cast<const UserAccessRecord*>(
               &_UserAccessRecord_default_instance_);
  }

  void Swap(UserAccessRecord* other);

  // implements Message ----------------------------------------------

  inline UserAccessRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  UserAccessRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserAccessRecord& from);
  void MergeFrom(const UserAccessRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserAccessRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strAccessID = 1;
  void clear_straccessid();
  static const int kStrAccessIDFieldNumber = 1;
  const ::std::string& straccessid() const;
  void set_straccessid(const ::std::string& value);
  #if LANG_CXX11
  void set_straccessid(::std::string&& value);
  #endif
  void set_straccessid(const char* value);
  void set_straccessid(const char* value, size_t size);
  ::std::string* mutable_straccessid();
  ::std::string* release_straccessid();
  void set_allocated_straccessid(::std::string* straccessid);

  // string strClusterID = 2;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 2;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // string strCreatedate = 4;
  void clear_strcreatedate();
  static const int kStrCreatedateFieldNumber = 4;
  const ::std::string& strcreatedate() const;
  void set_strcreatedate(const ::std::string& value);
  #if LANG_CXX11
  void set_strcreatedate(::std::string&& value);
  #endif
  void set_strcreatedate(const char* value);
  void set_strcreatedate(const char* value, size_t size);
  ::std::string* mutable_strcreatedate();
  ::std::string* release_strcreatedate();
  void set_allocated_strcreatedate(::std::string* strcreatedate);

  // .Management.Interactive.Message.AccessedUser accessedUser = 3;
  bool has_accesseduser() const;
  void clear_accesseduser();
  static const int kAccessedUserFieldNumber = 3;
  const ::Management::Interactive::Message::AccessedUser& accesseduser() const;
  ::Management::Interactive::Message::AccessedUser* mutable_accesseduser();
  ::Management::Interactive::Message::AccessedUser* release_accesseduser();
  void set_allocated_accesseduser(::Management::Interactive::Message::AccessedUser* accesseduser);

  // uint32 uiStatus = 5;
  void clear_uistatus();
  static const int kUiStatusFieldNumber = 5;
  ::google::protobuf::uint32 uistatus() const;
  void set_uistatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.UserAccessRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr straccessid_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  ::google::protobuf::internal::ArenaStringPtr strcreatedate_;
  ::Management::Interactive::Message::AccessedUser* accesseduser_;
  ::google::protobuf::uint32 uistatus_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddClusterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.AddClusterReq) */ {
 public:
  AddClusterReq();
  virtual ~AddClusterReq();

  AddClusterReq(const AddClusterReq& from);

  inline AddClusterReq& operator=(const AddClusterReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddClusterReq& default_instance();

  static inline const AddClusterReq* internal_default_instance() {
    return reinterpret_cast<const AddClusterReq*>(
               &_AddClusterReq_default_instance_);
  }

  void Swap(AddClusterReq* other);

  // implements Message ----------------------------------------------

  inline AddClusterReq* New() const PROTOBUF_FINAL { return New(NULL); }

  AddClusterReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddClusterReq& from);
  void MergeFrom(const AddClusterReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddClusterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Management.Interactive.Message.Cluster clusterInfo = 1;
  bool has_clusterinfo() const;
  void clear_clusterinfo();
  static const int kClusterInfoFieldNumber = 1;
  const ::Management::Interactive::Message::Cluster& clusterinfo() const;
  ::Management::Interactive::Message::Cluster* mutable_clusterinfo();
  ::Management::Interactive::Message::Cluster* release_clusterinfo();
  void set_allocated_clusterinfo(::Management::Interactive::Message::Cluster* clusterinfo);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.AddClusterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Management::Interactive::Message::Cluster* clusterinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddClusterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.AddClusterRsp) */ {
 public:
  AddClusterRsp();
  virtual ~AddClusterRsp();

  AddClusterRsp(const AddClusterRsp& from);

  inline AddClusterRsp& operator=(const AddClusterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddClusterRsp& default_instance();

  static inline const AddClusterRsp* internal_default_instance() {
    return reinterpret_cast<const AddClusterRsp*>(
               &_AddClusterRsp_default_instance_);
  }

  void Swap(AddClusterRsp* other);

  // implements Message ----------------------------------------------

  inline AddClusterRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  AddClusterRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddClusterRsp& from);
  void MergeFrom(const AddClusterRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddClusterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strClusterID = 1;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 1;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.AddClusterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteClusterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.DeleteClusterReq) */ {
 public:
  DeleteClusterReq();
  virtual ~DeleteClusterReq();

  DeleteClusterReq(const DeleteClusterReq& from);

  inline DeleteClusterReq& operator=(const DeleteClusterReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteClusterReq& default_instance();

  static inline const DeleteClusterReq* internal_default_instance() {
    return reinterpret_cast<const DeleteClusterReq*>(
               &_DeleteClusterReq_default_instance_);
  }

  void Swap(DeleteClusterReq* other);

  // implements Message ----------------------------------------------

  inline DeleteClusterReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteClusterReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteClusterReq& from);
  void MergeFrom(const DeleteClusterReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteClusterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strClusterID = 1;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 1;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.DeleteClusterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteClusterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.DeleteClusterRsp) */ {
 public:
  DeleteClusterRsp();
  virtual ~DeleteClusterRsp();

  DeleteClusterRsp(const DeleteClusterRsp& from);

  inline DeleteClusterRsp& operator=(const DeleteClusterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteClusterRsp& default_instance();

  static inline const DeleteClusterRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteClusterRsp*>(
               &_DeleteClusterRsp_default_instance_);
  }

  void Swap(DeleteClusterRsp* other);

  // implements Message ----------------------------------------------

  inline DeleteClusterRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteClusterRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteClusterRsp& from);
  void MergeFrom(const DeleteClusterRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteClusterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strValue = 1;
  void clear_strvalue();
  static const int kStrValueFieldNumber = 1;
  const ::std::string& strvalue() const;
  void set_strvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_strvalue(::std::string&& value);
  #endif
  void set_strvalue(const char* value);
  void set_strvalue(const char* value, size_t size);
  ::std::string* mutable_strvalue();
  ::std::string* release_strvalue();
  void set_allocated_strvalue(::std::string* strvalue);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.DeleteClusterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strvalue_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModifyClusterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.ModifyClusterReq) */ {
 public:
  ModifyClusterReq();
  virtual ~ModifyClusterReq();

  ModifyClusterReq(const ModifyClusterReq& from);

  inline ModifyClusterReq& operator=(const ModifyClusterReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyClusterReq& default_instance();

  static inline const ModifyClusterReq* internal_default_instance() {
    return reinterpret_cast<const ModifyClusterReq*>(
               &_ModifyClusterReq_default_instance_);
  }

  void Swap(ModifyClusterReq* other);

  // implements Message ----------------------------------------------

  inline ModifyClusterReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyClusterReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyClusterReq& from);
  void MergeFrom(const ModifyClusterReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyClusterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Management.Interactive.Message.Cluster clusterInfo = 1;
  bool has_clusterinfo() const;
  void clear_clusterinfo();
  static const int kClusterInfoFieldNumber = 1;
  const ::Management::Interactive::Message::Cluster& clusterinfo() const;
  ::Management::Interactive::Message::Cluster* mutable_clusterinfo();
  ::Management::Interactive::Message::Cluster* release_clusterinfo();
  void set_allocated_clusterinfo(::Management::Interactive::Message::Cluster* clusterinfo);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.ModifyClusterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Management::Interactive::Message::Cluster* clusterinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModifyClusterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.ModifyClusterRsp) */ {
 public:
  ModifyClusterRsp();
  virtual ~ModifyClusterRsp();

  ModifyClusterRsp(const ModifyClusterRsp& from);

  inline ModifyClusterRsp& operator=(const ModifyClusterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyClusterRsp& default_instance();

  static inline const ModifyClusterRsp* internal_default_instance() {
    return reinterpret_cast<const ModifyClusterRsp*>(
               &_ModifyClusterRsp_default_instance_);
  }

  void Swap(ModifyClusterRsp* other);

  // implements Message ----------------------------------------------

  inline ModifyClusterRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyClusterRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyClusterRsp& from);
  void MergeFrom(const ModifyClusterRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyClusterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strValue = 1;
  void clear_strvalue();
  static const int kStrValueFieldNumber = 1;
  const ::std::string& strvalue() const;
  void set_strvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_strvalue(::std::string&& value);
  #endif
  void set_strvalue(const char* value);
  void set_strvalue(const char* value, size_t size);
  ::std::string* mutable_strvalue();
  ::std::string* release_strvalue();
  void set_allocated_strvalue(::std::string* strvalue);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.ModifyClusterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strvalue_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryClusterInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.QueryClusterInfoReq) */ {
 public:
  QueryClusterInfoReq();
  virtual ~QueryClusterInfoReq();

  QueryClusterInfoReq(const QueryClusterInfoReq& from);

  inline QueryClusterInfoReq& operator=(const QueryClusterInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryClusterInfoReq& default_instance();

  static inline const QueryClusterInfoReq* internal_default_instance() {
    return reinterpret_cast<const QueryClusterInfoReq*>(
               &_QueryClusterInfoReq_default_instance_);
  }

  void Swap(QueryClusterInfoReq* other);

  // implements Message ----------------------------------------------

  inline QueryClusterInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryClusterInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryClusterInfoReq& from);
  void MergeFrom(const QueryClusterInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryClusterInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strClusterID = 1;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 1;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.QueryClusterInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryClusterInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.QueryClusterInfoRsp) */ {
 public:
  QueryClusterInfoRsp();
  virtual ~QueryClusterInfoRsp();

  QueryClusterInfoRsp(const QueryClusterInfoRsp& from);

  inline QueryClusterInfoRsp& operator=(const QueryClusterInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryClusterInfoRsp& default_instance();

  static inline const QueryClusterInfoRsp* internal_default_instance() {
    return reinterpret_cast<const QueryClusterInfoRsp*>(
               &_QueryClusterInfoRsp_default_instance_);
  }

  void Swap(QueryClusterInfoRsp* other);

  // implements Message ----------------------------------------------

  inline QueryClusterInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryClusterInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryClusterInfoRsp& from);
  void MergeFrom(const QueryClusterInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryClusterInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Management.Interactive.Message.ClusterStatus clusterStatus = 1;
  bool has_clusterstatus() const;
  void clear_clusterstatus();
  static const int kClusterStatusFieldNumber = 1;
  const ::Management::Interactive::Message::ClusterStatus& clusterstatus() const;
  ::Management::Interactive::Message::ClusterStatus* mutable_clusterstatus();
  ::Management::Interactive::Message::ClusterStatus* release_clusterstatus();
  void set_allocated_clusterstatus(::Management::Interactive::Message::ClusterStatus* clusterstatus);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.QueryClusterInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Management::Interactive::Message::ClusterStatus* clusterstatus_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShakehandClusterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.ShakehandClusterReq) */ {
 public:
  ShakehandClusterReq();
  virtual ~ShakehandClusterReq();

  ShakehandClusterReq(const ShakehandClusterReq& from);

  inline ShakehandClusterReq& operator=(const ShakehandClusterReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakehandClusterReq& default_instance();

  static inline const ShakehandClusterReq* internal_default_instance() {
    return reinterpret_cast<const ShakehandClusterReq*>(
               &_ShakehandClusterReq_default_instance_);
  }

  void Swap(ShakehandClusterReq* other);

  // implements Message ----------------------------------------------

  inline ShakehandClusterReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ShakehandClusterReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShakehandClusterReq& from);
  void MergeFrom(const ShakehandClusterReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShakehandClusterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strClusterID = 1;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 1;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.ShakehandClusterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShakehandClusterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.ShakehandClusterRsp) */ {
 public:
  ShakehandClusterRsp();
  virtual ~ShakehandClusterRsp();

  ShakehandClusterRsp(const ShakehandClusterRsp& from);

  inline ShakehandClusterRsp& operator=(const ShakehandClusterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakehandClusterRsp& default_instance();

  static inline const ShakehandClusterRsp* internal_default_instance() {
    return reinterpret_cast<const ShakehandClusterRsp*>(
               &_ShakehandClusterRsp_default_instance_);
  }

  void Swap(ShakehandClusterRsp* other);

  // implements Message ----------------------------------------------

  inline ShakehandClusterRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ShakehandClusterRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShakehandClusterRsp& from);
  void MergeFrom(const ShakehandClusterRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShakehandClusterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strValue = 1;
  void clear_strvalue();
  static const int kStrValueFieldNumber = 1;
  const ::std::string& strvalue() const;
  void set_strvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_strvalue(::std::string&& value);
  #endif
  void set_strvalue(const char* value);
  void set_strvalue(const char* value, size_t size);
  ::std::string* mutable_strvalue();
  ::std::string* release_strvalue();
  void set_allocated_strvalue(::std::string* strvalue);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.ShakehandClusterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strvalue_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryAllClusterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.QueryAllClusterReq) */ {
 public:
  QueryAllClusterReq();
  virtual ~QueryAllClusterReq();

  QueryAllClusterReq(const QueryAllClusterReq& from);

  inline QueryAllClusterReq& operator=(const QueryAllClusterReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAllClusterReq& default_instance();

  static inline const QueryAllClusterReq* internal_default_instance() {
    return reinterpret_cast<const QueryAllClusterReq*>(
               &_QueryAllClusterReq_default_instance_);
  }

  void Swap(QueryAllClusterReq* other);

  // implements Message ----------------------------------------------

  inline QueryAllClusterReq* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryAllClusterReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryAllClusterReq& from);
  void MergeFrom(const QueryAllClusterReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryAllClusterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strManagementAddress = 1;
  void clear_strmanagementaddress();
  static const int kStrManagementAddressFieldNumber = 1;
  const ::std::string& strmanagementaddress() const;
  void set_strmanagementaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_strmanagementaddress(::std::string&& value);
  #endif
  void set_strmanagementaddress(const char* value);
  void set_strmanagementaddress(const char* value, size_t size);
  ::std::string* mutable_strmanagementaddress();
  ::std::string* release_strmanagementaddress();
  void set_allocated_strmanagementaddress(::std::string* strmanagementaddress);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.QueryAllClusterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strmanagementaddress_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryAllClusterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.QueryAllClusterRsp) */ {
 public:
  QueryAllClusterRsp();
  virtual ~QueryAllClusterRsp();

  QueryAllClusterRsp(const QueryAllClusterRsp& from);

  inline QueryAllClusterRsp& operator=(const QueryAllClusterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAllClusterRsp& default_instance();

  static inline const QueryAllClusterRsp* internal_default_instance() {
    return reinterpret_cast<const QueryAllClusterRsp*>(
               &_QueryAllClusterRsp_default_instance_);
  }

  void Swap(QueryAllClusterRsp* other);

  // implements Message ----------------------------------------------

  inline QueryAllClusterRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryAllClusterRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryAllClusterRsp& from);
  void MergeFrom(const QueryAllClusterRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryAllClusterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Management.Interactive.Message.ClusterStatus clusterStatus = 1;
  int clusterstatus_size() const;
  void clear_clusterstatus();
  static const int kClusterStatusFieldNumber = 1;
  const ::Management::Interactive::Message::ClusterStatus& clusterstatus(int index) const;
  ::Management::Interactive::Message::ClusterStatus* mutable_clusterstatus(int index);
  ::Management::Interactive::Message::ClusterStatus* add_clusterstatus();
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::ClusterStatus >*
      mutable_clusterstatus();
  const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::ClusterStatus >&
      clusterstatus() const;

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.QueryAllClusterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::ClusterStatus > clusterstatus_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryClusterDeviceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.QueryClusterDeviceReq) */ {
 public:
  QueryClusterDeviceReq();
  virtual ~QueryClusterDeviceReq();

  QueryClusterDeviceReq(const QueryClusterDeviceReq& from);

  inline QueryClusterDeviceReq& operator=(const QueryClusterDeviceReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryClusterDeviceReq& default_instance();

  static inline const QueryClusterDeviceReq* internal_default_instance() {
    return reinterpret_cast<const QueryClusterDeviceReq*>(
               &_QueryClusterDeviceReq_default_instance_);
  }

  void Swap(QueryClusterDeviceReq* other);

  // implements Message ----------------------------------------------

  inline QueryClusterDeviceReq* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryClusterDeviceReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryClusterDeviceReq& from);
  void MergeFrom(const QueryClusterDeviceReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryClusterDeviceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strClusterID = 1;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 1;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // string strBegindate = 2;
  void clear_strbegindate();
  static const int kStrBegindateFieldNumber = 2;
  const ::std::string& strbegindate() const;
  void set_strbegindate(const ::std::string& value);
  #if LANG_CXX11
  void set_strbegindate(::std::string&& value);
  #endif
  void set_strbegindate(const char* value);
  void set_strbegindate(const char* value, size_t size);
  ::std::string* mutable_strbegindate();
  ::std::string* release_strbegindate();
  void set_allocated_strbegindate(::std::string* strbegindate);

  // string strEnddate = 3;
  void clear_strenddate();
  static const int kStrEnddateFieldNumber = 3;
  const ::std::string& strenddate() const;
  void set_strenddate(const ::std::string& value);
  #if LANG_CXX11
  void set_strenddate(::std::string&& value);
  #endif
  void set_strenddate(const char* value);
  void set_strenddate(const char* value, size_t size);
  ::std::string* mutable_strenddate();
  ::std::string* release_strenddate();
  void set_allocated_strenddate(::std::string* strenddate);

  // uint32 uiRecordType = 4;
  void clear_uirecordtype();
  static const int kUiRecordTypeFieldNumber = 4;
  ::google::protobuf::uint32 uirecordtype() const;
  void set_uirecordtype(::google::protobuf::uint32 value);

  // uint32 uiBeginIndex = 5;
  void clear_uibeginindex();
  static const int kUiBeginIndexFieldNumber = 5;
  ::google::protobuf::uint32 uibeginindex() const;
  void set_uibeginindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.QueryClusterDeviceReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  ::google::protobuf::internal::ArenaStringPtr strbegindate_;
  ::google::protobuf::internal::ArenaStringPtr strenddate_;
  ::google::protobuf::uint32 uirecordtype_;
  ::google::protobuf::uint32 uibeginindex_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryClusterDeviceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.QueryClusterDeviceRsp) */ {
 public:
  QueryClusterDeviceRsp();
  virtual ~QueryClusterDeviceRsp();

  QueryClusterDeviceRsp(const QueryClusterDeviceRsp& from);

  inline QueryClusterDeviceRsp& operator=(const QueryClusterDeviceRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryClusterDeviceRsp& default_instance();

  static inline const QueryClusterDeviceRsp* internal_default_instance() {
    return reinterpret_cast<const QueryClusterDeviceRsp*>(
               &_QueryClusterDeviceRsp_default_instance_);
  }

  void Swap(QueryClusterDeviceRsp* other);

  // implements Message ----------------------------------------------

  inline QueryClusterDeviceRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryClusterDeviceRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryClusterDeviceRsp& from);
  void MergeFrom(const QueryClusterDeviceRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryClusterDeviceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Management.Interactive.Message.AccessedDevice accessedDeviceInfo = 1;
  int accesseddeviceinfo_size() const;
  void clear_accesseddeviceinfo();
  static const int kAccessedDeviceInfoFieldNumber = 1;
  const ::Management::Interactive::Message::AccessedDevice& accesseddeviceinfo(int index) const;
  ::Management::Interactive::Message::AccessedDevice* mutable_accesseddeviceinfo(int index);
  ::Management::Interactive::Message::AccessedDevice* add_accesseddeviceinfo();
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedDevice >*
      mutable_accesseddeviceinfo();
  const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedDevice >&
      accesseddeviceinfo() const;

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.QueryClusterDeviceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedDevice > accesseddeviceinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryClusterUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.QueryClusterUserReq) */ {
 public:
  QueryClusterUserReq();
  virtual ~QueryClusterUserReq();

  QueryClusterUserReq(const QueryClusterUserReq& from);

  inline QueryClusterUserReq& operator=(const QueryClusterUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryClusterUserReq& default_instance();

  static inline const QueryClusterUserReq* internal_default_instance() {
    return reinterpret_cast<const QueryClusterUserReq*>(
               &_QueryClusterUserReq_default_instance_);
  }

  void Swap(QueryClusterUserReq* other);

  // implements Message ----------------------------------------------

  inline QueryClusterUserReq* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryClusterUserReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryClusterUserReq& from);
  void MergeFrom(const QueryClusterUserReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryClusterUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strClusterID = 1;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 1;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // string strBegindate = 2;
  void clear_strbegindate();
  static const int kStrBegindateFieldNumber = 2;
  const ::std::string& strbegindate() const;
  void set_strbegindate(const ::std::string& value);
  #if LANG_CXX11
  void set_strbegindate(::std::string&& value);
  #endif
  void set_strbegindate(const char* value);
  void set_strbegindate(const char* value, size_t size);
  ::std::string* mutable_strbegindate();
  ::std::string* release_strbegindate();
  void set_allocated_strbegindate(::std::string* strbegindate);

  // string strEnddate = 3;
  void clear_strenddate();
  static const int kStrEnddateFieldNumber = 3;
  const ::std::string& strenddate() const;
  void set_strenddate(const ::std::string& value);
  #if LANG_CXX11
  void set_strenddate(::std::string&& value);
  #endif
  void set_strenddate(const char* value);
  void set_strenddate(const char* value, size_t size);
  ::std::string* mutable_strenddate();
  ::std::string* release_strenddate();
  void set_allocated_strenddate(::std::string* strenddate);

  // uint32 uiRecordType = 4;
  void clear_uirecordtype();
  static const int kUiRecordTypeFieldNumber = 4;
  ::google::protobuf::uint32 uirecordtype() const;
  void set_uirecordtype(::google::protobuf::uint32 value);

  // uint32 uiBeginIndex = 5;
  void clear_uibeginindex();
  static const int kUiBeginIndexFieldNumber = 5;
  ::google::protobuf::uint32 uibeginindex() const;
  void set_uibeginindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.QueryClusterUserReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  ::google::protobuf::internal::ArenaStringPtr strbegindate_;
  ::google::protobuf::internal::ArenaStringPtr strenddate_;
  ::google::protobuf::uint32 uirecordtype_;
  ::google::protobuf::uint32 uibeginindex_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryClusterUserRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.QueryClusterUserRsp) */ {
 public:
  QueryClusterUserRsp();
  virtual ~QueryClusterUserRsp();

  QueryClusterUserRsp(const QueryClusterUserRsp& from);

  inline QueryClusterUserRsp& operator=(const QueryClusterUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryClusterUserRsp& default_instance();

  static inline const QueryClusterUserRsp* internal_default_instance() {
    return reinterpret_cast<const QueryClusterUserRsp*>(
               &_QueryClusterUserRsp_default_instance_);
  }

  void Swap(QueryClusterUserRsp* other);

  // implements Message ----------------------------------------------

  inline QueryClusterUserRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryClusterUserRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryClusterUserRsp& from);
  void MergeFrom(const QueryClusterUserRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryClusterUserRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Management.Interactive.Message.AccessedUser accessedUserInfo = 1;
  int accesseduserinfo_size() const;
  void clear_accesseduserinfo();
  static const int kAccessedUserInfoFieldNumber = 1;
  const ::Management::Interactive::Message::AccessedUser& accesseduserinfo(int index) const;
  ::Management::Interactive::Message::AccessedUser* mutable_accesseduserinfo(int index);
  ::Management::Interactive::Message::AccessedUser* add_accesseduserinfo();
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedUser >*
      mutable_accesseduserinfo();
  const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedUser >&
      accesseduserinfo() const;

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.QueryClusterUserRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedUser > accesseduserinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushClusterDeviceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.PushClusterDeviceReq) */ {
 public:
  PushClusterDeviceReq();
  virtual ~PushClusterDeviceReq();

  PushClusterDeviceReq(const PushClusterDeviceReq& from);

  inline PushClusterDeviceReq& operator=(const PushClusterDeviceReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushClusterDeviceReq& default_instance();

  static inline const PushClusterDeviceReq* internal_default_instance() {
    return reinterpret_cast<const PushClusterDeviceReq*>(
               &_PushClusterDeviceReq_default_instance_);
  }

  void Swap(PushClusterDeviceReq* other);

  // implements Message ----------------------------------------------

  inline PushClusterDeviceReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PushClusterDeviceReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PushClusterDeviceReq& from);
  void MergeFrom(const PushClusterDeviceReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PushClusterDeviceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Management.Interactive.Message.DeviceAccessRecord deviceAccessRecord = 2;
  int deviceaccessrecord_size() const;
  void clear_deviceaccessrecord();
  static const int kDeviceAccessRecordFieldNumber = 2;
  const ::Management::Interactive::Message::DeviceAccessRecord& deviceaccessrecord(int index) const;
  ::Management::Interactive::Message::DeviceAccessRecord* mutable_deviceaccessrecord(int index);
  ::Management::Interactive::Message::DeviceAccessRecord* add_deviceaccessrecord();
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::DeviceAccessRecord >*
      mutable_deviceaccessrecord();
  const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::DeviceAccessRecord >&
      deviceaccessrecord() const;

  // string strClusterID = 1;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 1;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.PushClusterDeviceReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::DeviceAccessRecord > deviceaccessrecord_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushClusterDeviceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.PushClusterDeviceRsp) */ {
 public:
  PushClusterDeviceRsp();
  virtual ~PushClusterDeviceRsp();

  PushClusterDeviceRsp(const PushClusterDeviceRsp& from);

  inline PushClusterDeviceRsp& operator=(const PushClusterDeviceRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushClusterDeviceRsp& default_instance();

  static inline const PushClusterDeviceRsp* internal_default_instance() {
    return reinterpret_cast<const PushClusterDeviceRsp*>(
               &_PushClusterDeviceRsp_default_instance_);
  }

  void Swap(PushClusterDeviceRsp* other);

  // implements Message ----------------------------------------------

  inline PushClusterDeviceRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PushClusterDeviceRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PushClusterDeviceRsp& from);
  void MergeFrom(const PushClusterDeviceRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PushClusterDeviceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strValue = 1;
  void clear_strvalue();
  static const int kStrValueFieldNumber = 1;
  const ::std::string& strvalue() const;
  void set_strvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_strvalue(::std::string&& value);
  #endif
  void set_strvalue(const char* value);
  void set_strvalue(const char* value, size_t size);
  ::std::string* mutable_strvalue();
  ::std::string* release_strvalue();
  void set_allocated_strvalue(::std::string* strvalue);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.PushClusterDeviceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strvalue_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushClusterUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.PushClusterUserReq) */ {
 public:
  PushClusterUserReq();
  virtual ~PushClusterUserReq();

  PushClusterUserReq(const PushClusterUserReq& from);

  inline PushClusterUserReq& operator=(const PushClusterUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushClusterUserReq& default_instance();

  static inline const PushClusterUserReq* internal_default_instance() {
    return reinterpret_cast<const PushClusterUserReq*>(
               &_PushClusterUserReq_default_instance_);
  }

  void Swap(PushClusterUserReq* other);

  // implements Message ----------------------------------------------

  inline PushClusterUserReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PushClusterUserReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PushClusterUserReq& from);
  void MergeFrom(const PushClusterUserReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PushClusterUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Management.Interactive.Message.UserAccessRecord userAccessRecord = 2;
  int useraccessrecord_size() const;
  void clear_useraccessrecord();
  static const int kUserAccessRecordFieldNumber = 2;
  const ::Management::Interactive::Message::UserAccessRecord& useraccessrecord(int index) const;
  ::Management::Interactive::Message::UserAccessRecord* mutable_useraccessrecord(int index);
  ::Management::Interactive::Message::UserAccessRecord* add_useraccessrecord();
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::UserAccessRecord >*
      mutable_useraccessrecord();
  const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::UserAccessRecord >&
      useraccessrecord() const;

  // string strClusterID = 1;
  void clear_strclusterid();
  static const int kStrClusterIDFieldNumber = 1;
  const ::std::string& strclusterid() const;
  void set_strclusterid(const ::std::string& value);
  #if LANG_CXX11
  void set_strclusterid(::std::string&& value);
  #endif
  void set_strclusterid(const char* value);
  void set_strclusterid(const char* value, size_t size);
  ::std::string* mutable_strclusterid();
  ::std::string* release_strclusterid();
  void set_allocated_strclusterid(::std::string* strclusterid);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.PushClusterUserReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::UserAccessRecord > useraccessrecord_;
  ::google::protobuf::internal::ArenaStringPtr strclusterid_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushClusterUserRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.PushClusterUserRsp) */ {
 public:
  PushClusterUserRsp();
  virtual ~PushClusterUserRsp();

  PushClusterUserRsp(const PushClusterUserRsp& from);

  inline PushClusterUserRsp& operator=(const PushClusterUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushClusterUserRsp& default_instance();

  static inline const PushClusterUserRsp* internal_default_instance() {
    return reinterpret_cast<const PushClusterUserRsp*>(
               &_PushClusterUserRsp_default_instance_);
  }

  void Swap(PushClusterUserRsp* other);

  // implements Message ----------------------------------------------

  inline PushClusterUserRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PushClusterUserRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PushClusterUserRsp& from);
  void MergeFrom(const PushClusterUserRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PushClusterUserRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strValue = 1;
  void clear_strvalue();
  static const int kStrValueFieldNumber = 1;
  const ::std::string& strvalue() const;
  void set_strvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_strvalue(::std::string&& value);
  #endif
  void set_strvalue(const char* value);
  void set_strvalue(const char* value, size_t size);
  ::std::string* mutable_strvalue();
  ::std::string* release_strvalue();
  void set_allocated_strvalue(::std::string* strvalue);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.PushClusterUserRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strvalue_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Management.Interactive.Message.AddClusterReq AddClusterReq_Value = 10;
  bool has_addclusterreq_value() const;
  void clear_addclusterreq_value();
  static const int kAddClusterReqValueFieldNumber = 10;
  const ::Management::Interactive::Message::AddClusterReq& addclusterreq_value() const;
  ::Management::Interactive::Message::AddClusterReq* mutable_addclusterreq_value();
  ::Management::Interactive::Message::AddClusterReq* release_addclusterreq_value();
  void set_allocated_addclusterreq_value(::Management::Interactive::Message::AddClusterReq* addclusterreq_value);

  // .Management.Interactive.Message.DeleteClusterReq DeleteClusterReq_Value = 20;
  bool has_deleteclusterreq_value() const;
  void clear_deleteclusterreq_value();
  static const int kDeleteClusterReqValueFieldNumber = 20;
  const ::Management::Interactive::Message::DeleteClusterReq& deleteclusterreq_value() const;
  ::Management::Interactive::Message::DeleteClusterReq* mutable_deleteclusterreq_value();
  ::Management::Interactive::Message::DeleteClusterReq* release_deleteclusterreq_value();
  void set_allocated_deleteclusterreq_value(::Management::Interactive::Message::DeleteClusterReq* deleteclusterreq_value);

  // .Management.Interactive.Message.ModifyClusterReq ModifyClusterReq_Value = 30;
  bool has_modifyclusterreq_value() const;
  void clear_modifyclusterreq_value();
  static const int kModifyClusterReqValueFieldNumber = 30;
  const ::Management::Interactive::Message::ModifyClusterReq& modifyclusterreq_value() const;
  ::Management::Interactive::Message::ModifyClusterReq* mutable_modifyclusterreq_value();
  ::Management::Interactive::Message::ModifyClusterReq* release_modifyclusterreq_value();
  void set_allocated_modifyclusterreq_value(::Management::Interactive::Message::ModifyClusterReq* modifyclusterreq_value);

  // .Management.Interactive.Message.QueryClusterInfoReq QueryClusterInfoReq_Value = 40;
  bool has_queryclusterinforeq_value() const;
  void clear_queryclusterinforeq_value();
  static const int kQueryClusterInfoReqValueFieldNumber = 40;
  const ::Management::Interactive::Message::QueryClusterInfoReq& queryclusterinforeq_value() const;
  ::Management::Interactive::Message::QueryClusterInfoReq* mutable_queryclusterinforeq_value();
  ::Management::Interactive::Message::QueryClusterInfoReq* release_queryclusterinforeq_value();
  void set_allocated_queryclusterinforeq_value(::Management::Interactive::Message::QueryClusterInfoReq* queryclusterinforeq_value);

  // .Management.Interactive.Message.ShakehandClusterReq ShakehandClusterReq_Value = 50;
  bool has_shakehandclusterreq_value() const;
  void clear_shakehandclusterreq_value();
  static const int kShakehandClusterReqValueFieldNumber = 50;
  const ::Management::Interactive::Message::ShakehandClusterReq& shakehandclusterreq_value() const;
  ::Management::Interactive::Message::ShakehandClusterReq* mutable_shakehandclusterreq_value();
  ::Management::Interactive::Message::ShakehandClusterReq* release_shakehandclusterreq_value();
  void set_allocated_shakehandclusterreq_value(::Management::Interactive::Message::ShakehandClusterReq* shakehandclusterreq_value);

  // .Management.Interactive.Message.QueryAllClusterReq QueryAllClusterReq_Value = 60;
  bool has_queryallclusterreq_value() const;
  void clear_queryallclusterreq_value();
  static const int kQueryAllClusterReqValueFieldNumber = 60;
  const ::Management::Interactive::Message::QueryAllClusterReq& queryallclusterreq_value() const;
  ::Management::Interactive::Message::QueryAllClusterReq* mutable_queryallclusterreq_value();
  ::Management::Interactive::Message::QueryAllClusterReq* release_queryallclusterreq_value();
  void set_allocated_queryallclusterreq_value(::Management::Interactive::Message::QueryAllClusterReq* queryallclusterreq_value);

  // .Management.Interactive.Message.QueryClusterDeviceReq QueryClusterDeviceReq_Value = 70;
  bool has_queryclusterdevicereq_value() const;
  void clear_queryclusterdevicereq_value();
  static const int kQueryClusterDeviceReqValueFieldNumber = 70;
  const ::Management::Interactive::Message::QueryClusterDeviceReq& queryclusterdevicereq_value() const;
  ::Management::Interactive::Message::QueryClusterDeviceReq* mutable_queryclusterdevicereq_value();
  ::Management::Interactive::Message::QueryClusterDeviceReq* release_queryclusterdevicereq_value();
  void set_allocated_queryclusterdevicereq_value(::Management::Interactive::Message::QueryClusterDeviceReq* queryclusterdevicereq_value);

  // .Management.Interactive.Message.QueryClusterUserReq QueryClusterUserReq_Value = 80;
  bool has_queryclusteruserreq_value() const;
  void clear_queryclusteruserreq_value();
  static const int kQueryClusterUserReqValueFieldNumber = 80;
  const ::Management::Interactive::Message::QueryClusterUserReq& queryclusteruserreq_value() const;
  ::Management::Interactive::Message::QueryClusterUserReq* mutable_queryclusteruserreq_value();
  ::Management::Interactive::Message::QueryClusterUserReq* release_queryclusteruserreq_value();
  void set_allocated_queryclusteruserreq_value(::Management::Interactive::Message::QueryClusterUserReq* queryclusteruserreq_value);

  // .Management.Interactive.Message.PushClusterDeviceReq PushClusterDeviceReq_Value = 270;
  bool has_pushclusterdevicereq_value() const;
  void clear_pushclusterdevicereq_value();
  static const int kPushClusterDeviceReqValueFieldNumber = 270;
  const ::Management::Interactive::Message::PushClusterDeviceReq& pushclusterdevicereq_value() const;
  ::Management::Interactive::Message::PushClusterDeviceReq* mutable_pushclusterdevicereq_value();
  ::Management::Interactive::Message::PushClusterDeviceReq* release_pushclusterdevicereq_value();
  void set_allocated_pushclusterdevicereq_value(::Management::Interactive::Message::PushClusterDeviceReq* pushclusterdevicereq_value);

  // .Management.Interactive.Message.PushClusterUserReq PushClusterUserReq_Value = 280;
  bool has_pushclusteruserreq_value() const;
  void clear_pushclusteruserreq_value();
  static const int kPushClusterUserReqValueFieldNumber = 280;
  const ::Management::Interactive::Message::PushClusterUserReq& pushclusteruserreq_value() const;
  ::Management::Interactive::Message::PushClusterUserReq* mutable_pushclusteruserreq_value();
  ::Management::Interactive::Message::PushClusterUserReq* release_pushclusteruserreq_value();
  void set_allocated_pushclusteruserreq_value(::Management::Interactive::Message::PushClusterUserReq* pushclusteruserreq_value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Management::Interactive::Message::AddClusterReq* addclusterreq_value_;
  ::Management::Interactive::Message::DeleteClusterReq* deleteclusterreq_value_;
  ::Management::Interactive::Message::ModifyClusterReq* modifyclusterreq_value_;
  ::Management::Interactive::Message::QueryClusterInfoReq* queryclusterinforeq_value_;
  ::Management::Interactive::Message::ShakehandClusterReq* shakehandclusterreq_value_;
  ::Management::Interactive::Message::QueryAllClusterReq* queryallclusterreq_value_;
  ::Management::Interactive::Message::QueryClusterDeviceReq* queryclusterdevicereq_value_;
  ::Management::Interactive::Message::QueryClusterUserReq* queryclusteruserreq_value_;
  ::Management::Interactive::Message::PushClusterDeviceReq* pushclusterdevicereq_value_;
  ::Management::Interactive::Message::PushClusterUserReq* pushclusteruserreq_value_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strRetMsg = 20;
  void clear_strretmsg();
  static const int kStrRetMsgFieldNumber = 20;
  const ::std::string& strretmsg() const;
  void set_strretmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_strretmsg(::std::string&& value);
  #endif
  void set_strretmsg(const char* value);
  void set_strretmsg(const char* value, size_t size);
  ::std::string* mutable_strretmsg();
  ::std::string* release_strretmsg();
  void set_allocated_strretmsg(::std::string* strretmsg);

  // .Management.Interactive.Message.AddClusterRsp AddClusterRsp_Value = 30;
  bool has_addclusterrsp_value() const;
  void clear_addclusterrsp_value();
  static const int kAddClusterRspValueFieldNumber = 30;
  const ::Management::Interactive::Message::AddClusterRsp& addclusterrsp_value() const;
  ::Management::Interactive::Message::AddClusterRsp* mutable_addclusterrsp_value();
  ::Management::Interactive::Message::AddClusterRsp* release_addclusterrsp_value();
  void set_allocated_addclusterrsp_value(::Management::Interactive::Message::AddClusterRsp* addclusterrsp_value);

  // .Management.Interactive.Message.DeleteClusterRsp DeleteClusterRsp_Value = 40;
  bool has_deleteclusterrsp_value() const;
  void clear_deleteclusterrsp_value();
  static const int kDeleteClusterRspValueFieldNumber = 40;
  const ::Management::Interactive::Message::DeleteClusterRsp& deleteclusterrsp_value() const;
  ::Management::Interactive::Message::DeleteClusterRsp* mutable_deleteclusterrsp_value();
  ::Management::Interactive::Message::DeleteClusterRsp* release_deleteclusterrsp_value();
  void set_allocated_deleteclusterrsp_value(::Management::Interactive::Message::DeleteClusterRsp* deleteclusterrsp_value);

  // .Management.Interactive.Message.ModifyClusterRsp ModifyClusterRsp_Value = 50;
  bool has_modifyclusterrsp_value() const;
  void clear_modifyclusterrsp_value();
  static const int kModifyClusterRspValueFieldNumber = 50;
  const ::Management::Interactive::Message::ModifyClusterRsp& modifyclusterrsp_value() const;
  ::Management::Interactive::Message::ModifyClusterRsp* mutable_modifyclusterrsp_value();
  ::Management::Interactive::Message::ModifyClusterRsp* release_modifyclusterrsp_value();
  void set_allocated_modifyclusterrsp_value(::Management::Interactive::Message::ModifyClusterRsp* modifyclusterrsp_value);

  // .Management.Interactive.Message.QueryClusterInfoRsp QueryClusterInfoRsp_Value = 60;
  bool has_queryclusterinforsp_value() const;
  void clear_queryclusterinforsp_value();
  static const int kQueryClusterInfoRspValueFieldNumber = 60;
  const ::Management::Interactive::Message::QueryClusterInfoRsp& queryclusterinforsp_value() const;
  ::Management::Interactive::Message::QueryClusterInfoRsp* mutable_queryclusterinforsp_value();
  ::Management::Interactive::Message::QueryClusterInfoRsp* release_queryclusterinforsp_value();
  void set_allocated_queryclusterinforsp_value(::Management::Interactive::Message::QueryClusterInfoRsp* queryclusterinforsp_value);

  // .Management.Interactive.Message.ShakehandClusterRsp ShakehandClusterRsp_Value = 70;
  bool has_shakehandclusterrsp_value() const;
  void clear_shakehandclusterrsp_value();
  static const int kShakehandClusterRspValueFieldNumber = 70;
  const ::Management::Interactive::Message::ShakehandClusterRsp& shakehandclusterrsp_value() const;
  ::Management::Interactive::Message::ShakehandClusterRsp* mutable_shakehandclusterrsp_value();
  ::Management::Interactive::Message::ShakehandClusterRsp* release_shakehandclusterrsp_value();
  void set_allocated_shakehandclusterrsp_value(::Management::Interactive::Message::ShakehandClusterRsp* shakehandclusterrsp_value);

  // .Management.Interactive.Message.QueryAllClusterRsp QueryAllClusterRsp_Value = 80;
  bool has_queryallclusterrsp_value() const;
  void clear_queryallclusterrsp_value();
  static const int kQueryAllClusterRspValueFieldNumber = 80;
  const ::Management::Interactive::Message::QueryAllClusterRsp& queryallclusterrsp_value() const;
  ::Management::Interactive::Message::QueryAllClusterRsp* mutable_queryallclusterrsp_value();
  ::Management::Interactive::Message::QueryAllClusterRsp* release_queryallclusterrsp_value();
  void set_allocated_queryallclusterrsp_value(::Management::Interactive::Message::QueryAllClusterRsp* queryallclusterrsp_value);

  // .Management.Interactive.Message.QueryClusterDeviceRsp QueryClusterDeviceRsp_Value = 90;
  bool has_queryclusterdevicersp_value() const;
  void clear_queryclusterdevicersp_value();
  static const int kQueryClusterDeviceRspValueFieldNumber = 90;
  const ::Management::Interactive::Message::QueryClusterDeviceRsp& queryclusterdevicersp_value() const;
  ::Management::Interactive::Message::QueryClusterDeviceRsp* mutable_queryclusterdevicersp_value();
  ::Management::Interactive::Message::QueryClusterDeviceRsp* release_queryclusterdevicersp_value();
  void set_allocated_queryclusterdevicersp_value(::Management::Interactive::Message::QueryClusterDeviceRsp* queryclusterdevicersp_value);

  // .Management.Interactive.Message.QueryClusterUserRsp QueryClusterUserRsp_Value = 100;
  bool has_queryclusteruserrsp_value() const;
  void clear_queryclusteruserrsp_value();
  static const int kQueryClusterUserRspValueFieldNumber = 100;
  const ::Management::Interactive::Message::QueryClusterUserRsp& queryclusteruserrsp_value() const;
  ::Management::Interactive::Message::QueryClusterUserRsp* mutable_queryclusteruserrsp_value();
  ::Management::Interactive::Message::QueryClusterUserRsp* release_queryclusteruserrsp_value();
  void set_allocated_queryclusteruserrsp_value(::Management::Interactive::Message::QueryClusterUserRsp* queryclusteruserrsp_value);

  // .Management.Interactive.Message.PushClusterDeviceRsp PushClusterDeviceRsp_Value = 290;
  bool has_pushclusterdevicersp_value() const;
  void clear_pushclusterdevicersp_value();
  static const int kPushClusterDeviceRspValueFieldNumber = 290;
  const ::Management::Interactive::Message::PushClusterDeviceRsp& pushclusterdevicersp_value() const;
  ::Management::Interactive::Message::PushClusterDeviceRsp* mutable_pushclusterdevicersp_value();
  ::Management::Interactive::Message::PushClusterDeviceRsp* release_pushclusterdevicersp_value();
  void set_allocated_pushclusterdevicersp_value(::Management::Interactive::Message::PushClusterDeviceRsp* pushclusterdevicersp_value);

  // .Management.Interactive.Message.PushClusterUserRsp PushClusterUserRsp_Value = 300;
  bool has_pushclusteruserrsp_value() const;
  void clear_pushclusteruserrsp_value();
  static const int kPushClusterUserRspValueFieldNumber = 300;
  const ::Management::Interactive::Message::PushClusterUserRsp& pushclusteruserrsp_value() const;
  ::Management::Interactive::Message::PushClusterUserRsp* mutable_pushclusteruserrsp_value();
  ::Management::Interactive::Message::PushClusterUserRsp* release_pushclusteruserrsp_value();
  void set_allocated_pushclusteruserrsp_value(::Management::Interactive::Message::PushClusterUserRsp* pushclusteruserrsp_value);

  // int32 iRetcode = 10;
  void clear_iretcode();
  static const int kIRetcodeFieldNumber = 10;
  ::google::protobuf::int32 iretcode() const;
  void set_iretcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strretmsg_;
  ::Management::Interactive::Message::AddClusterRsp* addclusterrsp_value_;
  ::Management::Interactive::Message::DeleteClusterRsp* deleteclusterrsp_value_;
  ::Management::Interactive::Message::ModifyClusterRsp* modifyclusterrsp_value_;
  ::Management::Interactive::Message::QueryClusterInfoRsp* queryclusterinforsp_value_;
  ::Management::Interactive::Message::ShakehandClusterRsp* shakehandclusterrsp_value_;
  ::Management::Interactive::Message::QueryAllClusterRsp* queryallclusterrsp_value_;
  ::Management::Interactive::Message::QueryClusterDeviceRsp* queryclusterdevicersp_value_;
  ::Management::Interactive::Message::QueryClusterUserRsp* queryclusteruserrsp_value_;
  ::Management::Interactive::Message::PushClusterDeviceRsp* pushclusterdevicersp_value_;
  ::Management::Interactive::Message::PushClusterUserRsp* pushclusteruserrsp_value_;
  ::google::protobuf::int32 iretcode_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManagementInteractiveMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Management.Interactive.Message.ManagementInteractiveMessage) */ {
 public:
  ManagementInteractiveMessage();
  virtual ~ManagementInteractiveMessage();

  ManagementInteractiveMessage(const ManagementInteractiveMessage& from);

  inline ManagementInteractiveMessage& operator=(const ManagementInteractiveMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagementInteractiveMessage& default_instance();

  static inline const ManagementInteractiveMessage* internal_default_instance() {
    return reinterpret_cast<const ManagementInteractiveMessage*>(
               &_ManagementInteractiveMessage_default_instance_);
  }

  void Swap(ManagementInteractiveMessage* other);

  // implements Message ----------------------------------------------

  inline ManagementInteractiveMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ManagementInteractiveMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ManagementInteractiveMessage& from);
  void MergeFrom(const ManagementInteractiveMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ManagementInteractiveMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strSID = 3;
  void clear_strsid();
  static const int kStrSIDFieldNumber = 3;
  const ::std::string& strsid() const;
  void set_strsid(const ::std::string& value);
  #if LANG_CXX11
  void set_strsid(::std::string&& value);
  #endif
  void set_strsid(const char* value);
  void set_strsid(const char* value, size_t size);
  ::std::string* mutable_strsid();
  ::std::string* release_strsid();
  void set_allocated_strsid(::std::string* strsid);

  // .Management.Interactive.Message.Request reqValue = 4;
  bool has_reqvalue() const;
  void clear_reqvalue();
  static const int kReqValueFieldNumber = 4;
  const ::Management::Interactive::Message::Request& reqvalue() const;
  ::Management::Interactive::Message::Request* mutable_reqvalue();
  ::Management::Interactive::Message::Request* release_reqvalue();
  void set_allocated_reqvalue(::Management::Interactive::Message::Request* reqvalue);

  // .Management.Interactive.Message.Response rspValue = 5;
  bool has_rspvalue() const;
  void clear_rspvalue();
  static const int kRspValueFieldNumber = 5;
  const ::Management::Interactive::Message::Response& rspvalue() const;
  ::Management::Interactive::Message::Response* mutable_rspvalue();
  ::Management::Interactive::Message::Response* release_rspvalue();
  void set_allocated_rspvalue(::Management::Interactive::Message::Response* rspvalue);

  // uint64 uiMsgSeq = 2;
  void clear_uimsgseq();
  static const int kUiMsgSeqFieldNumber = 2;
  ::google::protobuf::uint64 uimsgseq() const;
  void set_uimsgseq(::google::protobuf::uint64 value);

  // .Management.Interactive.Message.ManagementMsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Management::Interactive::Message::ManagementMsgType type() const;
  void set_type(::Management::Interactive::Message::ManagementMsgType value);

  // @@protoc_insertion_point(class_scope:Management.Interactive.Message.ManagementInteractiveMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strsid_;
  ::Management::Interactive::Message::Request* reqvalue_;
  ::Management::Interactive::Message::Response* rspvalue_;
  ::google::protobuf::uint64 uimsgseq_;
  int type_;
  mutable int _cached_size_;
  friend struct  protobuf_InteractiveProtocolManagement_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster

// string strClusterID = 1;
inline void Cluster::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Cluster.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void Cluster::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Cluster.strClusterID)
}
#if LANG_CXX11
inline void Cluster::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.Cluster.strClusterID)
}
#endif
inline void Cluster::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.Cluster.strClusterID)
}
inline void Cluster::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.Cluster.strClusterID)
}
inline ::std::string* Cluster::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Cluster.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Cluster.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Cluster.strClusterID)
}

// string strClusterAddress = 2;
inline void Cluster::clear_strclusteraddress() {
  strclusteraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::strclusteraddress() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Cluster.strClusterAddress)
  return strclusteraddress_.GetNoArena();
}
inline void Cluster::set_strclusteraddress(const ::std::string& value) {
  
  strclusteraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Cluster.strClusterAddress)
}
#if LANG_CXX11
inline void Cluster::set_strclusteraddress(::std::string&& value) {
  
  strclusteraddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.Cluster.strClusterAddress)
}
#endif
inline void Cluster::set_strclusteraddress(const char* value) {
  
  strclusteraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.Cluster.strClusterAddress)
}
inline void Cluster::set_strclusteraddress(const char* value, size_t size) {
  
  strclusteraddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.Cluster.strClusterAddress)
}
inline ::std::string* Cluster::mutable_strclusteraddress() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Cluster.strClusterAddress)
  return strclusteraddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_strclusteraddress() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Cluster.strClusterAddress)
  
  return strclusteraddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_strclusteraddress(::std::string* strclusteraddress) {
  if (strclusteraddress != NULL) {
    
  } else {
    
  }
  strclusteraddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusteraddress);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Cluster.strClusterAddress)
}

// string strManagementAddress = 3;
inline void Cluster::clear_strmanagementaddress() {
  strmanagementaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::strmanagementaddress() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Cluster.strManagementAddress)
  return strmanagementaddress_.GetNoArena();
}
inline void Cluster::set_strmanagementaddress(const ::std::string& value) {
  
  strmanagementaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Cluster.strManagementAddress)
}
#if LANG_CXX11
inline void Cluster::set_strmanagementaddress(::std::string&& value) {
  
  strmanagementaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.Cluster.strManagementAddress)
}
#endif
inline void Cluster::set_strmanagementaddress(const char* value) {
  
  strmanagementaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.Cluster.strManagementAddress)
}
inline void Cluster::set_strmanagementaddress(const char* value, size_t size) {
  
  strmanagementaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.Cluster.strManagementAddress)
}
inline ::std::string* Cluster::mutable_strmanagementaddress() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Cluster.strManagementAddress)
  return strmanagementaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_strmanagementaddress() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Cluster.strManagementAddress)
  
  return strmanagementaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_strmanagementaddress(::std::string* strmanagementaddress) {
  if (strmanagementaddress != NULL) {
    
  } else {
    
  }
  strmanagementaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmanagementaddress);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Cluster.strManagementAddress)
}

// string strAliasname = 4;
inline void Cluster::clear_straliasname() {
  straliasname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::straliasname() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Cluster.strAliasname)
  return straliasname_.GetNoArena();
}
inline void Cluster::set_straliasname(const ::std::string& value) {
  
  straliasname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Cluster.strAliasname)
}
#if LANG_CXX11
inline void Cluster::set_straliasname(::std::string&& value) {
  
  straliasname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.Cluster.strAliasname)
}
#endif
inline void Cluster::set_straliasname(const char* value) {
  
  straliasname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.Cluster.strAliasname)
}
inline void Cluster::set_straliasname(const char* value, size_t size) {
  
  straliasname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.Cluster.strAliasname)
}
inline ::std::string* Cluster::mutable_straliasname() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Cluster.strAliasname)
  return straliasname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_straliasname() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Cluster.strAliasname)
  
  return straliasname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_straliasname(::std::string* straliasname) {
  if (straliasname != NULL) {
    
  } else {
    
  }
  straliasname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), straliasname);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Cluster.strAliasname)
}

// uint32 uiUserTotalnumber = 5;
inline void Cluster::clear_uiusertotalnumber() {
  uiusertotalnumber_ = 0u;
}
inline ::google::protobuf::uint32 Cluster::uiusertotalnumber() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Cluster.uiUserTotalnumber)
  return uiusertotalnumber_;
}
inline void Cluster::set_uiusertotalnumber(::google::protobuf::uint32 value) {
  
  uiusertotalnumber_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Cluster.uiUserTotalnumber)
}

// uint32 uiDeviceTotalnumber = 6;
inline void Cluster::clear_uidevicetotalnumber() {
  uidevicetotalnumber_ = 0u;
}
inline ::google::protobuf::uint32 Cluster::uidevicetotalnumber() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Cluster.uiDeviceTotalnumber)
  return uidevicetotalnumber_;
}
inline void Cluster::set_uidevicetotalnumber(::google::protobuf::uint32 value) {
  
  uidevicetotalnumber_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Cluster.uiDeviceTotalnumber)
}

// string strCreatedate = 7;
inline void Cluster::clear_strcreatedate() {
  strcreatedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::strcreatedate() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Cluster.strCreatedate)
  return strcreatedate_.GetNoArena();
}
inline void Cluster::set_strcreatedate(const ::std::string& value) {
  
  strcreatedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Cluster.strCreatedate)
}
#if LANG_CXX11
inline void Cluster::set_strcreatedate(::std::string&& value) {
  
  strcreatedate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.Cluster.strCreatedate)
}
#endif
inline void Cluster::set_strcreatedate(const char* value) {
  
  strcreatedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.Cluster.strCreatedate)
}
inline void Cluster::set_strcreatedate(const char* value, size_t size) {
  
  strcreatedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.Cluster.strCreatedate)
}
inline ::std::string* Cluster::mutable_strcreatedate() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Cluster.strCreatedate)
  return strcreatedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_strcreatedate() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Cluster.strCreatedate)
  
  return strcreatedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_strcreatedate(::std::string* strcreatedate) {
  if (strcreatedate != NULL) {
    
  } else {
    
  }
  strcreatedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcreatedate);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Cluster.strCreatedate)
}

// uint32 uiStatus = 8;
inline void Cluster::clear_uistatus() {
  uistatus_ = 0u;
}
inline ::google::protobuf::uint32 Cluster::uistatus() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Cluster.uiStatus)
  return uistatus_;
}
inline void Cluster::set_uistatus(::google::protobuf::uint32 value) {
  
  uistatus_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Cluster.uiStatus)
}

// -------------------------------------------------------------------

// ClusterStatus

// .Management.Interactive.Message.Cluster clusterInfo = 1;
inline bool ClusterStatus::has_clusterinfo() const {
  return this != internal_default_instance() && clusterinfo_ != NULL;
}
inline void ClusterStatus::clear_clusterinfo() {
  if (GetArenaNoVirtual() == NULL && clusterinfo_ != NULL) delete clusterinfo_;
  clusterinfo_ = NULL;
}
inline const ::Management::Interactive::Message::Cluster& ClusterStatus::clusterinfo() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ClusterStatus.clusterInfo)
  return clusterinfo_ != NULL ? *clusterinfo_
                         : *::Management::Interactive::Message::Cluster::internal_default_instance();
}
inline ::Management::Interactive::Message::Cluster* ClusterStatus::mutable_clusterinfo() {
  
  if (clusterinfo_ == NULL) {
    clusterinfo_ = new ::Management::Interactive::Message::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.ClusterStatus.clusterInfo)
  return clusterinfo_;
}
inline ::Management::Interactive::Message::Cluster* ClusterStatus::release_clusterinfo() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.ClusterStatus.clusterInfo)
  
  ::Management::Interactive::Message::Cluster* temp = clusterinfo_;
  clusterinfo_ = NULL;
  return temp;
}
inline void ClusterStatus::set_allocated_clusterinfo(::Management::Interactive::Message::Cluster* clusterinfo) {
  delete clusterinfo_;
  clusterinfo_ = clusterinfo;
  if (clusterinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.ClusterStatus.clusterInfo)
}

// uint32 uiStatus = 2;
inline void ClusterStatus::clear_uistatus() {
  uistatus_ = 0u;
}
inline ::google::protobuf::uint32 ClusterStatus::uistatus() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ClusterStatus.uiStatus)
  return uistatus_;
}
inline void ClusterStatus::set_uistatus(::google::protobuf::uint32 value) {
  
  uistatus_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.ClusterStatus.uiStatus)
}

// -------------------------------------------------------------------

// AccessedDevice

// string strDeviceID = 1;
inline void AccessedDevice::clear_strdeviceid() {
  strdeviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessedDevice::strdeviceid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedDevice.strDeviceID)
  return strdeviceid_.GetNoArena();
}
inline void AccessedDevice::set_strdeviceid(const ::std::string& value) {
  
  strdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedDevice.strDeviceID)
}
#if LANG_CXX11
inline void AccessedDevice::set_strdeviceid(::std::string&& value) {
  
  strdeviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AccessedDevice.strDeviceID)
}
#endif
inline void AccessedDevice::set_strdeviceid(const char* value) {
  
  strdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AccessedDevice.strDeviceID)
}
inline void AccessedDevice::set_strdeviceid(const char* value, size_t size) {
  
  strdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AccessedDevice.strDeviceID)
}
inline ::std::string* AccessedDevice::mutable_strdeviceid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AccessedDevice.strDeviceID)
  return strdeviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessedDevice::release_strdeviceid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AccessedDevice.strDeviceID)
  
  return strdeviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessedDevice::set_allocated_strdeviceid(::std::string* strdeviceid) {
  if (strdeviceid != NULL) {
    
  } else {
    
  }
  strdeviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdeviceid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AccessedDevice.strDeviceID)
}

// string strDeviceName = 2;
inline void AccessedDevice::clear_strdevicename() {
  strdevicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessedDevice::strdevicename() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedDevice.strDeviceName)
  return strdevicename_.GetNoArena();
}
inline void AccessedDevice::set_strdevicename(const ::std::string& value) {
  
  strdevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedDevice.strDeviceName)
}
#if LANG_CXX11
inline void AccessedDevice::set_strdevicename(::std::string&& value) {
  
  strdevicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AccessedDevice.strDeviceName)
}
#endif
inline void AccessedDevice::set_strdevicename(const char* value) {
  
  strdevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AccessedDevice.strDeviceName)
}
inline void AccessedDevice::set_strdevicename(const char* value, size_t size) {
  
  strdevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AccessedDevice.strDeviceName)
}
inline ::std::string* AccessedDevice::mutable_strdevicename() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AccessedDevice.strDeviceName)
  return strdevicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessedDevice::release_strdevicename() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AccessedDevice.strDeviceName)
  
  return strdevicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessedDevice::set_allocated_strdevicename(::std::string* strdevicename) {
  if (strdevicename != NULL) {
    
  } else {
    
  }
  strdevicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdevicename);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AccessedDevice.strDeviceName)
}

// uint32 uiDeviceType = 3;
inline void AccessedDevice::clear_uidevicetype() {
  uidevicetype_ = 0u;
}
inline ::google::protobuf::uint32 AccessedDevice::uidevicetype() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedDevice.uiDeviceType)
  return uidevicetype_;
}
inline void AccessedDevice::set_uidevicetype(::google::protobuf::uint32 value) {
  
  uidevicetype_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedDevice.uiDeviceType)
}

// string strLoginTime = 4;
inline void AccessedDevice::clear_strlogintime() {
  strlogintime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessedDevice::strlogintime() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedDevice.strLoginTime)
  return strlogintime_.GetNoArena();
}
inline void AccessedDevice::set_strlogintime(const ::std::string& value) {
  
  strlogintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedDevice.strLoginTime)
}
#if LANG_CXX11
inline void AccessedDevice::set_strlogintime(::std::string&& value) {
  
  strlogintime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AccessedDevice.strLoginTime)
}
#endif
inline void AccessedDevice::set_strlogintime(const char* value) {
  
  strlogintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AccessedDevice.strLoginTime)
}
inline void AccessedDevice::set_strlogintime(const char* value, size_t size) {
  
  strlogintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AccessedDevice.strLoginTime)
}
inline ::std::string* AccessedDevice::mutable_strlogintime() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AccessedDevice.strLoginTime)
  return strlogintime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessedDevice::release_strlogintime() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AccessedDevice.strLoginTime)
  
  return strlogintime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessedDevice::set_allocated_strlogintime(::std::string* strlogintime) {
  if (strlogintime != NULL) {
    
  } else {
    
  }
  strlogintime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strlogintime);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AccessedDevice.strLoginTime)
}

// string strLogoutTime = 5;
inline void AccessedDevice::clear_strlogouttime() {
  strlogouttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessedDevice::strlogouttime() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedDevice.strLogoutTime)
  return strlogouttime_.GetNoArena();
}
inline void AccessedDevice::set_strlogouttime(const ::std::string& value) {
  
  strlogouttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedDevice.strLogoutTime)
}
#if LANG_CXX11
inline void AccessedDevice::set_strlogouttime(::std::string&& value) {
  
  strlogouttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AccessedDevice.strLogoutTime)
}
#endif
inline void AccessedDevice::set_strlogouttime(const char* value) {
  
  strlogouttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AccessedDevice.strLogoutTime)
}
inline void AccessedDevice::set_strlogouttime(const char* value, size_t size) {
  
  strlogouttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AccessedDevice.strLogoutTime)
}
inline ::std::string* AccessedDevice::mutable_strlogouttime() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AccessedDevice.strLogoutTime)
  return strlogouttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessedDevice::release_strlogouttime() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AccessedDevice.strLogoutTime)
  
  return strlogouttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessedDevice::set_allocated_strlogouttime(::std::string* strlogouttime) {
  if (strlogouttime != NULL) {
    
  } else {
    
  }
  strlogouttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strlogouttime);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AccessedDevice.strLogoutTime)
}

// uint32 uiOnlineDuration = 6;
inline void AccessedDevice::clear_uionlineduration() {
  uionlineduration_ = 0u;
}
inline ::google::protobuf::uint32 AccessedDevice::uionlineduration() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedDevice.uiOnlineDuration)
  return uionlineduration_;
}
inline void AccessedDevice::set_uionlineduration(::google::protobuf::uint32 value) {
  
  uionlineduration_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedDevice.uiOnlineDuration)
}

// -------------------------------------------------------------------

// AccessedUser

// string strUserID = 1;
inline void AccessedUser::clear_struserid() {
  struserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessedUser::struserid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedUser.strUserID)
  return struserid_.GetNoArena();
}
inline void AccessedUser::set_struserid(const ::std::string& value) {
  
  struserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedUser.strUserID)
}
#if LANG_CXX11
inline void AccessedUser::set_struserid(::std::string&& value) {
  
  struserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AccessedUser.strUserID)
}
#endif
inline void AccessedUser::set_struserid(const char* value) {
  
  struserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AccessedUser.strUserID)
}
inline void AccessedUser::set_struserid(const char* value, size_t size) {
  
  struserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AccessedUser.strUserID)
}
inline ::std::string* AccessedUser::mutable_struserid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AccessedUser.strUserID)
  return struserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessedUser::release_struserid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AccessedUser.strUserID)
  
  return struserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessedUser::set_allocated_struserid(::std::string* struserid) {
  if (struserid != NULL) {
    
  } else {
    
  }
  struserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struserid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AccessedUser.strUserID)
}

// string strUserName = 2;
inline void AccessedUser::clear_strusername() {
  strusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessedUser::strusername() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedUser.strUserName)
  return strusername_.GetNoArena();
}
inline void AccessedUser::set_strusername(const ::std::string& value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedUser.strUserName)
}
#if LANG_CXX11
inline void AccessedUser::set_strusername(::std::string&& value) {
  
  strusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AccessedUser.strUserName)
}
#endif
inline void AccessedUser::set_strusername(const char* value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AccessedUser.strUserName)
}
inline void AccessedUser::set_strusername(const char* value, size_t size) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AccessedUser.strUserName)
}
inline ::std::string* AccessedUser::mutable_strusername() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AccessedUser.strUserName)
  return strusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessedUser::release_strusername() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AccessedUser.strUserName)
  
  return strusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessedUser::set_allocated_strusername(::std::string* strusername) {
  if (strusername != NULL) {
    
  } else {
    
  }
  strusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strusername);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AccessedUser.strUserName)
}

// string strUserAliasname = 3;
inline void AccessedUser::clear_struseraliasname() {
  struseraliasname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessedUser::struseraliasname() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedUser.strUserAliasname)
  return struseraliasname_.GetNoArena();
}
inline void AccessedUser::set_struseraliasname(const ::std::string& value) {
  
  struseraliasname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedUser.strUserAliasname)
}
#if LANG_CXX11
inline void AccessedUser::set_struseraliasname(::std::string&& value) {
  
  struseraliasname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AccessedUser.strUserAliasname)
}
#endif
inline void AccessedUser::set_struseraliasname(const char* value) {
  
  struseraliasname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AccessedUser.strUserAliasname)
}
inline void AccessedUser::set_struseraliasname(const char* value, size_t size) {
  
  struseraliasname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AccessedUser.strUserAliasname)
}
inline ::std::string* AccessedUser::mutable_struseraliasname() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AccessedUser.strUserAliasname)
  return struseraliasname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessedUser::release_struseraliasname() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AccessedUser.strUserAliasname)
  
  return struseraliasname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessedUser::set_allocated_struseraliasname(::std::string* struseraliasname) {
  if (struseraliasname != NULL) {
    
  } else {
    
  }
  struseraliasname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struseraliasname);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AccessedUser.strUserAliasname)
}

// uint32 uiClientType = 4;
inline void AccessedUser::clear_uiclienttype() {
  uiclienttype_ = 0u;
}
inline ::google::protobuf::uint32 AccessedUser::uiclienttype() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedUser.uiClientType)
  return uiclienttype_;
}
inline void AccessedUser::set_uiclienttype(::google::protobuf::uint32 value) {
  
  uiclienttype_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedUser.uiClientType)
}

// string strLoginTime = 5;
inline void AccessedUser::clear_strlogintime() {
  strlogintime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessedUser::strlogintime() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedUser.strLoginTime)
  return strlogintime_.GetNoArena();
}
inline void AccessedUser::set_strlogintime(const ::std::string& value) {
  
  strlogintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedUser.strLoginTime)
}
#if LANG_CXX11
inline void AccessedUser::set_strlogintime(::std::string&& value) {
  
  strlogintime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AccessedUser.strLoginTime)
}
#endif
inline void AccessedUser::set_strlogintime(const char* value) {
  
  strlogintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AccessedUser.strLoginTime)
}
inline void AccessedUser::set_strlogintime(const char* value, size_t size) {
  
  strlogintime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AccessedUser.strLoginTime)
}
inline ::std::string* AccessedUser::mutable_strlogintime() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AccessedUser.strLoginTime)
  return strlogintime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessedUser::release_strlogintime() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AccessedUser.strLoginTime)
  
  return strlogintime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessedUser::set_allocated_strlogintime(::std::string* strlogintime) {
  if (strlogintime != NULL) {
    
  } else {
    
  }
  strlogintime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strlogintime);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AccessedUser.strLoginTime)
}

// string strLogoutTime = 6;
inline void AccessedUser::clear_strlogouttime() {
  strlogouttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessedUser::strlogouttime() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedUser.strLogoutTime)
  return strlogouttime_.GetNoArena();
}
inline void AccessedUser::set_strlogouttime(const ::std::string& value) {
  
  strlogouttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedUser.strLogoutTime)
}
#if LANG_CXX11
inline void AccessedUser::set_strlogouttime(::std::string&& value) {
  
  strlogouttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AccessedUser.strLogoutTime)
}
#endif
inline void AccessedUser::set_strlogouttime(const char* value) {
  
  strlogouttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AccessedUser.strLogoutTime)
}
inline void AccessedUser::set_strlogouttime(const char* value, size_t size) {
  
  strlogouttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AccessedUser.strLogoutTime)
}
inline ::std::string* AccessedUser::mutable_strlogouttime() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AccessedUser.strLogoutTime)
  return strlogouttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessedUser::release_strlogouttime() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AccessedUser.strLogoutTime)
  
  return strlogouttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessedUser::set_allocated_strlogouttime(::std::string* strlogouttime) {
  if (strlogouttime != NULL) {
    
  } else {
    
  }
  strlogouttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strlogouttime);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AccessedUser.strLogoutTime)
}

// uint32 uiOnlineDuration = 7;
inline void AccessedUser::clear_uionlineduration() {
  uionlineduration_ = 0u;
}
inline ::google::protobuf::uint32 AccessedUser::uionlineduration() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AccessedUser.uiOnlineDuration)
  return uionlineduration_;
}
inline void AccessedUser::set_uionlineduration(::google::protobuf::uint32 value) {
  
  uionlineduration_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AccessedUser.uiOnlineDuration)
}

// -------------------------------------------------------------------

// DeviceAccessRecord

// string strAccessID = 1;
inline void DeviceAccessRecord::clear_straccessid() {
  straccessid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAccessRecord::straccessid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.DeviceAccessRecord.strAccessID)
  return straccessid_.GetNoArena();
}
inline void DeviceAccessRecord::set_straccessid(const ::std::string& value) {
  
  straccessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.DeviceAccessRecord.strAccessID)
}
#if LANG_CXX11
inline void DeviceAccessRecord::set_straccessid(::std::string&& value) {
  
  straccessid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.DeviceAccessRecord.strAccessID)
}
#endif
inline void DeviceAccessRecord::set_straccessid(const char* value) {
  
  straccessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.DeviceAccessRecord.strAccessID)
}
inline void DeviceAccessRecord::set_straccessid(const char* value, size_t size) {
  
  straccessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.DeviceAccessRecord.strAccessID)
}
inline ::std::string* DeviceAccessRecord::mutable_straccessid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.DeviceAccessRecord.strAccessID)
  return straccessid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAccessRecord::release_straccessid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.DeviceAccessRecord.strAccessID)
  
  return straccessid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAccessRecord::set_allocated_straccessid(::std::string* straccessid) {
  if (straccessid != NULL) {
    
  } else {
    
  }
  straccessid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), straccessid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.DeviceAccessRecord.strAccessID)
}

// string strClusterID = 2;
inline void DeviceAccessRecord::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAccessRecord::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.DeviceAccessRecord.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void DeviceAccessRecord::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.DeviceAccessRecord.strClusterID)
}
#if LANG_CXX11
inline void DeviceAccessRecord::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.DeviceAccessRecord.strClusterID)
}
#endif
inline void DeviceAccessRecord::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.DeviceAccessRecord.strClusterID)
}
inline void DeviceAccessRecord::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.DeviceAccessRecord.strClusterID)
}
inline ::std::string* DeviceAccessRecord::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.DeviceAccessRecord.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAccessRecord::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.DeviceAccessRecord.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAccessRecord::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.DeviceAccessRecord.strClusterID)
}

// .Management.Interactive.Message.AccessedDevice accessedDevice = 3;
inline bool DeviceAccessRecord::has_accesseddevice() const {
  return this != internal_default_instance() && accesseddevice_ != NULL;
}
inline void DeviceAccessRecord::clear_accesseddevice() {
  if (GetArenaNoVirtual() == NULL && accesseddevice_ != NULL) delete accesseddevice_;
  accesseddevice_ = NULL;
}
inline const ::Management::Interactive::Message::AccessedDevice& DeviceAccessRecord::accesseddevice() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.DeviceAccessRecord.accessedDevice)
  return accesseddevice_ != NULL ? *accesseddevice_
                         : *::Management::Interactive::Message::AccessedDevice::internal_default_instance();
}
inline ::Management::Interactive::Message::AccessedDevice* DeviceAccessRecord::mutable_accesseddevice() {
  
  if (accesseddevice_ == NULL) {
    accesseddevice_ = new ::Management::Interactive::Message::AccessedDevice;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.DeviceAccessRecord.accessedDevice)
  return accesseddevice_;
}
inline ::Management::Interactive::Message::AccessedDevice* DeviceAccessRecord::release_accesseddevice() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.DeviceAccessRecord.accessedDevice)
  
  ::Management::Interactive::Message::AccessedDevice* temp = accesseddevice_;
  accesseddevice_ = NULL;
  return temp;
}
inline void DeviceAccessRecord::set_allocated_accesseddevice(::Management::Interactive::Message::AccessedDevice* accesseddevice) {
  delete accesseddevice_;
  accesseddevice_ = accesseddevice;
  if (accesseddevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.DeviceAccessRecord.accessedDevice)
}

// string strCreatedate = 4;
inline void DeviceAccessRecord::clear_strcreatedate() {
  strcreatedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAccessRecord::strcreatedate() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.DeviceAccessRecord.strCreatedate)
  return strcreatedate_.GetNoArena();
}
inline void DeviceAccessRecord::set_strcreatedate(const ::std::string& value) {
  
  strcreatedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.DeviceAccessRecord.strCreatedate)
}
#if LANG_CXX11
inline void DeviceAccessRecord::set_strcreatedate(::std::string&& value) {
  
  strcreatedate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.DeviceAccessRecord.strCreatedate)
}
#endif
inline void DeviceAccessRecord::set_strcreatedate(const char* value) {
  
  strcreatedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.DeviceAccessRecord.strCreatedate)
}
inline void DeviceAccessRecord::set_strcreatedate(const char* value, size_t size) {
  
  strcreatedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.DeviceAccessRecord.strCreatedate)
}
inline ::std::string* DeviceAccessRecord::mutable_strcreatedate() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.DeviceAccessRecord.strCreatedate)
  return strcreatedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAccessRecord::release_strcreatedate() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.DeviceAccessRecord.strCreatedate)
  
  return strcreatedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAccessRecord::set_allocated_strcreatedate(::std::string* strcreatedate) {
  if (strcreatedate != NULL) {
    
  } else {
    
  }
  strcreatedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcreatedate);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.DeviceAccessRecord.strCreatedate)
}

// uint32 uiStatus = 5;
inline void DeviceAccessRecord::clear_uistatus() {
  uistatus_ = 0u;
}
inline ::google::protobuf::uint32 DeviceAccessRecord::uistatus() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.DeviceAccessRecord.uiStatus)
  return uistatus_;
}
inline void DeviceAccessRecord::set_uistatus(::google::protobuf::uint32 value) {
  
  uistatus_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.DeviceAccessRecord.uiStatus)
}

// -------------------------------------------------------------------

// UserAccessRecord

// string strAccessID = 1;
inline void UserAccessRecord::clear_straccessid() {
  straccessid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccessRecord::straccessid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.UserAccessRecord.strAccessID)
  return straccessid_.GetNoArena();
}
inline void UserAccessRecord::set_straccessid(const ::std::string& value) {
  
  straccessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.UserAccessRecord.strAccessID)
}
#if LANG_CXX11
inline void UserAccessRecord::set_straccessid(::std::string&& value) {
  
  straccessid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.UserAccessRecord.strAccessID)
}
#endif
inline void UserAccessRecord::set_straccessid(const char* value) {
  
  straccessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.UserAccessRecord.strAccessID)
}
inline void UserAccessRecord::set_straccessid(const char* value, size_t size) {
  
  straccessid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.UserAccessRecord.strAccessID)
}
inline ::std::string* UserAccessRecord::mutable_straccessid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.UserAccessRecord.strAccessID)
  return straccessid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccessRecord::release_straccessid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.UserAccessRecord.strAccessID)
  
  return straccessid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccessRecord::set_allocated_straccessid(::std::string* straccessid) {
  if (straccessid != NULL) {
    
  } else {
    
  }
  straccessid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), straccessid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.UserAccessRecord.strAccessID)
}

// string strClusterID = 2;
inline void UserAccessRecord::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccessRecord::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.UserAccessRecord.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void UserAccessRecord::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.UserAccessRecord.strClusterID)
}
#if LANG_CXX11
inline void UserAccessRecord::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.UserAccessRecord.strClusterID)
}
#endif
inline void UserAccessRecord::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.UserAccessRecord.strClusterID)
}
inline void UserAccessRecord::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.UserAccessRecord.strClusterID)
}
inline ::std::string* UserAccessRecord::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.UserAccessRecord.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccessRecord::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.UserAccessRecord.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccessRecord::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.UserAccessRecord.strClusterID)
}

// .Management.Interactive.Message.AccessedUser accessedUser = 3;
inline bool UserAccessRecord::has_accesseduser() const {
  return this != internal_default_instance() && accesseduser_ != NULL;
}
inline void UserAccessRecord::clear_accesseduser() {
  if (GetArenaNoVirtual() == NULL && accesseduser_ != NULL) delete accesseduser_;
  accesseduser_ = NULL;
}
inline const ::Management::Interactive::Message::AccessedUser& UserAccessRecord::accesseduser() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.UserAccessRecord.accessedUser)
  return accesseduser_ != NULL ? *accesseduser_
                         : *::Management::Interactive::Message::AccessedUser::internal_default_instance();
}
inline ::Management::Interactive::Message::AccessedUser* UserAccessRecord::mutable_accesseduser() {
  
  if (accesseduser_ == NULL) {
    accesseduser_ = new ::Management::Interactive::Message::AccessedUser;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.UserAccessRecord.accessedUser)
  return accesseduser_;
}
inline ::Management::Interactive::Message::AccessedUser* UserAccessRecord::release_accesseduser() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.UserAccessRecord.accessedUser)
  
  ::Management::Interactive::Message::AccessedUser* temp = accesseduser_;
  accesseduser_ = NULL;
  return temp;
}
inline void UserAccessRecord::set_allocated_accesseduser(::Management::Interactive::Message::AccessedUser* accesseduser) {
  delete accesseduser_;
  accesseduser_ = accesseduser;
  if (accesseduser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.UserAccessRecord.accessedUser)
}

// string strCreatedate = 4;
inline void UserAccessRecord::clear_strcreatedate() {
  strcreatedate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccessRecord::strcreatedate() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.UserAccessRecord.strCreatedate)
  return strcreatedate_.GetNoArena();
}
inline void UserAccessRecord::set_strcreatedate(const ::std::string& value) {
  
  strcreatedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.UserAccessRecord.strCreatedate)
}
#if LANG_CXX11
inline void UserAccessRecord::set_strcreatedate(::std::string&& value) {
  
  strcreatedate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.UserAccessRecord.strCreatedate)
}
#endif
inline void UserAccessRecord::set_strcreatedate(const char* value) {
  
  strcreatedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.UserAccessRecord.strCreatedate)
}
inline void UserAccessRecord::set_strcreatedate(const char* value, size_t size) {
  
  strcreatedate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.UserAccessRecord.strCreatedate)
}
inline ::std::string* UserAccessRecord::mutable_strcreatedate() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.UserAccessRecord.strCreatedate)
  return strcreatedate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccessRecord::release_strcreatedate() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.UserAccessRecord.strCreatedate)
  
  return strcreatedate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccessRecord::set_allocated_strcreatedate(::std::string* strcreatedate) {
  if (strcreatedate != NULL) {
    
  } else {
    
  }
  strcreatedate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcreatedate);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.UserAccessRecord.strCreatedate)
}

// uint32 uiStatus = 5;
inline void UserAccessRecord::clear_uistatus() {
  uistatus_ = 0u;
}
inline ::google::protobuf::uint32 UserAccessRecord::uistatus() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.UserAccessRecord.uiStatus)
  return uistatus_;
}
inline void UserAccessRecord::set_uistatus(::google::protobuf::uint32 value) {
  
  uistatus_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.UserAccessRecord.uiStatus)
}

// -------------------------------------------------------------------

// AddClusterReq

// .Management.Interactive.Message.Cluster clusterInfo = 1;
inline bool AddClusterReq::has_clusterinfo() const {
  return this != internal_default_instance() && clusterinfo_ != NULL;
}
inline void AddClusterReq::clear_clusterinfo() {
  if (GetArenaNoVirtual() == NULL && clusterinfo_ != NULL) delete clusterinfo_;
  clusterinfo_ = NULL;
}
inline const ::Management::Interactive::Message::Cluster& AddClusterReq::clusterinfo() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AddClusterReq.clusterInfo)
  return clusterinfo_ != NULL ? *clusterinfo_
                         : *::Management::Interactive::Message::Cluster::internal_default_instance();
}
inline ::Management::Interactive::Message::Cluster* AddClusterReq::mutable_clusterinfo() {
  
  if (clusterinfo_ == NULL) {
    clusterinfo_ = new ::Management::Interactive::Message::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AddClusterReq.clusterInfo)
  return clusterinfo_;
}
inline ::Management::Interactive::Message::Cluster* AddClusterReq::release_clusterinfo() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AddClusterReq.clusterInfo)
  
  ::Management::Interactive::Message::Cluster* temp = clusterinfo_;
  clusterinfo_ = NULL;
  return temp;
}
inline void AddClusterReq::set_allocated_clusterinfo(::Management::Interactive::Message::Cluster* clusterinfo) {
  delete clusterinfo_;
  clusterinfo_ = clusterinfo;
  if (clusterinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AddClusterReq.clusterInfo)
}

// -------------------------------------------------------------------

// AddClusterRsp

// string strClusterID = 1;
inline void AddClusterRsp::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddClusterRsp::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.AddClusterRsp.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void AddClusterRsp::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.AddClusterRsp.strClusterID)
}
#if LANG_CXX11
inline void AddClusterRsp::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.AddClusterRsp.strClusterID)
}
#endif
inline void AddClusterRsp::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.AddClusterRsp.strClusterID)
}
inline void AddClusterRsp::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.AddClusterRsp.strClusterID)
}
inline ::std::string* AddClusterRsp::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.AddClusterRsp.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddClusterRsp::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.AddClusterRsp.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddClusterRsp::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.AddClusterRsp.strClusterID)
}

// -------------------------------------------------------------------

// DeleteClusterReq

// string strClusterID = 1;
inline void DeleteClusterReq::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterReq::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.DeleteClusterReq.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void DeleteClusterReq::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.DeleteClusterReq.strClusterID)
}
#if LANG_CXX11
inline void DeleteClusterReq::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.DeleteClusterReq.strClusterID)
}
#endif
inline void DeleteClusterReq::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.DeleteClusterReq.strClusterID)
}
inline void DeleteClusterReq::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.DeleteClusterReq.strClusterID)
}
inline ::std::string* DeleteClusterReq::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.DeleteClusterReq.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterReq::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.DeleteClusterReq.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterReq::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.DeleteClusterReq.strClusterID)
}

// -------------------------------------------------------------------

// DeleteClusterRsp

// string strValue = 1;
inline void DeleteClusterRsp::clear_strvalue() {
  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRsp::strvalue() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.DeleteClusterRsp.strValue)
  return strvalue_.GetNoArena();
}
inline void DeleteClusterRsp::set_strvalue(const ::std::string& value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.DeleteClusterRsp.strValue)
}
#if LANG_CXX11
inline void DeleteClusterRsp::set_strvalue(::std::string&& value) {
  
  strvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.DeleteClusterRsp.strValue)
}
#endif
inline void DeleteClusterRsp::set_strvalue(const char* value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.DeleteClusterRsp.strValue)
}
inline void DeleteClusterRsp::set_strvalue(const char* value, size_t size) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.DeleteClusterRsp.strValue)
}
inline ::std::string* DeleteClusterRsp::mutable_strvalue() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.DeleteClusterRsp.strValue)
  return strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRsp::release_strvalue() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.DeleteClusterRsp.strValue)
  
  return strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRsp::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue != NULL) {
    
  } else {
    
  }
  strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvalue);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.DeleteClusterRsp.strValue)
}

// -------------------------------------------------------------------

// ModifyClusterReq

// .Management.Interactive.Message.Cluster clusterInfo = 1;
inline bool ModifyClusterReq::has_clusterinfo() const {
  return this != internal_default_instance() && clusterinfo_ != NULL;
}
inline void ModifyClusterReq::clear_clusterinfo() {
  if (GetArenaNoVirtual() == NULL && clusterinfo_ != NULL) delete clusterinfo_;
  clusterinfo_ = NULL;
}
inline const ::Management::Interactive::Message::Cluster& ModifyClusterReq::clusterinfo() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ModifyClusterReq.clusterInfo)
  return clusterinfo_ != NULL ? *clusterinfo_
                         : *::Management::Interactive::Message::Cluster::internal_default_instance();
}
inline ::Management::Interactive::Message::Cluster* ModifyClusterReq::mutable_clusterinfo() {
  
  if (clusterinfo_ == NULL) {
    clusterinfo_ = new ::Management::Interactive::Message::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.ModifyClusterReq.clusterInfo)
  return clusterinfo_;
}
inline ::Management::Interactive::Message::Cluster* ModifyClusterReq::release_clusterinfo() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.ModifyClusterReq.clusterInfo)
  
  ::Management::Interactive::Message::Cluster* temp = clusterinfo_;
  clusterinfo_ = NULL;
  return temp;
}
inline void ModifyClusterReq::set_allocated_clusterinfo(::Management::Interactive::Message::Cluster* clusterinfo) {
  delete clusterinfo_;
  clusterinfo_ = clusterinfo;
  if (clusterinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.ModifyClusterReq.clusterInfo)
}

// -------------------------------------------------------------------

// ModifyClusterRsp

// string strValue = 1;
inline void ModifyClusterRsp::clear_strvalue() {
  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifyClusterRsp::strvalue() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ModifyClusterRsp.strValue)
  return strvalue_.GetNoArena();
}
inline void ModifyClusterRsp::set_strvalue(const ::std::string& value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.ModifyClusterRsp.strValue)
}
#if LANG_CXX11
inline void ModifyClusterRsp::set_strvalue(::std::string&& value) {
  
  strvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.ModifyClusterRsp.strValue)
}
#endif
inline void ModifyClusterRsp::set_strvalue(const char* value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.ModifyClusterRsp.strValue)
}
inline void ModifyClusterRsp::set_strvalue(const char* value, size_t size) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.ModifyClusterRsp.strValue)
}
inline ::std::string* ModifyClusterRsp::mutable_strvalue() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.ModifyClusterRsp.strValue)
  return strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifyClusterRsp::release_strvalue() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.ModifyClusterRsp.strValue)
  
  return strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifyClusterRsp::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue != NULL) {
    
  } else {
    
  }
  strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvalue);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.ModifyClusterRsp.strValue)
}

// -------------------------------------------------------------------

// QueryClusterInfoReq

// string strClusterID = 1;
inline void QueryClusterInfoReq::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryClusterInfoReq::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterInfoReq.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void QueryClusterInfoReq::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterInfoReq.strClusterID)
}
#if LANG_CXX11
inline void QueryClusterInfoReq::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.QueryClusterInfoReq.strClusterID)
}
#endif
inline void QueryClusterInfoReq::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.QueryClusterInfoReq.strClusterID)
}
inline void QueryClusterInfoReq::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.QueryClusterInfoReq.strClusterID)
}
inline ::std::string* QueryClusterInfoReq::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterInfoReq.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryClusterInfoReq::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.QueryClusterInfoReq.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryClusterInfoReq::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.QueryClusterInfoReq.strClusterID)
}

// -------------------------------------------------------------------

// QueryClusterInfoRsp

// .Management.Interactive.Message.ClusterStatus clusterStatus = 1;
inline bool QueryClusterInfoRsp::has_clusterstatus() const {
  return this != internal_default_instance() && clusterstatus_ != NULL;
}
inline void QueryClusterInfoRsp::clear_clusterstatus() {
  if (GetArenaNoVirtual() == NULL && clusterstatus_ != NULL) delete clusterstatus_;
  clusterstatus_ = NULL;
}
inline const ::Management::Interactive::Message::ClusterStatus& QueryClusterInfoRsp::clusterstatus() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterInfoRsp.clusterStatus)
  return clusterstatus_ != NULL ? *clusterstatus_
                         : *::Management::Interactive::Message::ClusterStatus::internal_default_instance();
}
inline ::Management::Interactive::Message::ClusterStatus* QueryClusterInfoRsp::mutable_clusterstatus() {
  
  if (clusterstatus_ == NULL) {
    clusterstatus_ = new ::Management::Interactive::Message::ClusterStatus;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterInfoRsp.clusterStatus)
  return clusterstatus_;
}
inline ::Management::Interactive::Message::ClusterStatus* QueryClusterInfoRsp::release_clusterstatus() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.QueryClusterInfoRsp.clusterStatus)
  
  ::Management::Interactive::Message::ClusterStatus* temp = clusterstatus_;
  clusterstatus_ = NULL;
  return temp;
}
inline void QueryClusterInfoRsp::set_allocated_clusterstatus(::Management::Interactive::Message::ClusterStatus* clusterstatus) {
  delete clusterstatus_;
  clusterstatus_ = clusterstatus;
  if (clusterstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.QueryClusterInfoRsp.clusterStatus)
}

// -------------------------------------------------------------------

// ShakehandClusterReq

// string strClusterID = 1;
inline void ShakehandClusterReq::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShakehandClusterReq::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ShakehandClusterReq.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void ShakehandClusterReq::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.ShakehandClusterReq.strClusterID)
}
#if LANG_CXX11
inline void ShakehandClusterReq::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.ShakehandClusterReq.strClusterID)
}
#endif
inline void ShakehandClusterReq::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.ShakehandClusterReq.strClusterID)
}
inline void ShakehandClusterReq::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.ShakehandClusterReq.strClusterID)
}
inline ::std::string* ShakehandClusterReq::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.ShakehandClusterReq.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakehandClusterReq::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.ShakehandClusterReq.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakehandClusterReq::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.ShakehandClusterReq.strClusterID)
}

// -------------------------------------------------------------------

// ShakehandClusterRsp

// string strValue = 1;
inline void ShakehandClusterRsp::clear_strvalue() {
  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShakehandClusterRsp::strvalue() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ShakehandClusterRsp.strValue)
  return strvalue_.GetNoArena();
}
inline void ShakehandClusterRsp::set_strvalue(const ::std::string& value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.ShakehandClusterRsp.strValue)
}
#if LANG_CXX11
inline void ShakehandClusterRsp::set_strvalue(::std::string&& value) {
  
  strvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.ShakehandClusterRsp.strValue)
}
#endif
inline void ShakehandClusterRsp::set_strvalue(const char* value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.ShakehandClusterRsp.strValue)
}
inline void ShakehandClusterRsp::set_strvalue(const char* value, size_t size) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.ShakehandClusterRsp.strValue)
}
inline ::std::string* ShakehandClusterRsp::mutable_strvalue() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.ShakehandClusterRsp.strValue)
  return strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakehandClusterRsp::release_strvalue() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.ShakehandClusterRsp.strValue)
  
  return strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakehandClusterRsp::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue != NULL) {
    
  } else {
    
  }
  strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvalue);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.ShakehandClusterRsp.strValue)
}

// -------------------------------------------------------------------

// QueryAllClusterReq

// string strManagementAddress = 1;
inline void QueryAllClusterReq::clear_strmanagementaddress() {
  strmanagementaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryAllClusterReq::strmanagementaddress() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryAllClusterReq.strManagementAddress)
  return strmanagementaddress_.GetNoArena();
}
inline void QueryAllClusterReq::set_strmanagementaddress(const ::std::string& value) {
  
  strmanagementaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryAllClusterReq.strManagementAddress)
}
#if LANG_CXX11
inline void QueryAllClusterReq::set_strmanagementaddress(::std::string&& value) {
  
  strmanagementaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.QueryAllClusterReq.strManagementAddress)
}
#endif
inline void QueryAllClusterReq::set_strmanagementaddress(const char* value) {
  
  strmanagementaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.QueryAllClusterReq.strManagementAddress)
}
inline void QueryAllClusterReq::set_strmanagementaddress(const char* value, size_t size) {
  
  strmanagementaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.QueryAllClusterReq.strManagementAddress)
}
inline ::std::string* QueryAllClusterReq::mutable_strmanagementaddress() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryAllClusterReq.strManagementAddress)
  return strmanagementaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryAllClusterReq::release_strmanagementaddress() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.QueryAllClusterReq.strManagementAddress)
  
  return strmanagementaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryAllClusterReq::set_allocated_strmanagementaddress(::std::string* strmanagementaddress) {
  if (strmanagementaddress != NULL) {
    
  } else {
    
  }
  strmanagementaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmanagementaddress);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.QueryAllClusterReq.strManagementAddress)
}

// -------------------------------------------------------------------

// QueryAllClusterRsp

// repeated .Management.Interactive.Message.ClusterStatus clusterStatus = 1;
inline int QueryAllClusterRsp::clusterstatus_size() const {
  return clusterstatus_.size();
}
inline void QueryAllClusterRsp::clear_clusterstatus() {
  clusterstatus_.Clear();
}
inline const ::Management::Interactive::Message::ClusterStatus& QueryAllClusterRsp::clusterstatus(int index) const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryAllClusterRsp.clusterStatus)
  return clusterstatus_.Get(index);
}
inline ::Management::Interactive::Message::ClusterStatus* QueryAllClusterRsp::mutable_clusterstatus(int index) {
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryAllClusterRsp.clusterStatus)
  return clusterstatus_.Mutable(index);
}
inline ::Management::Interactive::Message::ClusterStatus* QueryAllClusterRsp::add_clusterstatus() {
  // @@protoc_insertion_point(field_add:Management.Interactive.Message.QueryAllClusterRsp.clusterStatus)
  return clusterstatus_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::ClusterStatus >*
QueryAllClusterRsp::mutable_clusterstatus() {
  // @@protoc_insertion_point(field_mutable_list:Management.Interactive.Message.QueryAllClusterRsp.clusterStatus)
  return &clusterstatus_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::ClusterStatus >&
QueryAllClusterRsp::clusterstatus() const {
  // @@protoc_insertion_point(field_list:Management.Interactive.Message.QueryAllClusterRsp.clusterStatus)
  return clusterstatus_;
}

// -------------------------------------------------------------------

// QueryClusterDeviceReq

// string strClusterID = 1;
inline void QueryClusterDeviceReq::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryClusterDeviceReq::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterDeviceReq.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void QueryClusterDeviceReq::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterDeviceReq.strClusterID)
}
#if LANG_CXX11
inline void QueryClusterDeviceReq::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.QueryClusterDeviceReq.strClusterID)
}
#endif
inline void QueryClusterDeviceReq::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.QueryClusterDeviceReq.strClusterID)
}
inline void QueryClusterDeviceReq::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.QueryClusterDeviceReq.strClusterID)
}
inline ::std::string* QueryClusterDeviceReq::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterDeviceReq.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryClusterDeviceReq::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.QueryClusterDeviceReq.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryClusterDeviceReq::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.QueryClusterDeviceReq.strClusterID)
}

// string strBegindate = 2;
inline void QueryClusterDeviceReq::clear_strbegindate() {
  strbegindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryClusterDeviceReq::strbegindate() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterDeviceReq.strBegindate)
  return strbegindate_.GetNoArena();
}
inline void QueryClusterDeviceReq::set_strbegindate(const ::std::string& value) {
  
  strbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterDeviceReq.strBegindate)
}
#if LANG_CXX11
inline void QueryClusterDeviceReq::set_strbegindate(::std::string&& value) {
  
  strbegindate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.QueryClusterDeviceReq.strBegindate)
}
#endif
inline void QueryClusterDeviceReq::set_strbegindate(const char* value) {
  
  strbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.QueryClusterDeviceReq.strBegindate)
}
inline void QueryClusterDeviceReq::set_strbegindate(const char* value, size_t size) {
  
  strbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.QueryClusterDeviceReq.strBegindate)
}
inline ::std::string* QueryClusterDeviceReq::mutable_strbegindate() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterDeviceReq.strBegindate)
  return strbegindate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryClusterDeviceReq::release_strbegindate() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.QueryClusterDeviceReq.strBegindate)
  
  return strbegindate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryClusterDeviceReq::set_allocated_strbegindate(::std::string* strbegindate) {
  if (strbegindate != NULL) {
    
  } else {
    
  }
  strbegindate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strbegindate);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.QueryClusterDeviceReq.strBegindate)
}

// string strEnddate = 3;
inline void QueryClusterDeviceReq::clear_strenddate() {
  strenddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryClusterDeviceReq::strenddate() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterDeviceReq.strEnddate)
  return strenddate_.GetNoArena();
}
inline void QueryClusterDeviceReq::set_strenddate(const ::std::string& value) {
  
  strenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterDeviceReq.strEnddate)
}
#if LANG_CXX11
inline void QueryClusterDeviceReq::set_strenddate(::std::string&& value) {
  
  strenddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.QueryClusterDeviceReq.strEnddate)
}
#endif
inline void QueryClusterDeviceReq::set_strenddate(const char* value) {
  
  strenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.QueryClusterDeviceReq.strEnddate)
}
inline void QueryClusterDeviceReq::set_strenddate(const char* value, size_t size) {
  
  strenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.QueryClusterDeviceReq.strEnddate)
}
inline ::std::string* QueryClusterDeviceReq::mutable_strenddate() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterDeviceReq.strEnddate)
  return strenddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryClusterDeviceReq::release_strenddate() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.QueryClusterDeviceReq.strEnddate)
  
  return strenddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryClusterDeviceReq::set_allocated_strenddate(::std::string* strenddate) {
  if (strenddate != NULL) {
    
  } else {
    
  }
  strenddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strenddate);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.QueryClusterDeviceReq.strEnddate)
}

// uint32 uiRecordType = 4;
inline void QueryClusterDeviceReq::clear_uirecordtype() {
  uirecordtype_ = 0u;
}
inline ::google::protobuf::uint32 QueryClusterDeviceReq::uirecordtype() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterDeviceReq.uiRecordType)
  return uirecordtype_;
}
inline void QueryClusterDeviceReq::set_uirecordtype(::google::protobuf::uint32 value) {
  
  uirecordtype_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterDeviceReq.uiRecordType)
}

// uint32 uiBeginIndex = 5;
inline void QueryClusterDeviceReq::clear_uibeginindex() {
  uibeginindex_ = 0u;
}
inline ::google::protobuf::uint32 QueryClusterDeviceReq::uibeginindex() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterDeviceReq.uiBeginIndex)
  return uibeginindex_;
}
inline void QueryClusterDeviceReq::set_uibeginindex(::google::protobuf::uint32 value) {
  
  uibeginindex_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterDeviceReq.uiBeginIndex)
}

// -------------------------------------------------------------------

// QueryClusterDeviceRsp

// repeated .Management.Interactive.Message.AccessedDevice accessedDeviceInfo = 1;
inline int QueryClusterDeviceRsp::accesseddeviceinfo_size() const {
  return accesseddeviceinfo_.size();
}
inline void QueryClusterDeviceRsp::clear_accesseddeviceinfo() {
  accesseddeviceinfo_.Clear();
}
inline const ::Management::Interactive::Message::AccessedDevice& QueryClusterDeviceRsp::accesseddeviceinfo(int index) const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterDeviceRsp.accessedDeviceInfo)
  return accesseddeviceinfo_.Get(index);
}
inline ::Management::Interactive::Message::AccessedDevice* QueryClusterDeviceRsp::mutable_accesseddeviceinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterDeviceRsp.accessedDeviceInfo)
  return accesseddeviceinfo_.Mutable(index);
}
inline ::Management::Interactive::Message::AccessedDevice* QueryClusterDeviceRsp::add_accesseddeviceinfo() {
  // @@protoc_insertion_point(field_add:Management.Interactive.Message.QueryClusterDeviceRsp.accessedDeviceInfo)
  return accesseddeviceinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedDevice >*
QueryClusterDeviceRsp::mutable_accesseddeviceinfo() {
  // @@protoc_insertion_point(field_mutable_list:Management.Interactive.Message.QueryClusterDeviceRsp.accessedDeviceInfo)
  return &accesseddeviceinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedDevice >&
QueryClusterDeviceRsp::accesseddeviceinfo() const {
  // @@protoc_insertion_point(field_list:Management.Interactive.Message.QueryClusterDeviceRsp.accessedDeviceInfo)
  return accesseddeviceinfo_;
}

// -------------------------------------------------------------------

// QueryClusterUserReq

// string strClusterID = 1;
inline void QueryClusterUserReq::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryClusterUserReq::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterUserReq.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void QueryClusterUserReq::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterUserReq.strClusterID)
}
#if LANG_CXX11
inline void QueryClusterUserReq::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.QueryClusterUserReq.strClusterID)
}
#endif
inline void QueryClusterUserReq::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.QueryClusterUserReq.strClusterID)
}
inline void QueryClusterUserReq::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.QueryClusterUserReq.strClusterID)
}
inline ::std::string* QueryClusterUserReq::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterUserReq.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryClusterUserReq::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.QueryClusterUserReq.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryClusterUserReq::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.QueryClusterUserReq.strClusterID)
}

// string strBegindate = 2;
inline void QueryClusterUserReq::clear_strbegindate() {
  strbegindate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryClusterUserReq::strbegindate() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterUserReq.strBegindate)
  return strbegindate_.GetNoArena();
}
inline void QueryClusterUserReq::set_strbegindate(const ::std::string& value) {
  
  strbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterUserReq.strBegindate)
}
#if LANG_CXX11
inline void QueryClusterUserReq::set_strbegindate(::std::string&& value) {
  
  strbegindate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.QueryClusterUserReq.strBegindate)
}
#endif
inline void QueryClusterUserReq::set_strbegindate(const char* value) {
  
  strbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.QueryClusterUserReq.strBegindate)
}
inline void QueryClusterUserReq::set_strbegindate(const char* value, size_t size) {
  
  strbegindate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.QueryClusterUserReq.strBegindate)
}
inline ::std::string* QueryClusterUserReq::mutable_strbegindate() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterUserReq.strBegindate)
  return strbegindate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryClusterUserReq::release_strbegindate() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.QueryClusterUserReq.strBegindate)
  
  return strbegindate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryClusterUserReq::set_allocated_strbegindate(::std::string* strbegindate) {
  if (strbegindate != NULL) {
    
  } else {
    
  }
  strbegindate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strbegindate);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.QueryClusterUserReq.strBegindate)
}

// string strEnddate = 3;
inline void QueryClusterUserReq::clear_strenddate() {
  strenddate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryClusterUserReq::strenddate() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterUserReq.strEnddate)
  return strenddate_.GetNoArena();
}
inline void QueryClusterUserReq::set_strenddate(const ::std::string& value) {
  
  strenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterUserReq.strEnddate)
}
#if LANG_CXX11
inline void QueryClusterUserReq::set_strenddate(::std::string&& value) {
  
  strenddate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.QueryClusterUserReq.strEnddate)
}
#endif
inline void QueryClusterUserReq::set_strenddate(const char* value) {
  
  strenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.QueryClusterUserReq.strEnddate)
}
inline void QueryClusterUserReq::set_strenddate(const char* value, size_t size) {
  
  strenddate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.QueryClusterUserReq.strEnddate)
}
inline ::std::string* QueryClusterUserReq::mutable_strenddate() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterUserReq.strEnddate)
  return strenddate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryClusterUserReq::release_strenddate() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.QueryClusterUserReq.strEnddate)
  
  return strenddate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryClusterUserReq::set_allocated_strenddate(::std::string* strenddate) {
  if (strenddate != NULL) {
    
  } else {
    
  }
  strenddate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strenddate);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.QueryClusterUserReq.strEnddate)
}

// uint32 uiRecordType = 4;
inline void QueryClusterUserReq::clear_uirecordtype() {
  uirecordtype_ = 0u;
}
inline ::google::protobuf::uint32 QueryClusterUserReq::uirecordtype() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterUserReq.uiRecordType)
  return uirecordtype_;
}
inline void QueryClusterUserReq::set_uirecordtype(::google::protobuf::uint32 value) {
  
  uirecordtype_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterUserReq.uiRecordType)
}

// uint32 uiBeginIndex = 5;
inline void QueryClusterUserReq::clear_uibeginindex() {
  uibeginindex_ = 0u;
}
inline ::google::protobuf::uint32 QueryClusterUserReq::uibeginindex() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterUserReq.uiBeginIndex)
  return uibeginindex_;
}
inline void QueryClusterUserReq::set_uibeginindex(::google::protobuf::uint32 value) {
  
  uibeginindex_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.QueryClusterUserReq.uiBeginIndex)
}

// -------------------------------------------------------------------

// QueryClusterUserRsp

// repeated .Management.Interactive.Message.AccessedUser accessedUserInfo = 1;
inline int QueryClusterUserRsp::accesseduserinfo_size() const {
  return accesseduserinfo_.size();
}
inline void QueryClusterUserRsp::clear_accesseduserinfo() {
  accesseduserinfo_.Clear();
}
inline const ::Management::Interactive::Message::AccessedUser& QueryClusterUserRsp::accesseduserinfo(int index) const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.QueryClusterUserRsp.accessedUserInfo)
  return accesseduserinfo_.Get(index);
}
inline ::Management::Interactive::Message::AccessedUser* QueryClusterUserRsp::mutable_accesseduserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.QueryClusterUserRsp.accessedUserInfo)
  return accesseduserinfo_.Mutable(index);
}
inline ::Management::Interactive::Message::AccessedUser* QueryClusterUserRsp::add_accesseduserinfo() {
  // @@protoc_insertion_point(field_add:Management.Interactive.Message.QueryClusterUserRsp.accessedUserInfo)
  return accesseduserinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedUser >*
QueryClusterUserRsp::mutable_accesseduserinfo() {
  // @@protoc_insertion_point(field_mutable_list:Management.Interactive.Message.QueryClusterUserRsp.accessedUserInfo)
  return &accesseduserinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::AccessedUser >&
QueryClusterUserRsp::accesseduserinfo() const {
  // @@protoc_insertion_point(field_list:Management.Interactive.Message.QueryClusterUserRsp.accessedUserInfo)
  return accesseduserinfo_;
}

// -------------------------------------------------------------------

// PushClusterDeviceReq

// string strClusterID = 1;
inline void PushClusterDeviceReq::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushClusterDeviceReq::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.PushClusterDeviceReq.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void PushClusterDeviceReq::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.PushClusterDeviceReq.strClusterID)
}
#if LANG_CXX11
inline void PushClusterDeviceReq::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.PushClusterDeviceReq.strClusterID)
}
#endif
inline void PushClusterDeviceReq::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.PushClusterDeviceReq.strClusterID)
}
inline void PushClusterDeviceReq::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.PushClusterDeviceReq.strClusterID)
}
inline ::std::string* PushClusterDeviceReq::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.PushClusterDeviceReq.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushClusterDeviceReq::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.PushClusterDeviceReq.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushClusterDeviceReq::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.PushClusterDeviceReq.strClusterID)
}

// repeated .Management.Interactive.Message.DeviceAccessRecord deviceAccessRecord = 2;
inline int PushClusterDeviceReq::deviceaccessrecord_size() const {
  return deviceaccessrecord_.size();
}
inline void PushClusterDeviceReq::clear_deviceaccessrecord() {
  deviceaccessrecord_.Clear();
}
inline const ::Management::Interactive::Message::DeviceAccessRecord& PushClusterDeviceReq::deviceaccessrecord(int index) const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.PushClusterDeviceReq.deviceAccessRecord)
  return deviceaccessrecord_.Get(index);
}
inline ::Management::Interactive::Message::DeviceAccessRecord* PushClusterDeviceReq::mutable_deviceaccessrecord(int index) {
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.PushClusterDeviceReq.deviceAccessRecord)
  return deviceaccessrecord_.Mutable(index);
}
inline ::Management::Interactive::Message::DeviceAccessRecord* PushClusterDeviceReq::add_deviceaccessrecord() {
  // @@protoc_insertion_point(field_add:Management.Interactive.Message.PushClusterDeviceReq.deviceAccessRecord)
  return deviceaccessrecord_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::DeviceAccessRecord >*
PushClusterDeviceReq::mutable_deviceaccessrecord() {
  // @@protoc_insertion_point(field_mutable_list:Management.Interactive.Message.PushClusterDeviceReq.deviceAccessRecord)
  return &deviceaccessrecord_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::DeviceAccessRecord >&
PushClusterDeviceReq::deviceaccessrecord() const {
  // @@protoc_insertion_point(field_list:Management.Interactive.Message.PushClusterDeviceReq.deviceAccessRecord)
  return deviceaccessrecord_;
}

// -------------------------------------------------------------------

// PushClusterDeviceRsp

// string strValue = 1;
inline void PushClusterDeviceRsp::clear_strvalue() {
  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushClusterDeviceRsp::strvalue() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.PushClusterDeviceRsp.strValue)
  return strvalue_.GetNoArena();
}
inline void PushClusterDeviceRsp::set_strvalue(const ::std::string& value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.PushClusterDeviceRsp.strValue)
}
#if LANG_CXX11
inline void PushClusterDeviceRsp::set_strvalue(::std::string&& value) {
  
  strvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.PushClusterDeviceRsp.strValue)
}
#endif
inline void PushClusterDeviceRsp::set_strvalue(const char* value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.PushClusterDeviceRsp.strValue)
}
inline void PushClusterDeviceRsp::set_strvalue(const char* value, size_t size) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.PushClusterDeviceRsp.strValue)
}
inline ::std::string* PushClusterDeviceRsp::mutable_strvalue() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.PushClusterDeviceRsp.strValue)
  return strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushClusterDeviceRsp::release_strvalue() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.PushClusterDeviceRsp.strValue)
  
  return strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushClusterDeviceRsp::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue != NULL) {
    
  } else {
    
  }
  strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvalue);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.PushClusterDeviceRsp.strValue)
}

// -------------------------------------------------------------------

// PushClusterUserReq

// string strClusterID = 1;
inline void PushClusterUserReq::clear_strclusterid() {
  strclusterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushClusterUserReq::strclusterid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.PushClusterUserReq.strClusterID)
  return strclusterid_.GetNoArena();
}
inline void PushClusterUserReq::set_strclusterid(const ::std::string& value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.PushClusterUserReq.strClusterID)
}
#if LANG_CXX11
inline void PushClusterUserReq::set_strclusterid(::std::string&& value) {
  
  strclusterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.PushClusterUserReq.strClusterID)
}
#endif
inline void PushClusterUserReq::set_strclusterid(const char* value) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.PushClusterUserReq.strClusterID)
}
inline void PushClusterUserReq::set_strclusterid(const char* value, size_t size) {
  
  strclusterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.PushClusterUserReq.strClusterID)
}
inline ::std::string* PushClusterUserReq::mutable_strclusterid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.PushClusterUserReq.strClusterID)
  return strclusterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushClusterUserReq::release_strclusterid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.PushClusterUserReq.strClusterID)
  
  return strclusterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushClusterUserReq::set_allocated_strclusterid(::std::string* strclusterid) {
  if (strclusterid != NULL) {
    
  } else {
    
  }
  strclusterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strclusterid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.PushClusterUserReq.strClusterID)
}

// repeated .Management.Interactive.Message.UserAccessRecord userAccessRecord = 2;
inline int PushClusterUserReq::useraccessrecord_size() const {
  return useraccessrecord_.size();
}
inline void PushClusterUserReq::clear_useraccessrecord() {
  useraccessrecord_.Clear();
}
inline const ::Management::Interactive::Message::UserAccessRecord& PushClusterUserReq::useraccessrecord(int index) const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.PushClusterUserReq.userAccessRecord)
  return useraccessrecord_.Get(index);
}
inline ::Management::Interactive::Message::UserAccessRecord* PushClusterUserReq::mutable_useraccessrecord(int index) {
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.PushClusterUserReq.userAccessRecord)
  return useraccessrecord_.Mutable(index);
}
inline ::Management::Interactive::Message::UserAccessRecord* PushClusterUserReq::add_useraccessrecord() {
  // @@protoc_insertion_point(field_add:Management.Interactive.Message.PushClusterUserReq.userAccessRecord)
  return useraccessrecord_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::UserAccessRecord >*
PushClusterUserReq::mutable_useraccessrecord() {
  // @@protoc_insertion_point(field_mutable_list:Management.Interactive.Message.PushClusterUserReq.userAccessRecord)
  return &useraccessrecord_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Management::Interactive::Message::UserAccessRecord >&
PushClusterUserReq::useraccessrecord() const {
  // @@protoc_insertion_point(field_list:Management.Interactive.Message.PushClusterUserReq.userAccessRecord)
  return useraccessrecord_;
}

// -------------------------------------------------------------------

// PushClusterUserRsp

// string strValue = 1;
inline void PushClusterUserRsp::clear_strvalue() {
  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushClusterUserRsp::strvalue() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.PushClusterUserRsp.strValue)
  return strvalue_.GetNoArena();
}
inline void PushClusterUserRsp::set_strvalue(const ::std::string& value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.PushClusterUserRsp.strValue)
}
#if LANG_CXX11
inline void PushClusterUserRsp::set_strvalue(::std::string&& value) {
  
  strvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.PushClusterUserRsp.strValue)
}
#endif
inline void PushClusterUserRsp::set_strvalue(const char* value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.PushClusterUserRsp.strValue)
}
inline void PushClusterUserRsp::set_strvalue(const char* value, size_t size) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.PushClusterUserRsp.strValue)
}
inline ::std::string* PushClusterUserRsp::mutable_strvalue() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.PushClusterUserRsp.strValue)
  return strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushClusterUserRsp::release_strvalue() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.PushClusterUserRsp.strValue)
  
  return strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushClusterUserRsp::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue != NULL) {
    
  } else {
    
  }
  strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvalue);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.PushClusterUserRsp.strValue)
}

// -------------------------------------------------------------------

// Request

// .Management.Interactive.Message.AddClusterReq AddClusterReq_Value = 10;
inline bool Request::has_addclusterreq_value() const {
  return this != internal_default_instance() && addclusterreq_value_ != NULL;
}
inline void Request::clear_addclusterreq_value() {
  if (GetArenaNoVirtual() == NULL && addclusterreq_value_ != NULL) delete addclusterreq_value_;
  addclusterreq_value_ = NULL;
}
inline const ::Management::Interactive::Message::AddClusterReq& Request::addclusterreq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.AddClusterReq_Value)
  return addclusterreq_value_ != NULL ? *addclusterreq_value_
                         : *::Management::Interactive::Message::AddClusterReq::internal_default_instance();
}
inline ::Management::Interactive::Message::AddClusterReq* Request::mutable_addclusterreq_value() {
  
  if (addclusterreq_value_ == NULL) {
    addclusterreq_value_ = new ::Management::Interactive::Message::AddClusterReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.AddClusterReq_Value)
  return addclusterreq_value_;
}
inline ::Management::Interactive::Message::AddClusterReq* Request::release_addclusterreq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.AddClusterReq_Value)
  
  ::Management::Interactive::Message::AddClusterReq* temp = addclusterreq_value_;
  addclusterreq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_addclusterreq_value(::Management::Interactive::Message::AddClusterReq* addclusterreq_value) {
  delete addclusterreq_value_;
  addclusterreq_value_ = addclusterreq_value;
  if (addclusterreq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.AddClusterReq_Value)
}

// .Management.Interactive.Message.DeleteClusterReq DeleteClusterReq_Value = 20;
inline bool Request::has_deleteclusterreq_value() const {
  return this != internal_default_instance() && deleteclusterreq_value_ != NULL;
}
inline void Request::clear_deleteclusterreq_value() {
  if (GetArenaNoVirtual() == NULL && deleteclusterreq_value_ != NULL) delete deleteclusterreq_value_;
  deleteclusterreq_value_ = NULL;
}
inline const ::Management::Interactive::Message::DeleteClusterReq& Request::deleteclusterreq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.DeleteClusterReq_Value)
  return deleteclusterreq_value_ != NULL ? *deleteclusterreq_value_
                         : *::Management::Interactive::Message::DeleteClusterReq::internal_default_instance();
}
inline ::Management::Interactive::Message::DeleteClusterReq* Request::mutable_deleteclusterreq_value() {
  
  if (deleteclusterreq_value_ == NULL) {
    deleteclusterreq_value_ = new ::Management::Interactive::Message::DeleteClusterReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.DeleteClusterReq_Value)
  return deleteclusterreq_value_;
}
inline ::Management::Interactive::Message::DeleteClusterReq* Request::release_deleteclusterreq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.DeleteClusterReq_Value)
  
  ::Management::Interactive::Message::DeleteClusterReq* temp = deleteclusterreq_value_;
  deleteclusterreq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_deleteclusterreq_value(::Management::Interactive::Message::DeleteClusterReq* deleteclusterreq_value) {
  delete deleteclusterreq_value_;
  deleteclusterreq_value_ = deleteclusterreq_value;
  if (deleteclusterreq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.DeleteClusterReq_Value)
}

// .Management.Interactive.Message.ModifyClusterReq ModifyClusterReq_Value = 30;
inline bool Request::has_modifyclusterreq_value() const {
  return this != internal_default_instance() && modifyclusterreq_value_ != NULL;
}
inline void Request::clear_modifyclusterreq_value() {
  if (GetArenaNoVirtual() == NULL && modifyclusterreq_value_ != NULL) delete modifyclusterreq_value_;
  modifyclusterreq_value_ = NULL;
}
inline const ::Management::Interactive::Message::ModifyClusterReq& Request::modifyclusterreq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.ModifyClusterReq_Value)
  return modifyclusterreq_value_ != NULL ? *modifyclusterreq_value_
                         : *::Management::Interactive::Message::ModifyClusterReq::internal_default_instance();
}
inline ::Management::Interactive::Message::ModifyClusterReq* Request::mutable_modifyclusterreq_value() {
  
  if (modifyclusterreq_value_ == NULL) {
    modifyclusterreq_value_ = new ::Management::Interactive::Message::ModifyClusterReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.ModifyClusterReq_Value)
  return modifyclusterreq_value_;
}
inline ::Management::Interactive::Message::ModifyClusterReq* Request::release_modifyclusterreq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.ModifyClusterReq_Value)
  
  ::Management::Interactive::Message::ModifyClusterReq* temp = modifyclusterreq_value_;
  modifyclusterreq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_modifyclusterreq_value(::Management::Interactive::Message::ModifyClusterReq* modifyclusterreq_value) {
  delete modifyclusterreq_value_;
  modifyclusterreq_value_ = modifyclusterreq_value;
  if (modifyclusterreq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.ModifyClusterReq_Value)
}

// .Management.Interactive.Message.QueryClusterInfoReq QueryClusterInfoReq_Value = 40;
inline bool Request::has_queryclusterinforeq_value() const {
  return this != internal_default_instance() && queryclusterinforeq_value_ != NULL;
}
inline void Request::clear_queryclusterinforeq_value() {
  if (GetArenaNoVirtual() == NULL && queryclusterinforeq_value_ != NULL) delete queryclusterinforeq_value_;
  queryclusterinforeq_value_ = NULL;
}
inline const ::Management::Interactive::Message::QueryClusterInfoReq& Request::queryclusterinforeq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.QueryClusterInfoReq_Value)
  return queryclusterinforeq_value_ != NULL ? *queryclusterinforeq_value_
                         : *::Management::Interactive::Message::QueryClusterInfoReq::internal_default_instance();
}
inline ::Management::Interactive::Message::QueryClusterInfoReq* Request::mutable_queryclusterinforeq_value() {
  
  if (queryclusterinforeq_value_ == NULL) {
    queryclusterinforeq_value_ = new ::Management::Interactive::Message::QueryClusterInfoReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.QueryClusterInfoReq_Value)
  return queryclusterinforeq_value_;
}
inline ::Management::Interactive::Message::QueryClusterInfoReq* Request::release_queryclusterinforeq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.QueryClusterInfoReq_Value)
  
  ::Management::Interactive::Message::QueryClusterInfoReq* temp = queryclusterinforeq_value_;
  queryclusterinforeq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_queryclusterinforeq_value(::Management::Interactive::Message::QueryClusterInfoReq* queryclusterinforeq_value) {
  delete queryclusterinforeq_value_;
  queryclusterinforeq_value_ = queryclusterinforeq_value;
  if (queryclusterinforeq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.QueryClusterInfoReq_Value)
}

// .Management.Interactive.Message.ShakehandClusterReq ShakehandClusterReq_Value = 50;
inline bool Request::has_shakehandclusterreq_value() const {
  return this != internal_default_instance() && shakehandclusterreq_value_ != NULL;
}
inline void Request::clear_shakehandclusterreq_value() {
  if (GetArenaNoVirtual() == NULL && shakehandclusterreq_value_ != NULL) delete shakehandclusterreq_value_;
  shakehandclusterreq_value_ = NULL;
}
inline const ::Management::Interactive::Message::ShakehandClusterReq& Request::shakehandclusterreq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.ShakehandClusterReq_Value)
  return shakehandclusterreq_value_ != NULL ? *shakehandclusterreq_value_
                         : *::Management::Interactive::Message::ShakehandClusterReq::internal_default_instance();
}
inline ::Management::Interactive::Message::ShakehandClusterReq* Request::mutable_shakehandclusterreq_value() {
  
  if (shakehandclusterreq_value_ == NULL) {
    shakehandclusterreq_value_ = new ::Management::Interactive::Message::ShakehandClusterReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.ShakehandClusterReq_Value)
  return shakehandclusterreq_value_;
}
inline ::Management::Interactive::Message::ShakehandClusterReq* Request::release_shakehandclusterreq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.ShakehandClusterReq_Value)
  
  ::Management::Interactive::Message::ShakehandClusterReq* temp = shakehandclusterreq_value_;
  shakehandclusterreq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_shakehandclusterreq_value(::Management::Interactive::Message::ShakehandClusterReq* shakehandclusterreq_value) {
  delete shakehandclusterreq_value_;
  shakehandclusterreq_value_ = shakehandclusterreq_value;
  if (shakehandclusterreq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.ShakehandClusterReq_Value)
}

// .Management.Interactive.Message.QueryAllClusterReq QueryAllClusterReq_Value = 60;
inline bool Request::has_queryallclusterreq_value() const {
  return this != internal_default_instance() && queryallclusterreq_value_ != NULL;
}
inline void Request::clear_queryallclusterreq_value() {
  if (GetArenaNoVirtual() == NULL && queryallclusterreq_value_ != NULL) delete queryallclusterreq_value_;
  queryallclusterreq_value_ = NULL;
}
inline const ::Management::Interactive::Message::QueryAllClusterReq& Request::queryallclusterreq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.QueryAllClusterReq_Value)
  return queryallclusterreq_value_ != NULL ? *queryallclusterreq_value_
                         : *::Management::Interactive::Message::QueryAllClusterReq::internal_default_instance();
}
inline ::Management::Interactive::Message::QueryAllClusterReq* Request::mutable_queryallclusterreq_value() {
  
  if (queryallclusterreq_value_ == NULL) {
    queryallclusterreq_value_ = new ::Management::Interactive::Message::QueryAllClusterReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.QueryAllClusterReq_Value)
  return queryallclusterreq_value_;
}
inline ::Management::Interactive::Message::QueryAllClusterReq* Request::release_queryallclusterreq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.QueryAllClusterReq_Value)
  
  ::Management::Interactive::Message::QueryAllClusterReq* temp = queryallclusterreq_value_;
  queryallclusterreq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_queryallclusterreq_value(::Management::Interactive::Message::QueryAllClusterReq* queryallclusterreq_value) {
  delete queryallclusterreq_value_;
  queryallclusterreq_value_ = queryallclusterreq_value;
  if (queryallclusterreq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.QueryAllClusterReq_Value)
}

// .Management.Interactive.Message.QueryClusterDeviceReq QueryClusterDeviceReq_Value = 70;
inline bool Request::has_queryclusterdevicereq_value() const {
  return this != internal_default_instance() && queryclusterdevicereq_value_ != NULL;
}
inline void Request::clear_queryclusterdevicereq_value() {
  if (GetArenaNoVirtual() == NULL && queryclusterdevicereq_value_ != NULL) delete queryclusterdevicereq_value_;
  queryclusterdevicereq_value_ = NULL;
}
inline const ::Management::Interactive::Message::QueryClusterDeviceReq& Request::queryclusterdevicereq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.QueryClusterDeviceReq_Value)
  return queryclusterdevicereq_value_ != NULL ? *queryclusterdevicereq_value_
                         : *::Management::Interactive::Message::QueryClusterDeviceReq::internal_default_instance();
}
inline ::Management::Interactive::Message::QueryClusterDeviceReq* Request::mutable_queryclusterdevicereq_value() {
  
  if (queryclusterdevicereq_value_ == NULL) {
    queryclusterdevicereq_value_ = new ::Management::Interactive::Message::QueryClusterDeviceReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.QueryClusterDeviceReq_Value)
  return queryclusterdevicereq_value_;
}
inline ::Management::Interactive::Message::QueryClusterDeviceReq* Request::release_queryclusterdevicereq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.QueryClusterDeviceReq_Value)
  
  ::Management::Interactive::Message::QueryClusterDeviceReq* temp = queryclusterdevicereq_value_;
  queryclusterdevicereq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_queryclusterdevicereq_value(::Management::Interactive::Message::QueryClusterDeviceReq* queryclusterdevicereq_value) {
  delete queryclusterdevicereq_value_;
  queryclusterdevicereq_value_ = queryclusterdevicereq_value;
  if (queryclusterdevicereq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.QueryClusterDeviceReq_Value)
}

// .Management.Interactive.Message.QueryClusterUserReq QueryClusterUserReq_Value = 80;
inline bool Request::has_queryclusteruserreq_value() const {
  return this != internal_default_instance() && queryclusteruserreq_value_ != NULL;
}
inline void Request::clear_queryclusteruserreq_value() {
  if (GetArenaNoVirtual() == NULL && queryclusteruserreq_value_ != NULL) delete queryclusteruserreq_value_;
  queryclusteruserreq_value_ = NULL;
}
inline const ::Management::Interactive::Message::QueryClusterUserReq& Request::queryclusteruserreq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.QueryClusterUserReq_Value)
  return queryclusteruserreq_value_ != NULL ? *queryclusteruserreq_value_
                         : *::Management::Interactive::Message::QueryClusterUserReq::internal_default_instance();
}
inline ::Management::Interactive::Message::QueryClusterUserReq* Request::mutable_queryclusteruserreq_value() {
  
  if (queryclusteruserreq_value_ == NULL) {
    queryclusteruserreq_value_ = new ::Management::Interactive::Message::QueryClusterUserReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.QueryClusterUserReq_Value)
  return queryclusteruserreq_value_;
}
inline ::Management::Interactive::Message::QueryClusterUserReq* Request::release_queryclusteruserreq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.QueryClusterUserReq_Value)
  
  ::Management::Interactive::Message::QueryClusterUserReq* temp = queryclusteruserreq_value_;
  queryclusteruserreq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_queryclusteruserreq_value(::Management::Interactive::Message::QueryClusterUserReq* queryclusteruserreq_value) {
  delete queryclusteruserreq_value_;
  queryclusteruserreq_value_ = queryclusteruserreq_value;
  if (queryclusteruserreq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.QueryClusterUserReq_Value)
}

// .Management.Interactive.Message.PushClusterDeviceReq PushClusterDeviceReq_Value = 270;
inline bool Request::has_pushclusterdevicereq_value() const {
  return this != internal_default_instance() && pushclusterdevicereq_value_ != NULL;
}
inline void Request::clear_pushclusterdevicereq_value() {
  if (GetArenaNoVirtual() == NULL && pushclusterdevicereq_value_ != NULL) delete pushclusterdevicereq_value_;
  pushclusterdevicereq_value_ = NULL;
}
inline const ::Management::Interactive::Message::PushClusterDeviceReq& Request::pushclusterdevicereq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.PushClusterDeviceReq_Value)
  return pushclusterdevicereq_value_ != NULL ? *pushclusterdevicereq_value_
                         : *::Management::Interactive::Message::PushClusterDeviceReq::internal_default_instance();
}
inline ::Management::Interactive::Message::PushClusterDeviceReq* Request::mutable_pushclusterdevicereq_value() {
  
  if (pushclusterdevicereq_value_ == NULL) {
    pushclusterdevicereq_value_ = new ::Management::Interactive::Message::PushClusterDeviceReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.PushClusterDeviceReq_Value)
  return pushclusterdevicereq_value_;
}
inline ::Management::Interactive::Message::PushClusterDeviceReq* Request::release_pushclusterdevicereq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.PushClusterDeviceReq_Value)
  
  ::Management::Interactive::Message::PushClusterDeviceReq* temp = pushclusterdevicereq_value_;
  pushclusterdevicereq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_pushclusterdevicereq_value(::Management::Interactive::Message::PushClusterDeviceReq* pushclusterdevicereq_value) {
  delete pushclusterdevicereq_value_;
  pushclusterdevicereq_value_ = pushclusterdevicereq_value;
  if (pushclusterdevicereq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.PushClusterDeviceReq_Value)
}

// .Management.Interactive.Message.PushClusterUserReq PushClusterUserReq_Value = 280;
inline bool Request::has_pushclusteruserreq_value() const {
  return this != internal_default_instance() && pushclusteruserreq_value_ != NULL;
}
inline void Request::clear_pushclusteruserreq_value() {
  if (GetArenaNoVirtual() == NULL && pushclusteruserreq_value_ != NULL) delete pushclusteruserreq_value_;
  pushclusteruserreq_value_ = NULL;
}
inline const ::Management::Interactive::Message::PushClusterUserReq& Request::pushclusteruserreq_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Request.PushClusterUserReq_Value)
  return pushclusteruserreq_value_ != NULL ? *pushclusteruserreq_value_
                         : *::Management::Interactive::Message::PushClusterUserReq::internal_default_instance();
}
inline ::Management::Interactive::Message::PushClusterUserReq* Request::mutable_pushclusteruserreq_value() {
  
  if (pushclusteruserreq_value_ == NULL) {
    pushclusteruserreq_value_ = new ::Management::Interactive::Message::PushClusterUserReq;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Request.PushClusterUserReq_Value)
  return pushclusteruserreq_value_;
}
inline ::Management::Interactive::Message::PushClusterUserReq* Request::release_pushclusteruserreq_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Request.PushClusterUserReq_Value)
  
  ::Management::Interactive::Message::PushClusterUserReq* temp = pushclusteruserreq_value_;
  pushclusteruserreq_value_ = NULL;
  return temp;
}
inline void Request::set_allocated_pushclusteruserreq_value(::Management::Interactive::Message::PushClusterUserReq* pushclusteruserreq_value) {
  delete pushclusteruserreq_value_;
  pushclusteruserreq_value_ = pushclusteruserreq_value;
  if (pushclusteruserreq_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Request.PushClusterUserReq_Value)
}

// -------------------------------------------------------------------

// Response

// int32 iRetcode = 10;
inline void Response::clear_iretcode() {
  iretcode_ = 0;
}
inline ::google::protobuf::int32 Response::iretcode() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.iRetcode)
  return iretcode_;
}
inline void Response::set_iretcode(::google::protobuf::int32 value) {
  
  iretcode_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Response.iRetcode)
}

// string strRetMsg = 20;
inline void Response::clear_strretmsg() {
  strretmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::strretmsg() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.strRetMsg)
  return strretmsg_.GetNoArena();
}
inline void Response::set_strretmsg(const ::std::string& value) {
  
  strretmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.Response.strRetMsg)
}
#if LANG_CXX11
inline void Response::set_strretmsg(::std::string&& value) {
  
  strretmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.Response.strRetMsg)
}
#endif
inline void Response::set_strretmsg(const char* value) {
  
  strretmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.Response.strRetMsg)
}
inline void Response::set_strretmsg(const char* value, size_t size) {
  
  strretmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.Response.strRetMsg)
}
inline ::std::string* Response::mutable_strretmsg() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.strRetMsg)
  return strretmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_strretmsg() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.strRetMsg)
  
  return strretmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_strretmsg(::std::string* strretmsg) {
  if (strretmsg != NULL) {
    
  } else {
    
  }
  strretmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strretmsg);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.strRetMsg)
}

// .Management.Interactive.Message.AddClusterRsp AddClusterRsp_Value = 30;
inline bool Response::has_addclusterrsp_value() const {
  return this != internal_default_instance() && addclusterrsp_value_ != NULL;
}
inline void Response::clear_addclusterrsp_value() {
  if (GetArenaNoVirtual() == NULL && addclusterrsp_value_ != NULL) delete addclusterrsp_value_;
  addclusterrsp_value_ = NULL;
}
inline const ::Management::Interactive::Message::AddClusterRsp& Response::addclusterrsp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.AddClusterRsp_Value)
  return addclusterrsp_value_ != NULL ? *addclusterrsp_value_
                         : *::Management::Interactive::Message::AddClusterRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::AddClusterRsp* Response::mutable_addclusterrsp_value() {
  
  if (addclusterrsp_value_ == NULL) {
    addclusterrsp_value_ = new ::Management::Interactive::Message::AddClusterRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.AddClusterRsp_Value)
  return addclusterrsp_value_;
}
inline ::Management::Interactive::Message::AddClusterRsp* Response::release_addclusterrsp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.AddClusterRsp_Value)
  
  ::Management::Interactive::Message::AddClusterRsp* temp = addclusterrsp_value_;
  addclusterrsp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_addclusterrsp_value(::Management::Interactive::Message::AddClusterRsp* addclusterrsp_value) {
  delete addclusterrsp_value_;
  addclusterrsp_value_ = addclusterrsp_value;
  if (addclusterrsp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.AddClusterRsp_Value)
}

// .Management.Interactive.Message.DeleteClusterRsp DeleteClusterRsp_Value = 40;
inline bool Response::has_deleteclusterrsp_value() const {
  return this != internal_default_instance() && deleteclusterrsp_value_ != NULL;
}
inline void Response::clear_deleteclusterrsp_value() {
  if (GetArenaNoVirtual() == NULL && deleteclusterrsp_value_ != NULL) delete deleteclusterrsp_value_;
  deleteclusterrsp_value_ = NULL;
}
inline const ::Management::Interactive::Message::DeleteClusterRsp& Response::deleteclusterrsp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.DeleteClusterRsp_Value)
  return deleteclusterrsp_value_ != NULL ? *deleteclusterrsp_value_
                         : *::Management::Interactive::Message::DeleteClusterRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::DeleteClusterRsp* Response::mutable_deleteclusterrsp_value() {
  
  if (deleteclusterrsp_value_ == NULL) {
    deleteclusterrsp_value_ = new ::Management::Interactive::Message::DeleteClusterRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.DeleteClusterRsp_Value)
  return deleteclusterrsp_value_;
}
inline ::Management::Interactive::Message::DeleteClusterRsp* Response::release_deleteclusterrsp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.DeleteClusterRsp_Value)
  
  ::Management::Interactive::Message::DeleteClusterRsp* temp = deleteclusterrsp_value_;
  deleteclusterrsp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_deleteclusterrsp_value(::Management::Interactive::Message::DeleteClusterRsp* deleteclusterrsp_value) {
  delete deleteclusterrsp_value_;
  deleteclusterrsp_value_ = deleteclusterrsp_value;
  if (deleteclusterrsp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.DeleteClusterRsp_Value)
}

// .Management.Interactive.Message.ModifyClusterRsp ModifyClusterRsp_Value = 50;
inline bool Response::has_modifyclusterrsp_value() const {
  return this != internal_default_instance() && modifyclusterrsp_value_ != NULL;
}
inline void Response::clear_modifyclusterrsp_value() {
  if (GetArenaNoVirtual() == NULL && modifyclusterrsp_value_ != NULL) delete modifyclusterrsp_value_;
  modifyclusterrsp_value_ = NULL;
}
inline const ::Management::Interactive::Message::ModifyClusterRsp& Response::modifyclusterrsp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.ModifyClusterRsp_Value)
  return modifyclusterrsp_value_ != NULL ? *modifyclusterrsp_value_
                         : *::Management::Interactive::Message::ModifyClusterRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::ModifyClusterRsp* Response::mutable_modifyclusterrsp_value() {
  
  if (modifyclusterrsp_value_ == NULL) {
    modifyclusterrsp_value_ = new ::Management::Interactive::Message::ModifyClusterRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.ModifyClusterRsp_Value)
  return modifyclusterrsp_value_;
}
inline ::Management::Interactive::Message::ModifyClusterRsp* Response::release_modifyclusterrsp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.ModifyClusterRsp_Value)
  
  ::Management::Interactive::Message::ModifyClusterRsp* temp = modifyclusterrsp_value_;
  modifyclusterrsp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_modifyclusterrsp_value(::Management::Interactive::Message::ModifyClusterRsp* modifyclusterrsp_value) {
  delete modifyclusterrsp_value_;
  modifyclusterrsp_value_ = modifyclusterrsp_value;
  if (modifyclusterrsp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.ModifyClusterRsp_Value)
}

// .Management.Interactive.Message.QueryClusterInfoRsp QueryClusterInfoRsp_Value = 60;
inline bool Response::has_queryclusterinforsp_value() const {
  return this != internal_default_instance() && queryclusterinforsp_value_ != NULL;
}
inline void Response::clear_queryclusterinforsp_value() {
  if (GetArenaNoVirtual() == NULL && queryclusterinforsp_value_ != NULL) delete queryclusterinforsp_value_;
  queryclusterinforsp_value_ = NULL;
}
inline const ::Management::Interactive::Message::QueryClusterInfoRsp& Response::queryclusterinforsp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.QueryClusterInfoRsp_Value)
  return queryclusterinforsp_value_ != NULL ? *queryclusterinforsp_value_
                         : *::Management::Interactive::Message::QueryClusterInfoRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::QueryClusterInfoRsp* Response::mutable_queryclusterinforsp_value() {
  
  if (queryclusterinforsp_value_ == NULL) {
    queryclusterinforsp_value_ = new ::Management::Interactive::Message::QueryClusterInfoRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.QueryClusterInfoRsp_Value)
  return queryclusterinforsp_value_;
}
inline ::Management::Interactive::Message::QueryClusterInfoRsp* Response::release_queryclusterinforsp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.QueryClusterInfoRsp_Value)
  
  ::Management::Interactive::Message::QueryClusterInfoRsp* temp = queryclusterinforsp_value_;
  queryclusterinforsp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_queryclusterinforsp_value(::Management::Interactive::Message::QueryClusterInfoRsp* queryclusterinforsp_value) {
  delete queryclusterinforsp_value_;
  queryclusterinforsp_value_ = queryclusterinforsp_value;
  if (queryclusterinforsp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.QueryClusterInfoRsp_Value)
}

// .Management.Interactive.Message.ShakehandClusterRsp ShakehandClusterRsp_Value = 70;
inline bool Response::has_shakehandclusterrsp_value() const {
  return this != internal_default_instance() && shakehandclusterrsp_value_ != NULL;
}
inline void Response::clear_shakehandclusterrsp_value() {
  if (GetArenaNoVirtual() == NULL && shakehandclusterrsp_value_ != NULL) delete shakehandclusterrsp_value_;
  shakehandclusterrsp_value_ = NULL;
}
inline const ::Management::Interactive::Message::ShakehandClusterRsp& Response::shakehandclusterrsp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.ShakehandClusterRsp_Value)
  return shakehandclusterrsp_value_ != NULL ? *shakehandclusterrsp_value_
                         : *::Management::Interactive::Message::ShakehandClusterRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::ShakehandClusterRsp* Response::mutable_shakehandclusterrsp_value() {
  
  if (shakehandclusterrsp_value_ == NULL) {
    shakehandclusterrsp_value_ = new ::Management::Interactive::Message::ShakehandClusterRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.ShakehandClusterRsp_Value)
  return shakehandclusterrsp_value_;
}
inline ::Management::Interactive::Message::ShakehandClusterRsp* Response::release_shakehandclusterrsp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.ShakehandClusterRsp_Value)
  
  ::Management::Interactive::Message::ShakehandClusterRsp* temp = shakehandclusterrsp_value_;
  shakehandclusterrsp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_shakehandclusterrsp_value(::Management::Interactive::Message::ShakehandClusterRsp* shakehandclusterrsp_value) {
  delete shakehandclusterrsp_value_;
  shakehandclusterrsp_value_ = shakehandclusterrsp_value;
  if (shakehandclusterrsp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.ShakehandClusterRsp_Value)
}

// .Management.Interactive.Message.QueryAllClusterRsp QueryAllClusterRsp_Value = 80;
inline bool Response::has_queryallclusterrsp_value() const {
  return this != internal_default_instance() && queryallclusterrsp_value_ != NULL;
}
inline void Response::clear_queryallclusterrsp_value() {
  if (GetArenaNoVirtual() == NULL && queryallclusterrsp_value_ != NULL) delete queryallclusterrsp_value_;
  queryallclusterrsp_value_ = NULL;
}
inline const ::Management::Interactive::Message::QueryAllClusterRsp& Response::queryallclusterrsp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.QueryAllClusterRsp_Value)
  return queryallclusterrsp_value_ != NULL ? *queryallclusterrsp_value_
                         : *::Management::Interactive::Message::QueryAllClusterRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::QueryAllClusterRsp* Response::mutable_queryallclusterrsp_value() {
  
  if (queryallclusterrsp_value_ == NULL) {
    queryallclusterrsp_value_ = new ::Management::Interactive::Message::QueryAllClusterRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.QueryAllClusterRsp_Value)
  return queryallclusterrsp_value_;
}
inline ::Management::Interactive::Message::QueryAllClusterRsp* Response::release_queryallclusterrsp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.QueryAllClusterRsp_Value)
  
  ::Management::Interactive::Message::QueryAllClusterRsp* temp = queryallclusterrsp_value_;
  queryallclusterrsp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_queryallclusterrsp_value(::Management::Interactive::Message::QueryAllClusterRsp* queryallclusterrsp_value) {
  delete queryallclusterrsp_value_;
  queryallclusterrsp_value_ = queryallclusterrsp_value;
  if (queryallclusterrsp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.QueryAllClusterRsp_Value)
}

// .Management.Interactive.Message.QueryClusterDeviceRsp QueryClusterDeviceRsp_Value = 90;
inline bool Response::has_queryclusterdevicersp_value() const {
  return this != internal_default_instance() && queryclusterdevicersp_value_ != NULL;
}
inline void Response::clear_queryclusterdevicersp_value() {
  if (GetArenaNoVirtual() == NULL && queryclusterdevicersp_value_ != NULL) delete queryclusterdevicersp_value_;
  queryclusterdevicersp_value_ = NULL;
}
inline const ::Management::Interactive::Message::QueryClusterDeviceRsp& Response::queryclusterdevicersp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.QueryClusterDeviceRsp_Value)
  return queryclusterdevicersp_value_ != NULL ? *queryclusterdevicersp_value_
                         : *::Management::Interactive::Message::QueryClusterDeviceRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::QueryClusterDeviceRsp* Response::mutable_queryclusterdevicersp_value() {
  
  if (queryclusterdevicersp_value_ == NULL) {
    queryclusterdevicersp_value_ = new ::Management::Interactive::Message::QueryClusterDeviceRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.QueryClusterDeviceRsp_Value)
  return queryclusterdevicersp_value_;
}
inline ::Management::Interactive::Message::QueryClusterDeviceRsp* Response::release_queryclusterdevicersp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.QueryClusterDeviceRsp_Value)
  
  ::Management::Interactive::Message::QueryClusterDeviceRsp* temp = queryclusterdevicersp_value_;
  queryclusterdevicersp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_queryclusterdevicersp_value(::Management::Interactive::Message::QueryClusterDeviceRsp* queryclusterdevicersp_value) {
  delete queryclusterdevicersp_value_;
  queryclusterdevicersp_value_ = queryclusterdevicersp_value;
  if (queryclusterdevicersp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.QueryClusterDeviceRsp_Value)
}

// .Management.Interactive.Message.QueryClusterUserRsp QueryClusterUserRsp_Value = 100;
inline bool Response::has_queryclusteruserrsp_value() const {
  return this != internal_default_instance() && queryclusteruserrsp_value_ != NULL;
}
inline void Response::clear_queryclusteruserrsp_value() {
  if (GetArenaNoVirtual() == NULL && queryclusteruserrsp_value_ != NULL) delete queryclusteruserrsp_value_;
  queryclusteruserrsp_value_ = NULL;
}
inline const ::Management::Interactive::Message::QueryClusterUserRsp& Response::queryclusteruserrsp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.QueryClusterUserRsp_Value)
  return queryclusteruserrsp_value_ != NULL ? *queryclusteruserrsp_value_
                         : *::Management::Interactive::Message::QueryClusterUserRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::QueryClusterUserRsp* Response::mutable_queryclusteruserrsp_value() {
  
  if (queryclusteruserrsp_value_ == NULL) {
    queryclusteruserrsp_value_ = new ::Management::Interactive::Message::QueryClusterUserRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.QueryClusterUserRsp_Value)
  return queryclusteruserrsp_value_;
}
inline ::Management::Interactive::Message::QueryClusterUserRsp* Response::release_queryclusteruserrsp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.QueryClusterUserRsp_Value)
  
  ::Management::Interactive::Message::QueryClusterUserRsp* temp = queryclusteruserrsp_value_;
  queryclusteruserrsp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_queryclusteruserrsp_value(::Management::Interactive::Message::QueryClusterUserRsp* queryclusteruserrsp_value) {
  delete queryclusteruserrsp_value_;
  queryclusteruserrsp_value_ = queryclusteruserrsp_value;
  if (queryclusteruserrsp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.QueryClusterUserRsp_Value)
}

// .Management.Interactive.Message.PushClusterDeviceRsp PushClusterDeviceRsp_Value = 290;
inline bool Response::has_pushclusterdevicersp_value() const {
  return this != internal_default_instance() && pushclusterdevicersp_value_ != NULL;
}
inline void Response::clear_pushclusterdevicersp_value() {
  if (GetArenaNoVirtual() == NULL && pushclusterdevicersp_value_ != NULL) delete pushclusterdevicersp_value_;
  pushclusterdevicersp_value_ = NULL;
}
inline const ::Management::Interactive::Message::PushClusterDeviceRsp& Response::pushclusterdevicersp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.PushClusterDeviceRsp_Value)
  return pushclusterdevicersp_value_ != NULL ? *pushclusterdevicersp_value_
                         : *::Management::Interactive::Message::PushClusterDeviceRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::PushClusterDeviceRsp* Response::mutable_pushclusterdevicersp_value() {
  
  if (pushclusterdevicersp_value_ == NULL) {
    pushclusterdevicersp_value_ = new ::Management::Interactive::Message::PushClusterDeviceRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.PushClusterDeviceRsp_Value)
  return pushclusterdevicersp_value_;
}
inline ::Management::Interactive::Message::PushClusterDeviceRsp* Response::release_pushclusterdevicersp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.PushClusterDeviceRsp_Value)
  
  ::Management::Interactive::Message::PushClusterDeviceRsp* temp = pushclusterdevicersp_value_;
  pushclusterdevicersp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_pushclusterdevicersp_value(::Management::Interactive::Message::PushClusterDeviceRsp* pushclusterdevicersp_value) {
  delete pushclusterdevicersp_value_;
  pushclusterdevicersp_value_ = pushclusterdevicersp_value;
  if (pushclusterdevicersp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.PushClusterDeviceRsp_Value)
}

// .Management.Interactive.Message.PushClusterUserRsp PushClusterUserRsp_Value = 300;
inline bool Response::has_pushclusteruserrsp_value() const {
  return this != internal_default_instance() && pushclusteruserrsp_value_ != NULL;
}
inline void Response::clear_pushclusteruserrsp_value() {
  if (GetArenaNoVirtual() == NULL && pushclusteruserrsp_value_ != NULL) delete pushclusteruserrsp_value_;
  pushclusteruserrsp_value_ = NULL;
}
inline const ::Management::Interactive::Message::PushClusterUserRsp& Response::pushclusteruserrsp_value() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.Response.PushClusterUserRsp_Value)
  return pushclusteruserrsp_value_ != NULL ? *pushclusteruserrsp_value_
                         : *::Management::Interactive::Message::PushClusterUserRsp::internal_default_instance();
}
inline ::Management::Interactive::Message::PushClusterUserRsp* Response::mutable_pushclusteruserrsp_value() {
  
  if (pushclusteruserrsp_value_ == NULL) {
    pushclusteruserrsp_value_ = new ::Management::Interactive::Message::PushClusterUserRsp;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.Response.PushClusterUserRsp_Value)
  return pushclusteruserrsp_value_;
}
inline ::Management::Interactive::Message::PushClusterUserRsp* Response::release_pushclusteruserrsp_value() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.Response.PushClusterUserRsp_Value)
  
  ::Management::Interactive::Message::PushClusterUserRsp* temp = pushclusteruserrsp_value_;
  pushclusteruserrsp_value_ = NULL;
  return temp;
}
inline void Response::set_allocated_pushclusteruserrsp_value(::Management::Interactive::Message::PushClusterUserRsp* pushclusteruserrsp_value) {
  delete pushclusteruserrsp_value_;
  pushclusteruserrsp_value_ = pushclusteruserrsp_value;
  if (pushclusteruserrsp_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.Response.PushClusterUserRsp_Value)
}

// -------------------------------------------------------------------

// ManagementInteractiveMessage

// .Management.Interactive.Message.ManagementMsgType type = 1;
inline void ManagementInteractiveMessage::clear_type() {
  type_ = 0;
}
inline ::Management::Interactive::Message::ManagementMsgType ManagementInteractiveMessage::type() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ManagementInteractiveMessage.type)
  return static_cast< ::Management::Interactive::Message::ManagementMsgType >(type_);
}
inline void ManagementInteractiveMessage::set_type(::Management::Interactive::Message::ManagementMsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.ManagementInteractiveMessage.type)
}

// uint64 uiMsgSeq = 2;
inline void ManagementInteractiveMessage::clear_uimsgseq() {
  uimsgseq_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ManagementInteractiveMessage::uimsgseq() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ManagementInteractiveMessage.uiMsgSeq)
  return uimsgseq_;
}
inline void ManagementInteractiveMessage::set_uimsgseq(::google::protobuf::uint64 value) {
  
  uimsgseq_ = value;
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.ManagementInteractiveMessage.uiMsgSeq)
}

// string strSID = 3;
inline void ManagementInteractiveMessage::clear_strsid() {
  strsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagementInteractiveMessage::strsid() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ManagementInteractiveMessage.strSID)
  return strsid_.GetNoArena();
}
inline void ManagementInteractiveMessage::set_strsid(const ::std::string& value) {
  
  strsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Management.Interactive.Message.ManagementInteractiveMessage.strSID)
}
#if LANG_CXX11
inline void ManagementInteractiveMessage::set_strsid(::std::string&& value) {
  
  strsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Management.Interactive.Message.ManagementInteractiveMessage.strSID)
}
#endif
inline void ManagementInteractiveMessage::set_strsid(const char* value) {
  
  strsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Management.Interactive.Message.ManagementInteractiveMessage.strSID)
}
inline void ManagementInteractiveMessage::set_strsid(const char* value, size_t size) {
  
  strsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Management.Interactive.Message.ManagementInteractiveMessage.strSID)
}
inline ::std::string* ManagementInteractiveMessage::mutable_strsid() {
  
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.ManagementInteractiveMessage.strSID)
  return strsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagementInteractiveMessage::release_strsid() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.ManagementInteractiveMessage.strSID)
  
  return strsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagementInteractiveMessage::set_allocated_strsid(::std::string* strsid) {
  if (strsid != NULL) {
    
  } else {
    
  }
  strsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strsid);
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.ManagementInteractiveMessage.strSID)
}

// .Management.Interactive.Message.Request reqValue = 4;
inline bool ManagementInteractiveMessage::has_reqvalue() const {
  return this != internal_default_instance() && reqvalue_ != NULL;
}
inline void ManagementInteractiveMessage::clear_reqvalue() {
  if (GetArenaNoVirtual() == NULL && reqvalue_ != NULL) delete reqvalue_;
  reqvalue_ = NULL;
}
inline const ::Management::Interactive::Message::Request& ManagementInteractiveMessage::reqvalue() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ManagementInteractiveMessage.reqValue)
  return reqvalue_ != NULL ? *reqvalue_
                         : *::Management::Interactive::Message::Request::internal_default_instance();
}
inline ::Management::Interactive::Message::Request* ManagementInteractiveMessage::mutable_reqvalue() {
  
  if (reqvalue_ == NULL) {
    reqvalue_ = new ::Management::Interactive::Message::Request;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.ManagementInteractiveMessage.reqValue)
  return reqvalue_;
}
inline ::Management::Interactive::Message::Request* ManagementInteractiveMessage::release_reqvalue() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.ManagementInteractiveMessage.reqValue)
  
  ::Management::Interactive::Message::Request* temp = reqvalue_;
  reqvalue_ = NULL;
  return temp;
}
inline void ManagementInteractiveMessage::set_allocated_reqvalue(::Management::Interactive::Message::Request* reqvalue) {
  delete reqvalue_;
  reqvalue_ = reqvalue;
  if (reqvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.ManagementInteractiveMessage.reqValue)
}

// .Management.Interactive.Message.Response rspValue = 5;
inline bool ManagementInteractiveMessage::has_rspvalue() const {
  return this != internal_default_instance() && rspvalue_ != NULL;
}
inline void ManagementInteractiveMessage::clear_rspvalue() {
  if (GetArenaNoVirtual() == NULL && rspvalue_ != NULL) delete rspvalue_;
  rspvalue_ = NULL;
}
inline const ::Management::Interactive::Message::Response& ManagementInteractiveMessage::rspvalue() const {
  // @@protoc_insertion_point(field_get:Management.Interactive.Message.ManagementInteractiveMessage.rspValue)
  return rspvalue_ != NULL ? *rspvalue_
                         : *::Management::Interactive::Message::Response::internal_default_instance();
}
inline ::Management::Interactive::Message::Response* ManagementInteractiveMessage::mutable_rspvalue() {
  
  if (rspvalue_ == NULL) {
    rspvalue_ = new ::Management::Interactive::Message::Response;
  }
  // @@protoc_insertion_point(field_mutable:Management.Interactive.Message.ManagementInteractiveMessage.rspValue)
  return rspvalue_;
}
inline ::Management::Interactive::Message::Response* ManagementInteractiveMessage::release_rspvalue() {
  // @@protoc_insertion_point(field_release:Management.Interactive.Message.ManagementInteractiveMessage.rspValue)
  
  ::Management::Interactive::Message::Response* temp = rspvalue_;
  rspvalue_ = NULL;
  return temp;
}
inline void ManagementInteractiveMessage::set_allocated_rspvalue(::Management::Interactive::Message::Response* rspvalue) {
  delete rspvalue_;
  rspvalue_ = rspvalue;
  if (rspvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Management.Interactive.Message.ManagementInteractiveMessage.rspValue)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Message
}  // namespace Interactive
}  // namespace Management

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Management::Interactive::Message::ManagementMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Management::Interactive::Message::ManagementMsgType>() {
  return ::Management::Interactive::Message::ManagementMsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_InteractiveProtocolManagement_2eproto__INCLUDED
