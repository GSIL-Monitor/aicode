/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ProductService_H
#define ProductService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Product_types.h"

namespace Product { namespace Service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ProductServiceIf {
 public:
  virtual ~ProductServiceIf() {}
  virtual void AddProduct(AddProductRT& _return, const std::string& strSid, const std::string& strUserID, const ProductInfo& pdt) = 0;
  virtual void RemoveProduct(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID) = 0;
  virtual void ModifyProduct(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductInfo& pdt) = 0;
  virtual void QueryProduct(QueryProductRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID) = 0;
  virtual void QueryAllProduct(QueryAllProductRT& _return, const std::string& strSid, const std::string& strUserID) = 0;
  virtual void AddProductProperty(AddProductPropertyRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductProperty& pdtppt) = 0;
  virtual void RemoveProductProperty(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const std::string& strPdtpptID) = 0;
};

class ProductServiceIfFactory {
 public:
  typedef ProductServiceIf Handler;

  virtual ~ProductServiceIfFactory() {}

  virtual ProductServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ProductServiceIf* /* handler */) = 0;
};

class ProductServiceIfSingletonFactory : virtual public ProductServiceIfFactory {
 public:
  ProductServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ProductServiceIf>& iface) : iface_(iface) {}
  virtual ~ProductServiceIfSingletonFactory() {}

  virtual ProductServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ProductServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ProductServiceIf> iface_;
};

class ProductServiceNull : virtual public ProductServiceIf {
 public:
  virtual ~ProductServiceNull() {}
  void AddProduct(AddProductRT& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const ProductInfo& /* pdt */) {
    return;
  }
  void RemoveProduct(ProductRTInfo& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const std::string& /* strPdtID */) {
    return;
  }
  void ModifyProduct(ProductRTInfo& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const std::string& /* strPdtID */, const ProductInfo& /* pdt */) {
    return;
  }
  void QueryProduct(QueryProductRT& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const std::string& /* strPdtID */) {
    return;
  }
  void QueryAllProduct(QueryAllProductRT& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */) {
    return;
  }
  void AddProductProperty(AddProductPropertyRT& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const std::string& /* strPdtID */, const ProductProperty& /* pdtppt */) {
    return;
  }
  void RemoveProductProperty(ProductRTInfo& /* _return */, const std::string& /* strSid */, const std::string& /* strUserID */, const std::string& /* strPdtID */, const std::string& /* strPdtpptID */) {
    return;
  }
};

typedef struct _ProductService_AddProduct_args__isset {
  _ProductService_AddProduct_args__isset() : strSid(false), strUserID(false), pdt(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool pdt :1;
} _ProductService_AddProduct_args__isset;

class ProductService_AddProduct_args {
 public:

  ProductService_AddProduct_args(const ProductService_AddProduct_args&);
  ProductService_AddProduct_args& operator=(const ProductService_AddProduct_args&);
  ProductService_AddProduct_args() : strSid(), strUserID() {
  }

  virtual ~ProductService_AddProduct_args() throw();
  std::string strSid;
  std::string strUserID;
  ProductInfo pdt;

  _ProductService_AddProduct_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_pdt(const ProductInfo& val);

  bool operator == (const ProductService_AddProduct_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(pdt == rhs.pdt))
      return false;
    return true;
  }
  bool operator != (const ProductService_AddProduct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_AddProduct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProductService_AddProduct_pargs {
 public:


  virtual ~ProductService_AddProduct_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const ProductInfo* pdt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_AddProduct_result__isset {
  _ProductService_AddProduct_result__isset() : success(false) {}
  bool success :1;
} _ProductService_AddProduct_result__isset;

class ProductService_AddProduct_result {
 public:

  ProductService_AddProduct_result(const ProductService_AddProduct_result&);
  ProductService_AddProduct_result& operator=(const ProductService_AddProduct_result&);
  ProductService_AddProduct_result() {
  }

  virtual ~ProductService_AddProduct_result() throw();
  AddProductRT success;

  _ProductService_AddProduct_result__isset __isset;

  void __set_success(const AddProductRT& val);

  bool operator == (const ProductService_AddProduct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProductService_AddProduct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_AddProduct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_AddProduct_presult__isset {
  _ProductService_AddProduct_presult__isset() : success(false) {}
  bool success :1;
} _ProductService_AddProduct_presult__isset;

class ProductService_AddProduct_presult {
 public:


  virtual ~ProductService_AddProduct_presult() throw();
  AddProductRT* success;

  _ProductService_AddProduct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProductService_RemoveProduct_args__isset {
  _ProductService_RemoveProduct_args__isset() : strSid(false), strUserID(false), strPdtID(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool strPdtID :1;
} _ProductService_RemoveProduct_args__isset;

class ProductService_RemoveProduct_args {
 public:

  ProductService_RemoveProduct_args(const ProductService_RemoveProduct_args&);
  ProductService_RemoveProduct_args& operator=(const ProductService_RemoveProduct_args&);
  ProductService_RemoveProduct_args() : strSid(), strUserID(), strPdtID() {
  }

  virtual ~ProductService_RemoveProduct_args() throw();
  std::string strSid;
  std::string strUserID;
  std::string strPdtID;

  _ProductService_RemoveProduct_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_strPdtID(const std::string& val);

  bool operator == (const ProductService_RemoveProduct_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(strPdtID == rhs.strPdtID))
      return false;
    return true;
  }
  bool operator != (const ProductService_RemoveProduct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_RemoveProduct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProductService_RemoveProduct_pargs {
 public:


  virtual ~ProductService_RemoveProduct_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const std::string* strPdtID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_RemoveProduct_result__isset {
  _ProductService_RemoveProduct_result__isset() : success(false) {}
  bool success :1;
} _ProductService_RemoveProduct_result__isset;

class ProductService_RemoveProduct_result {
 public:

  ProductService_RemoveProduct_result(const ProductService_RemoveProduct_result&);
  ProductService_RemoveProduct_result& operator=(const ProductService_RemoveProduct_result&);
  ProductService_RemoveProduct_result() {
  }

  virtual ~ProductService_RemoveProduct_result() throw();
  ProductRTInfo success;

  _ProductService_RemoveProduct_result__isset __isset;

  void __set_success(const ProductRTInfo& val);

  bool operator == (const ProductService_RemoveProduct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProductService_RemoveProduct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_RemoveProduct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_RemoveProduct_presult__isset {
  _ProductService_RemoveProduct_presult__isset() : success(false) {}
  bool success :1;
} _ProductService_RemoveProduct_presult__isset;

class ProductService_RemoveProduct_presult {
 public:


  virtual ~ProductService_RemoveProduct_presult() throw();
  ProductRTInfo* success;

  _ProductService_RemoveProduct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProductService_ModifyProduct_args__isset {
  _ProductService_ModifyProduct_args__isset() : strSid(false), strUserID(false), strPdtID(false), pdt(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool strPdtID :1;
  bool pdt :1;
} _ProductService_ModifyProduct_args__isset;

class ProductService_ModifyProduct_args {
 public:

  ProductService_ModifyProduct_args(const ProductService_ModifyProduct_args&);
  ProductService_ModifyProduct_args& operator=(const ProductService_ModifyProduct_args&);
  ProductService_ModifyProduct_args() : strSid(), strUserID(), strPdtID() {
  }

  virtual ~ProductService_ModifyProduct_args() throw();
  std::string strSid;
  std::string strUserID;
  std::string strPdtID;
  ProductInfo pdt;

  _ProductService_ModifyProduct_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_strPdtID(const std::string& val);

  void __set_pdt(const ProductInfo& val);

  bool operator == (const ProductService_ModifyProduct_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(strPdtID == rhs.strPdtID))
      return false;
    if (!(pdt == rhs.pdt))
      return false;
    return true;
  }
  bool operator != (const ProductService_ModifyProduct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_ModifyProduct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProductService_ModifyProduct_pargs {
 public:


  virtual ~ProductService_ModifyProduct_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const std::string* strPdtID;
  const ProductInfo* pdt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_ModifyProduct_result__isset {
  _ProductService_ModifyProduct_result__isset() : success(false) {}
  bool success :1;
} _ProductService_ModifyProduct_result__isset;

class ProductService_ModifyProduct_result {
 public:

  ProductService_ModifyProduct_result(const ProductService_ModifyProduct_result&);
  ProductService_ModifyProduct_result& operator=(const ProductService_ModifyProduct_result&);
  ProductService_ModifyProduct_result() {
  }

  virtual ~ProductService_ModifyProduct_result() throw();
  ProductRTInfo success;

  _ProductService_ModifyProduct_result__isset __isset;

  void __set_success(const ProductRTInfo& val);

  bool operator == (const ProductService_ModifyProduct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProductService_ModifyProduct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_ModifyProduct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_ModifyProduct_presult__isset {
  _ProductService_ModifyProduct_presult__isset() : success(false) {}
  bool success :1;
} _ProductService_ModifyProduct_presult__isset;

class ProductService_ModifyProduct_presult {
 public:


  virtual ~ProductService_ModifyProduct_presult() throw();
  ProductRTInfo* success;

  _ProductService_ModifyProduct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProductService_QueryProduct_args__isset {
  _ProductService_QueryProduct_args__isset() : strSid(false), strUserID(false), strPdtID(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool strPdtID :1;
} _ProductService_QueryProduct_args__isset;

class ProductService_QueryProduct_args {
 public:

  ProductService_QueryProduct_args(const ProductService_QueryProduct_args&);
  ProductService_QueryProduct_args& operator=(const ProductService_QueryProduct_args&);
  ProductService_QueryProduct_args() : strSid(), strUserID(), strPdtID() {
  }

  virtual ~ProductService_QueryProduct_args() throw();
  std::string strSid;
  std::string strUserID;
  std::string strPdtID;

  _ProductService_QueryProduct_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_strPdtID(const std::string& val);

  bool operator == (const ProductService_QueryProduct_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(strPdtID == rhs.strPdtID))
      return false;
    return true;
  }
  bool operator != (const ProductService_QueryProduct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_QueryProduct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProductService_QueryProduct_pargs {
 public:


  virtual ~ProductService_QueryProduct_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const std::string* strPdtID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_QueryProduct_result__isset {
  _ProductService_QueryProduct_result__isset() : success(false) {}
  bool success :1;
} _ProductService_QueryProduct_result__isset;

class ProductService_QueryProduct_result {
 public:

  ProductService_QueryProduct_result(const ProductService_QueryProduct_result&);
  ProductService_QueryProduct_result& operator=(const ProductService_QueryProduct_result&);
  ProductService_QueryProduct_result() {
  }

  virtual ~ProductService_QueryProduct_result() throw();
  QueryProductRT success;

  _ProductService_QueryProduct_result__isset __isset;

  void __set_success(const QueryProductRT& val);

  bool operator == (const ProductService_QueryProduct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProductService_QueryProduct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_QueryProduct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_QueryProduct_presult__isset {
  _ProductService_QueryProduct_presult__isset() : success(false) {}
  bool success :1;
} _ProductService_QueryProduct_presult__isset;

class ProductService_QueryProduct_presult {
 public:


  virtual ~ProductService_QueryProduct_presult() throw();
  QueryProductRT* success;

  _ProductService_QueryProduct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProductService_QueryAllProduct_args__isset {
  _ProductService_QueryAllProduct_args__isset() : strSid(false), strUserID(false) {}
  bool strSid :1;
  bool strUserID :1;
} _ProductService_QueryAllProduct_args__isset;

class ProductService_QueryAllProduct_args {
 public:

  ProductService_QueryAllProduct_args(const ProductService_QueryAllProduct_args&);
  ProductService_QueryAllProduct_args& operator=(const ProductService_QueryAllProduct_args&);
  ProductService_QueryAllProduct_args() : strSid(), strUserID() {
  }

  virtual ~ProductService_QueryAllProduct_args() throw();
  std::string strSid;
  std::string strUserID;

  _ProductService_QueryAllProduct_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  bool operator == (const ProductService_QueryAllProduct_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    return true;
  }
  bool operator != (const ProductService_QueryAllProduct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_QueryAllProduct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProductService_QueryAllProduct_pargs {
 public:


  virtual ~ProductService_QueryAllProduct_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_QueryAllProduct_result__isset {
  _ProductService_QueryAllProduct_result__isset() : success(false) {}
  bool success :1;
} _ProductService_QueryAllProduct_result__isset;

class ProductService_QueryAllProduct_result {
 public:

  ProductService_QueryAllProduct_result(const ProductService_QueryAllProduct_result&);
  ProductService_QueryAllProduct_result& operator=(const ProductService_QueryAllProduct_result&);
  ProductService_QueryAllProduct_result() {
  }

  virtual ~ProductService_QueryAllProduct_result() throw();
  QueryAllProductRT success;

  _ProductService_QueryAllProduct_result__isset __isset;

  void __set_success(const QueryAllProductRT& val);

  bool operator == (const ProductService_QueryAllProduct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProductService_QueryAllProduct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_QueryAllProduct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_QueryAllProduct_presult__isset {
  _ProductService_QueryAllProduct_presult__isset() : success(false) {}
  bool success :1;
} _ProductService_QueryAllProduct_presult__isset;

class ProductService_QueryAllProduct_presult {
 public:


  virtual ~ProductService_QueryAllProduct_presult() throw();
  QueryAllProductRT* success;

  _ProductService_QueryAllProduct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProductService_AddProductProperty_args__isset {
  _ProductService_AddProductProperty_args__isset() : strSid(false), strUserID(false), strPdtID(false), pdtppt(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool strPdtID :1;
  bool pdtppt :1;
} _ProductService_AddProductProperty_args__isset;

class ProductService_AddProductProperty_args {
 public:

  ProductService_AddProductProperty_args(const ProductService_AddProductProperty_args&);
  ProductService_AddProductProperty_args& operator=(const ProductService_AddProductProperty_args&);
  ProductService_AddProductProperty_args() : strSid(), strUserID(), strPdtID() {
  }

  virtual ~ProductService_AddProductProperty_args() throw();
  std::string strSid;
  std::string strUserID;
  std::string strPdtID;
  ProductProperty pdtppt;

  _ProductService_AddProductProperty_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_strPdtID(const std::string& val);

  void __set_pdtppt(const ProductProperty& val);

  bool operator == (const ProductService_AddProductProperty_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(strPdtID == rhs.strPdtID))
      return false;
    if (!(pdtppt == rhs.pdtppt))
      return false;
    return true;
  }
  bool operator != (const ProductService_AddProductProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_AddProductProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProductService_AddProductProperty_pargs {
 public:


  virtual ~ProductService_AddProductProperty_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const std::string* strPdtID;
  const ProductProperty* pdtppt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_AddProductProperty_result__isset {
  _ProductService_AddProductProperty_result__isset() : success(false) {}
  bool success :1;
} _ProductService_AddProductProperty_result__isset;

class ProductService_AddProductProperty_result {
 public:

  ProductService_AddProductProperty_result(const ProductService_AddProductProperty_result&);
  ProductService_AddProductProperty_result& operator=(const ProductService_AddProductProperty_result&);
  ProductService_AddProductProperty_result() {
  }

  virtual ~ProductService_AddProductProperty_result() throw();
  AddProductPropertyRT success;

  _ProductService_AddProductProperty_result__isset __isset;

  void __set_success(const AddProductPropertyRT& val);

  bool operator == (const ProductService_AddProductProperty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProductService_AddProductProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_AddProductProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_AddProductProperty_presult__isset {
  _ProductService_AddProductProperty_presult__isset() : success(false) {}
  bool success :1;
} _ProductService_AddProductProperty_presult__isset;

class ProductService_AddProductProperty_presult {
 public:


  virtual ~ProductService_AddProductProperty_presult() throw();
  AddProductPropertyRT* success;

  _ProductService_AddProductProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ProductService_RemoveProductProperty_args__isset {
  _ProductService_RemoveProductProperty_args__isset() : strSid(false), strUserID(false), strPdtID(false), strPdtpptID(false) {}
  bool strSid :1;
  bool strUserID :1;
  bool strPdtID :1;
  bool strPdtpptID :1;
} _ProductService_RemoveProductProperty_args__isset;

class ProductService_RemoveProductProperty_args {
 public:

  ProductService_RemoveProductProperty_args(const ProductService_RemoveProductProperty_args&);
  ProductService_RemoveProductProperty_args& operator=(const ProductService_RemoveProductProperty_args&);
  ProductService_RemoveProductProperty_args() : strSid(), strUserID(), strPdtID(), strPdtpptID() {
  }

  virtual ~ProductService_RemoveProductProperty_args() throw();
  std::string strSid;
  std::string strUserID;
  std::string strPdtID;
  std::string strPdtpptID;

  _ProductService_RemoveProductProperty_args__isset __isset;

  void __set_strSid(const std::string& val);

  void __set_strUserID(const std::string& val);

  void __set_strPdtID(const std::string& val);

  void __set_strPdtpptID(const std::string& val);

  bool operator == (const ProductService_RemoveProductProperty_args & rhs) const
  {
    if (!(strSid == rhs.strSid))
      return false;
    if (!(strUserID == rhs.strUserID))
      return false;
    if (!(strPdtID == rhs.strPdtID))
      return false;
    if (!(strPdtpptID == rhs.strPdtpptID))
      return false;
    return true;
  }
  bool operator != (const ProductService_RemoveProductProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_RemoveProductProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ProductService_RemoveProductProperty_pargs {
 public:


  virtual ~ProductService_RemoveProductProperty_pargs() throw();
  const std::string* strSid;
  const std::string* strUserID;
  const std::string* strPdtID;
  const std::string* strPdtpptID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_RemoveProductProperty_result__isset {
  _ProductService_RemoveProductProperty_result__isset() : success(false) {}
  bool success :1;
} _ProductService_RemoveProductProperty_result__isset;

class ProductService_RemoveProductProperty_result {
 public:

  ProductService_RemoveProductProperty_result(const ProductService_RemoveProductProperty_result&);
  ProductService_RemoveProductProperty_result& operator=(const ProductService_RemoveProductProperty_result&);
  ProductService_RemoveProductProperty_result() {
  }

  virtual ~ProductService_RemoveProductProperty_result() throw();
  ProductRTInfo success;

  _ProductService_RemoveProductProperty_result__isset __isset;

  void __set_success(const ProductRTInfo& val);

  bool operator == (const ProductService_RemoveProductProperty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProductService_RemoveProductProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductService_RemoveProductProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ProductService_RemoveProductProperty_presult__isset {
  _ProductService_RemoveProductProperty_presult__isset() : success(false) {}
  bool success :1;
} _ProductService_RemoveProductProperty_presult__isset;

class ProductService_RemoveProductProperty_presult {
 public:


  virtual ~ProductService_RemoveProductProperty_presult() throw();
  ProductRTInfo* success;

  _ProductService_RemoveProductProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ProductServiceClient : virtual public ProductServiceIf {
 public:
  ProductServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProductServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AddProduct(AddProductRT& _return, const std::string& strSid, const std::string& strUserID, const ProductInfo& pdt);
  void send_AddProduct(const std::string& strSid, const std::string& strUserID, const ProductInfo& pdt);
  void recv_AddProduct(AddProductRT& _return);
  void RemoveProduct(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID);
  void send_RemoveProduct(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID);
  void recv_RemoveProduct(ProductRTInfo& _return);
  void ModifyProduct(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductInfo& pdt);
  void send_ModifyProduct(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductInfo& pdt);
  void recv_ModifyProduct(ProductRTInfo& _return);
  void QueryProduct(QueryProductRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID);
  void send_QueryProduct(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID);
  void recv_QueryProduct(QueryProductRT& _return);
  void QueryAllProduct(QueryAllProductRT& _return, const std::string& strSid, const std::string& strUserID);
  void send_QueryAllProduct(const std::string& strSid, const std::string& strUserID);
  void recv_QueryAllProduct(QueryAllProductRT& _return);
  void AddProductProperty(AddProductPropertyRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductProperty& pdtppt);
  void send_AddProductProperty(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductProperty& pdtppt);
  void recv_AddProductProperty(AddProductPropertyRT& _return);
  void RemoveProductProperty(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const std::string& strPdtpptID);
  void send_RemoveProductProperty(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const std::string& strPdtpptID);
  void recv_RemoveProductProperty(ProductRTInfo& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ProductServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ProductServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProductServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AddProduct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveProduct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ModifyProduct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryProduct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryAllProduct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AddProductProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveProductProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProductServiceProcessor(::apache::thrift::stdcxx::shared_ptr<ProductServiceIf> iface) :
    iface_(iface) {
    processMap_["AddProduct"] = &ProductServiceProcessor::process_AddProduct;
    processMap_["RemoveProduct"] = &ProductServiceProcessor::process_RemoveProduct;
    processMap_["ModifyProduct"] = &ProductServiceProcessor::process_ModifyProduct;
    processMap_["QueryProduct"] = &ProductServiceProcessor::process_QueryProduct;
    processMap_["QueryAllProduct"] = &ProductServiceProcessor::process_QueryAllProduct;
    processMap_["AddProductProperty"] = &ProductServiceProcessor::process_AddProductProperty;
    processMap_["RemoveProductProperty"] = &ProductServiceProcessor::process_RemoveProductProperty;
  }

  virtual ~ProductServiceProcessor() {}
};

class ProductServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProductServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ProductServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ProductServiceIfFactory > handlerFactory_;
};

class ProductServiceMultiface : virtual public ProductServiceIf {
 public:
  ProductServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ProductServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ProductServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ProductServiceIf> > ifaces_;
  ProductServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ProductServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AddProduct(AddProductRT& _return, const std::string& strSid, const std::string& strUserID, const ProductInfo& pdt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddProduct(_return, strSid, strUserID, pdt);
    }
    ifaces_[i]->AddProduct(_return, strSid, strUserID, pdt);
    return;
  }

  void RemoveProduct(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveProduct(_return, strSid, strUserID, strPdtID);
    }
    ifaces_[i]->RemoveProduct(_return, strSid, strUserID, strPdtID);
    return;
  }

  void ModifyProduct(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductInfo& pdt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ModifyProduct(_return, strSid, strUserID, strPdtID, pdt);
    }
    ifaces_[i]->ModifyProduct(_return, strSid, strUserID, strPdtID, pdt);
    return;
  }

  void QueryProduct(QueryProductRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryProduct(_return, strSid, strUserID, strPdtID);
    }
    ifaces_[i]->QueryProduct(_return, strSid, strUserID, strPdtID);
    return;
  }

  void QueryAllProduct(QueryAllProductRT& _return, const std::string& strSid, const std::string& strUserID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryAllProduct(_return, strSid, strUserID);
    }
    ifaces_[i]->QueryAllProduct(_return, strSid, strUserID);
    return;
  }

  void AddProductProperty(AddProductPropertyRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductProperty& pdtppt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddProductProperty(_return, strSid, strUserID, strPdtID, pdtppt);
    }
    ifaces_[i]->AddProductProperty(_return, strSid, strUserID, strPdtID, pdtppt);
    return;
  }

  void RemoveProductProperty(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const std::string& strPdtpptID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveProductProperty(_return, strSid, strUserID, strPdtID, strPdtpptID);
    }
    ifaces_[i]->RemoveProductProperty(_return, strSid, strUserID, strPdtID, strPdtpptID);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ProductServiceConcurrentClient : virtual public ProductServiceIf {
 public:
  ProductServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProductServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AddProduct(AddProductRT& _return, const std::string& strSid, const std::string& strUserID, const ProductInfo& pdt);
  int32_t send_AddProduct(const std::string& strSid, const std::string& strUserID, const ProductInfo& pdt);
  void recv_AddProduct(AddProductRT& _return, const int32_t seqid);
  void RemoveProduct(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID);
  int32_t send_RemoveProduct(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID);
  void recv_RemoveProduct(ProductRTInfo& _return, const int32_t seqid);
  void ModifyProduct(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductInfo& pdt);
  int32_t send_ModifyProduct(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductInfo& pdt);
  void recv_ModifyProduct(ProductRTInfo& _return, const int32_t seqid);
  void QueryProduct(QueryProductRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID);
  int32_t send_QueryProduct(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID);
  void recv_QueryProduct(QueryProductRT& _return, const int32_t seqid);
  void QueryAllProduct(QueryAllProductRT& _return, const std::string& strSid, const std::string& strUserID);
  int32_t send_QueryAllProduct(const std::string& strSid, const std::string& strUserID);
  void recv_QueryAllProduct(QueryAllProductRT& _return, const int32_t seqid);
  void AddProductProperty(AddProductPropertyRT& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductProperty& pdtppt);
  int32_t send_AddProductProperty(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const ProductProperty& pdtppt);
  void recv_AddProductProperty(AddProductPropertyRT& _return, const int32_t seqid);
  void RemoveProductProperty(ProductRTInfo& _return, const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const std::string& strPdtpptID);
  int32_t send_RemoveProductProperty(const std::string& strSid, const std::string& strUserID, const std::string& strPdtID, const std::string& strPdtpptID);
  void recv_RemoveProductProperty(ProductRTInfo& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
